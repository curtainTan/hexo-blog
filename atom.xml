<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>curTain</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.curtaintan.club/"/>
  <updated>2020-02-22T11:08:55.244Z</updated>
  <id>http://blog.curtaintan.club/</id>
  
  <author>
    <name>tanTantan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javascript之DOM自定义事件</title>
    <link href="http://blog.curtaintan.club/2020/02/22/javascript%E4%B9%8BDOM%E4%BA%8B%E4%BB%B6/"/>
    <id>http://blog.curtaintan.club/2020/02/22/javascript%E4%B9%8BDOM%E4%BA%8B%E4%BB%B6/</id>
    <published>2020-02-22T06:34:43.000Z</published>
    <updated>2020-02-22T11:08:55.244Z</updated>
    
    <content type="html"><![CDATA[<p><fancybox><img src="https://image.gslb.dawnlab.me/a3a95260bca8115d010a419ee021f85a.png" alt=""></fancybox></p><p>本文主要介绍 DOM 事件级别、DOM 事件模型、事件流、Event 对象常见的应用和自定义 DOM 事件。</p><a id="more"></a><h1 id="1-DOM-事件级别"><a href="#1-DOM-事件级别" class="headerlink" title="1. DOM 事件级别"></a>1. DOM 事件级别</h1><p>DOM 事件分为3个级别：DOM 0级事件处理，DOM 2级事件处理和DOM 3级事件处理。</p><h2 id="1-1-DOM-0级事件"><a href="#1-1-DOM-0级事件" class="headerlink" title="1.1 DOM 0级事件"></a>1.1 DOM 0级事件</h2><p><strong>el.onclick=function(){}</strong></p><figure class="highlight js"><figcaption><span>DOM 0级事件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span><br><span class="line"> btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     alert(<span class="keyword">this</span>.innerHTML);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>为元素的一种事件绑定一个方法，这些方法都在冒泡阶段执行。</p><h2 id="1-2-DOM-2级事件"><a href="#1-2-DOM-2级事件" class="headerlink" title="1.2 DOM 2级事件"></a>1.2 DOM 2级事件</h2><p><strong>el.addEventListener(event-name, callback, useCapture)</strong></p><ul><li>event-name: 事件名称，可以是标准的DOM事件</li><li>callback: 回调函数，当事件触发时，函数会被注入一个参数为当前的事件对象 event</li><li>useCapture: 默认是false，代表事件句柄在冒泡阶段执行</li></ul><figure class="highlight js"><figcaption><span>DOM 2级事件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, test, <span class="literal">false</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">e = e || <span class="built_in">window</span>.event;</span><br><span class="line">    alert((e.target || e.srcElement).innerHTML);</span><br><span class="line">    btn.removeEventListener(<span class="string">"click"</span>, test)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//IE9-:attachEvent()与detachEvent()。</span></span><br><span class="line"><span class="comment">//IE9+/chrom/FF:addEventListener()和removeEventListener()</span></span><br></pre></td></tr></table></figure><p>IE9以下的IE浏览器不支持 addEventListener()和removeEventListener()，使用 attachEvent()与detachEvent() 代替，因为IE9以下是不支持事件捕获的，所以也没有第三个参数，第一个事件名称前要加on。</p><h1 id="1-3-DOM-3级事件"><a href="#1-3-DOM-3级事件" class="headerlink" title="1.3 DOM 3级事件"></a>1.3 DOM 3级事件</h1><p>在DOM 2级事件的基础上添加了更多的事件类型。</p><ul><li>UI事件，当用户与页面上的元素交互时触发，如：load、scroll</li><li>焦点事件，当元素获得或失去焦点时触发，如：blur、focus</li><li>鼠标事件，当用户通过鼠标在页面执行操作时触发如：dblclick、mouseup</li><li>滚轮事件，当使用鼠标滚轮或类似设备时触发，如：mousewheel</li><li>文本事件，当在文档中输入文本时触发，如：textInput</li><li>键盘事件，当用户通过键盘在页面上执行操作时触发，如：keydown、keypress</li><li>合成事件，当为IME（输入法编辑器）输入字符时触发，如：compositionstart</li><li>变动事件，当底层DOM结构发生变化时触发，如：DOMsubtreeModified</li><li>动画事件，当css3 animation动画执行开始和结束时触发，如：webkitAnimationEnd mozAnimationEnd</li><li>同时DOM3级事件也允许使用者自定义一些事件。</li></ul><p><strong>说明：</strong></p><p>动画事件中不同浏览器的AnimationEnd写法：</p><ul><li>谷歌浏览器：webkitAnimationEnd</li><li>火狐浏览器：mozAnimationEnd</li><li>IE系浏览器：MSAnimationEnd</li><li>欧朋浏览器：oanimationend</li><li>通用浏览器：animationend</li></ul><h1 id="2、DOM事件模型和事件流"><a href="#2、DOM事件模型和事件流" class="headerlink" title="2、DOM事件模型和事件流"></a>2、DOM事件模型和事件流</h1><p><strong>DOM事件模型分为捕获和冒泡。</strong>一个事件发生后，会在子元素和父元素之间传播（propagation）。这种传播分成三个阶段。</p><p>（1）捕获阶段：事件从window对象自上而下向目标节点传播的阶段；<br>（2）目标阶段：真正的目标节点正在处理事件的阶段；<br>（3）冒泡阶段：事件从目标节点自下而上向window对象传播的阶段。</p><p><strong>DOM事件捕获的具体流程</strong><br><fancybox><img src="https://image.gslb.dawnlab.me/bdfc8b5d16793a07dd301bdf2e3029c5.png" alt=""></fancybox></p><p>捕获是从上到下，事件先从window对象，然后再到document（对象），然后是html标签（通过document.documentElement获取html标签），然后是body标签（通过document.body获取body标签），然后按照普通的html结构一层一层往下传，最后到达目标元素。</p><p>这一系列的事件，就构成了事件流..</p><h1 id="3、Event对象常见的应用"><a href="#3、Event对象常见的应用" class="headerlink" title="3、Event对象常见的应用"></a>3、Event对象常见的应用</h1><h2 id="3-1-阻止默认事件"><a href="#3-1-阻止默认事件" class="headerlink" title="3.1 阻止默认事件"></a>3.1 阻止默认事件</h2><p><strong>event. preventDefault()</strong></p><p>调用此方法，将阻止默认事件的触发，例如：a 标签的跳转</p><p>阻止默认事件触发的方法：</p><figure class="highlight js"><figcaption><span>阻止默认事件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 使用空的 js </span></span><br><span class="line">&lt;a href=<span class="string">"javascript:;"</span>&gt;链接&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 2. 返回 false</span></span><br><span class="line"><span class="regexp">&lt;a id="test" href="http:/</span><span class="regexp">/www.cnblogs.com"&gt;链接&lt;/</span>a&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">test.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    e = e || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 3. 使用 preventDefault</span></span><br><span class="line"><span class="regexp">&lt;a id="test" href="http:/</span><span class="regexp">/www.cnblogs.com"&gt;链接&lt;/</span>a&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">test.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    e = e || <span class="built_in">window</span>.event;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-2-阻止事件冒泡"><a href="#3-2-阻止事件冒泡" class="headerlink" title="3.2 阻止事件冒泡"></a>3.2 阻止事件冒泡</h2><p><strong>event.stopPropagation()</strong></p><p>调用此方法，事件将停止冒泡。</p><h2 id="3-3-停止事件传播"><a href="#3-3-停止事件传播" class="headerlink" title="3.3 停止事件传播"></a>3.3 停止事件传播</h2><p><strong>event.stopImmediatePropagation()</strong></p><p>调用此方法，将阻止此方法后面的方法执行。例如：一个事件绑定多个方法，方法依次调用，调用此方法后面的方法将不会执行，且阻止事件冒泡。</p><figure class="highlight js"><figcaption><span>停止事件传播 stopImmediatePropagation</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">".btn"</span>)</span><br><span class="line"><span class="comment">// 第一个事件</span></span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> e </span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"我是第一个注册的事件"</span> )</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 注册第二个事件</span></span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> e </span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"我是第二个注册的事件，我要调用 event.stopImmediatePropagation()方法"</span> )</span><br><span class="line">    e.stopImmediatePropagation()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 注册第三个事件</span></span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> e </span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"我是第三个注册的事件"</span> )</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// document 捕获阶段事件</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener( <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"document---我在捕获阶段执行"</span> )</span><br><span class="line">&#125;, <span class="literal">true</span> )</span><br><span class="line"><span class="comment">// document 冒泡阶段事件</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener( <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"document---我在冒泡阶段执行"</span> )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong><br><fancybox><img src="https://image.gslb.dawnlab.me/bc3edc164f68c3acd2a32d51e9beb0b7.png" alt=""></fancybox></p><h2 id="3-4-获取被点击的子元素"><a href="#3-4-获取被点击的子元素" class="headerlink" title="3.4 获取被点击的子元素"></a>3.4 获取被点击的子元素</h2><p><strong>event.target</strong></p><p>将被点击的子元素绑定在此属性上，我们可以用此 <code>event.target</code> + <code>data-** 自定义属性</code> 实现事件代理。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-index</span>=<span class="string">"1"</span> &gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-index</span>=<span class="string">"2"</span> &gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-index</span>=<span class="string">"3"</span> &gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-index</span>=<span class="string">"4"</span> &gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-index</span>=<span class="string">"5"</span> &gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">"ul"</span>)</span></span><br><span class="line"><span class="actionscript">    ul.addEventListener( <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log( <span class="string">"e.target:"</span> )</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.dir( e.target )</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 使用 dataset 获取绑定在元素上的标记属性（例如：元素下标）</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log( <span class="string">"e.target.dataset"</span>, e.target.dataset )</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/49d08a68cf0a0a4804c1d243ccd9deee.png" alt=""></fancybox></p><h2 id="3-5-获取当前注册事件元素"><a href="#3-5-获取当前注册事件元素" class="headerlink" title="3.5 获取当前注册事件元素"></a>3.5 获取当前注册事件元素</h2><p><strong>event.currentTarget</strong></p><p>使用该属性，获取当前注册事件的元素。</p><h1 id="4-自定义事件"><a href="#4-自定义事件" class="headerlink" title="4. 自定义事件"></a>4. 自定义事件</h1><p>可以使用两种方式自定义事件：<code>new Event( eventType )</code> 和 <code>new CustomEvent( eventType, params )</code></p><h2 id="4-1-new-Event"><a href="#4-1-new-Event" class="headerlink" title="4.1 new Event()"></a>4.1 new Event()</h2><p>语法：<code>event = new Event(eventType, eventInit);</code></p><p>一般只传递第一个参数``eventType`，后面为 Event 对象上的参数</p><h2 id="4-2-CustomEvent"><a href="#4-2-CustomEvent" class="headerlink" title="4.2 CustomEvent()"></a>4.2 CustomEvent()</h2><p>语法：<code>event = new CustomEvent(eventType, { detail：params });</code></p><p>eventType：事件名称<br>params：自定义参数</p><h2 id="4-3-合并案例"><a href="#4-3-合并案例" class="headerlink" title="4.3 合并案例"></a>4.3 合并案例</h2><figure class="highlight js"><figcaption><span>自定义事件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">".btn"</span>)</span><br><span class="line"><span class="comment">// Event 自定义事件</span></span><br><span class="line"><span class="keyword">var</span> eve = <span class="keyword">new</span> Event(<span class="string">"go"</span>)</span><br><span class="line">btn.addEventListener( <span class="string">"go"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> e </span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"我是自定义事件："</span>, e )</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// CustomEvent 事件构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCustomEvent</span>(<span class="params"> eventType = <span class="string">"mock-event"</span>, params = &#123;&#125; </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CustomEvent( eventType, &#123; <span class="attr">detail</span>: params &#125; )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// CustomEvent 事件</span></span><br><span class="line"><span class="keyword">var</span> event = createCustomEvent( <span class="string">"customGo"</span>, &#123; <span class="attr">name</span>: <span class="string">"tan"</span> &#125; )</span><br><span class="line">btn.addEventListener( <span class="string">"customGo"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> data </span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"我是传参事件------"</span>, data )</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 触发事件各个</span></span><br><span class="line">btn.addEventListener( <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"我的定义的 Click 事件"</span> )</span><br><span class="line">    btn.dispatchEvent( eve )</span><br><span class="line">    btn.dispatchEvent( event )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/b5f271429ec73092af1077f1dc0f92a8.png" alt=""></fancybox></p><h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h1><p>关于事件，需要记住 </p><ol><li><code>addEventListener()</code> 函数的使用，</li><li><code>e.preventDefault()</code> 禁止默认事件</li><li><code>e.stopPropagation()</code> 阻止冒泡</li><li><code>e.target.dataset</code> 获取 dom 中 <code>data-**</code> 自定义属性</li></ol><p>自定义时间需要了解，并且自定义事件类似观察者模式，需要手动触发事件。</p><h1 id="6-参考材料"><a href="#6-参考材料" class="headerlink" title="6. 参考材料"></a>6. 参考材料</h1><p><a href="https://juejin.im/post/5bd2e5f8e51d4524640e1304" target="_blank" rel="noopener">浪里行舟-DOM事件机制</a></p><p><a href="https://juejin.im/post/5c4bd01fe51d45522b4f6e4e" target="_blank" rel="noopener">DOM 事件详解</a></p><p><a href="https://blog.csdn.net/qappleh/article/details/97778386" target="_blank" rel="noopener">css3判断animation动画是否完成，以及在动画完成后执行事件</a></p><p><a href="https://www.cnblogs.com/xmlys/p/7716134.html" target="_blank" rel="noopener">CSS浏览器前缀兼容写法</a></p><p><a href="https://www.cnblogs.com/cwsb/p/10384219.html" target="_blank" rel="noopener">自定义事件——Event和CustomEvent</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent" target="_blank" rel="noopener">MDN-CustomEvent</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;fancybox&gt;&lt;img src=&quot;https://image.gslb.dawnlab.me/a3a95260bca8115d010a419ee021f85a.png&quot; alt=&quot;&quot;&gt;&lt;/fancybox&gt;&lt;/p&gt;
&lt;p&gt;本文主要介绍 DOM 事件级别、DOM 事件模型、事件流、Event 对象常见的应用和自定义 DOM 事件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://blog.curtaintan.club/categories/JavaScript/"/>
    
    
      <category term="js基础" scheme="http://blog.curtaintan.club/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>思路清晰---一次搞懂几种content-type的区别</title>
    <link href="http://blog.curtaintan.club/2020/02/19/%E6%80%9D%E8%B7%AF%E6%B8%85%E6%99%B0-%E4%B8%80%E6%AC%A1%E6%90%9E%E6%87%82%E5%87%A0%E7%A7%8Dcontent-type%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://blog.curtaintan.club/2020/02/19/%E6%80%9D%E8%B7%AF%E6%B8%85%E6%99%B0-%E4%B8%80%E6%AC%A1%E6%90%9E%E6%87%82%E5%87%A0%E7%A7%8Dcontent-type%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2020-02-19T13:28:03.000Z</published>
    <updated>2020-02-19T14:08:06.724Z</updated>
    
    <content type="html"><![CDATA[<p>当使用 ajax 时，你是否还对 <code>setRequestHeader( &quot;content-type&quot;, &quot;*&quot; )</code> 的几种值傻傻分不清？？</p><p>不要慌，一次性记住他们…..</p><a id="more"></a><h1 id="1、Content-Type-的值类型"><a href="#1、Content-Type-的值类型" class="headerlink" title="1、Content-Type 的值类型"></a>1、Content-Type 的值类型</h1><ol><li>application/json：消息主体是序列化后的 JSON 字符串</li><li>application/x-www-form-urlencoded：数据被编码为名称/值对。这是标准的编码格式</li><li>multipart/form-data： 需要在表单中进行文件上传时，就需要使用该格式。常见的媒体格式是上传文件之时使用的</li><li>text/plain：数据以纯文本形式(text/json/xml/html)进行编码，其中不含任何控件或格式字符</li></ol><h1 id="2、application-json-和-application-x-www-form-urlencoded的区别"><a href="#2、application-json-和-application-x-www-form-urlencoded的区别" class="headerlink" title="2、application/json 和 application/x-www-form-urlencoded的区别"></a>2、application/json 和 application/x-www-form-urlencoded的区别</h1><h2 id="2-1-application-json："><a href="#2-1-application-json：" class="headerlink" title="2.1 application/json："></a>2.1 application/json：</h2><p>作用： 告诉服务器请求的主题内容是json格式的字符串，服务器端会对json字符串进行解析。<br>好处： 前端人员不需要关心数据结构的复杂度，只要是标准的 json 格式就能提交成功。</p><p><strong>使用案例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open( type, url, <span class="literal">true</span> )</span><br><span class="line">xhr.setRequestHeader( <span class="string">"Content-Type"</span> , <span class="string">"application/json"</span> )</span><br><span class="line"><span class="comment">// 传入参数是 JSON 字符串</span></span><br><span class="line">xhr.send( <span class="built_in">JSON</span>.stringify( data ) )</span><br></pre></td></tr></table></figure><h2 id="2-1-application-x-www-form-urlencoded："><a href="#2-1-application-x-www-form-urlencoded：" class="headerlink" title="2.1 application/x-www-form-urlencoded："></a>2.1 application/x-www-form-urlencoded：</h2><p>作用：在请求发送过程中会对数据进行序列化处理，以键值对形式 key1=value1&amp;key2=value2 的方式发送到服务器，<br>好处： 所有浏览器都支持<br>缺点：需要处理传入的参数为 key1=value1&amp;key2=value2 格式</p><h1 id="3、multipart-form-data"><a href="#3、multipart-form-data" class="headerlink" title="3、multipart/form-data"></a>3、multipart/form-data</h1><p>form 表单默认编码格式是：application/x-www-form-urlencoded</p><p>当表单需要发送文件或图片时，需要设置 enctype 为 multipart/form-data</p><p><strong>案例：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://**/uploadImage"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="4-使用-xhr-发送文件和图片"><a href="#4-使用-xhr-发送文件和图片" class="headerlink" title="4. 使用 xhr 发送文件和图片"></a>4. 使用 xhr 发送文件和图片</h1><p>只需将数据和文件放入 FormData 即可.</p><p><strong>案例：</strong></p><figure class="highlight js"><figcaption><span>xhr发送文件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取文件放入 FormData</span></span><br><span class="line"><span class="keyword">var</span> formdata = <span class="keyword">new</span> FormData()</span><br><span class="line"><span class="keyword">var</span> elFile = <span class="built_in">document</span>.getElementById( <span class="string">"myfile"</span> )</span><br><span class="line">elFile.addEventListener( <span class="string">"change"</span>, () =&gt; &#123;</span><br><span class="line">    formdata.append( <span class="string">"file"</span>, elFile.files[<span class="number">0</span>] )</span><br><span class="line">    <span class="comment">// 调用发送文件</span></span><br><span class="line">    sendFile()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 创建 xhr</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open( <span class="string">"post"</span>, <span class="string">"http://***/uploadImage"</span> )</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( xhr.status === <span class="number">200</span> &amp;&amp; xhr.readyState === <span class="number">4</span> )&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"请求成功----"</span> )</span><br><span class="line">    <span class="built_in">console</span>.log( xhr.response )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendFile</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    xhr.send( formdata )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h1><p>这四个属性都能设置在 from 表达上的 enctype 上，</p><p>application/json 和 application/x-www-form-urlencoded 设置在 xhr 上，主要的区别是对上传参数的格式不同</p><p>multipart/form-data 设置在 form 表单上，用于上传文件和图片.</p><h1 id="6-参考材料"><a href="#6-参考材料" class="headerlink" title="6. 参考材料"></a>6. 参考材料</h1><p><a href="https://www.jianshu.com/p/2ac9297e00f9" target="_blank" rel="noopener">关于Content-Type几种值的区别及用法</a></p><p><a href="https://www.jianshu.com/p/24799c0f0008" target="_blank" rel="noopener">http请求content-type包括几种，区别是什么？</a></p><p><a href="https://blog.csdn.net/Raywang80s/article/details/74917693" target="_blank" rel="noopener">XMLHTTP中setRequestHeader方法和参数</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当使用 ajax 时，你是否还对 &lt;code&gt;setRequestHeader( &amp;quot;content-type&amp;quot;, &amp;quot;*&amp;quot; )&lt;/code&gt; 的几种值傻傻分不清？？&lt;/p&gt;
&lt;p&gt;不要慌，一次性记住他们…..&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://blog.curtaintan.club/categories/JavaScript/"/>
    
    
      <category term="js基础" scheme="http://blog.curtaintan.club/tags/js%E5%9F%BA%E7%A1%80/"/>
    
      <category term="ajax" scheme="http://blog.curtaintan.club/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>封装一个ajax</title>
    <link href="http://blog.curtaintan.club/2020/02/19/%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AAajax/"/>
    <id>http://blog.curtaintan.club/2020/02/19/%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AAajax/</id>
    <published>2020-02-19T09:06:53.000Z</published>
    <updated>2020-02-19T14:11:40.280Z</updated>
    
    <content type="html"><![CDATA[<p>简单的封装一个 ajax：</p><ol><li>自动处理参数</li><li>支持 get 和 post</li><li>支持取消操作</li></ol><a id="more"></a><h1 id="1-基于-XMLHttpRequest-封装"><a href="#1-基于-XMLHttpRequest-封装" class="headerlink" title="1. 基于 XMLHttpRequest 封装"></a>1. 基于 XMLHttpRequest 封装</h1><p>XMLHttpRequest 相关信息请参考：<strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener">MDN–XMLHttpRequest</a></strong></p><p><strong>XMLHttpRequest 对象主要的属性：</strong><br><fancybox><img src="https://image.gslb.dawnlab.me/4bdab618bfd707da777479a77d683171.png" alt=""></fancybox></p><h2 id="1-1-原生-XHR-创建步骤"><a href="#1-1-原生-XHR-创建步骤" class="headerlink" title="1.1 原生 XHR 创建步骤"></a>1.1 原生 XHR 创建步骤</h2><p>总共分 5 步：</p><ol><li>第一步：使用 new XMLHttpRequest() 创建 XHR 实例</li><li>第二步：使用 xhr.open() 创建一个请求，并初始化相关 http 请求信息</li><li>设置请求头</li><li>设置响应 http 状态变化的函数</li><li>调用 send 方法，发送 http 请求</li></ol><p><strong>整体结构：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myAjax</span>(<span class="params"> obj </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.url = obj.url || <span class="string">""</span></span><br><span class="line">    <span class="keyword">this</span>.type = obj.type || <span class="string">"GET"</span></span><br><span class="line">    <span class="keyword">this</span>.data = obj.data ||&#123;&#125;</span><br><span class="line">    <span class="keyword">this</span>.success = obj.success || <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.error = obj.error || <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">&#125;</span><br><span class="line">myAjax.prototype.send = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">myAjax.prototype.abort = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>完成结果：</strong></p><figure class="highlight js"><figcaption><span>ajax ---- XMLHttpRequest</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myAjax</span>(<span class="params"> obj </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.url = obj.url || <span class="string">""</span></span><br><span class="line">    <span class="keyword">this</span>.type = obj.type || <span class="string">"GET"</span></span><br><span class="line">    <span class="keyword">this</span>.data = obj.data ||&#123;&#125;</span><br><span class="line">    <span class="keyword">this</span>.success = obj.success || <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.error = obj.error || <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myAjax.prototype.send = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 将数据取出来 以 key=value 的形式保存到数组中，方便后续操作</span></span><br><span class="line">    <span class="keyword">let</span> dataArr = []</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">let</span> key <span class="keyword">in</span> <span class="keyword">this</span>.data )&#123;</span><br><span class="line">        dataArr.push( key + <span class="string">"="</span> + <span class="keyword">this</span>.data[key] )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">this</span>.type === <span class="string">"GET"</span> || <span class="keyword">this</span>.type === <span class="string">"get"</span> )&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = <span class="keyword">this</span>.url + <span class="string">"?"</span> + dataArr.join(<span class="string">"&amp;"</span>)</span><br><span class="line">        <span class="comment">// 删除尾部的 ?，当 data 为空的时候会多出来 ?</span></span><br><span class="line">        <span class="keyword">this</span>.xhr.open( <span class="keyword">this</span>.type, <span class="keyword">this</span>.url.replace(<span class="regexp">/\?$/g</span>, <span class="string">""</span>), <span class="literal">true</span> )</span><br><span class="line">        <span class="keyword">this</span>.xhr.send()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">this</span>.type === <span class="string">"POST"</span> || <span class="keyword">this</span>.type === <span class="string">"post"</span> )&#123;</span><br><span class="line">        <span class="keyword">this</span>.xhr.open( <span class="keyword">this</span>.type, <span class="keyword">this</span>.url, <span class="literal">true</span> )</span><br><span class="line">        <span class="keyword">this</span>.xhr.setRequestHeader( <span class="string">"content-type"</span>, <span class="string">"application/x-www-form-urlencoded"</span> )</span><br><span class="line">        <span class="keyword">this</span>.xhr.send( dataArr.join( <span class="string">"&amp;"</span> ) )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用箭头函数   将 this 指向当前对象</span></span><br><span class="line">    <span class="keyword">this</span>.xhr.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>( <span class="keyword">this</span>.xhr.readyState === <span class="number">4</span> &amp;&amp; </span><br><span class="line">            <span class="comment">// 200 是请求成功，304 重定向使用缓存资源</span></span><br><span class="line">            ( <span class="keyword">this</span>.xhr.status === <span class="number">200</span> || <span class="keyword">this</span>.xhr.status === <span class="number">304</span> ) )&#123;</span><br><span class="line">                <span class="keyword">if</span>( <span class="keyword">this</span>.success &amp;&amp; <span class="keyword">this</span>.success <span class="keyword">instanceof</span> <span class="built_in">Function</span> )&#123;</span><br><span class="line">                    <span class="keyword">var</span> res = <span class="keyword">this</span>.xhr.responseText</span><br><span class="line">                    <span class="keyword">if</span>( <span class="keyword">typeof</span> res === <span class="string">"string"</span> )&#123;</span><br><span class="line">                        <span class="keyword">this</span>.success( <span class="built_in">JSON</span>.parse( res ) )</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">myAjax.prototype.abort = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"已经取消请求..."</span> )</span><br><span class="line">    <span class="keyword">this</span>.xhr.abort()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-基于-fetch-封装"><a href="#2-基于-fetch-封装" class="headerlink" title="2. 基于 fetch 封装"></a>2. 基于 fetch 封装</h1><p>若果你不知道 fetch 的使用，请参考</p><ol><li><strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WindowOrWorkerGlobalScope/fetch" target="_blank" rel="noopener">MDN-fetch 文档</a></strong></li><li><strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="noopener">MDN-fetch 使用相关</a></strong></li></ol><p><strong>fetch 第二个参数选项：</strong></p><ol><li>method: 请求使用的方法，如 GET、POST。</li><li>headers: 请求的头信息，形式为 Headers 的对象或包含 ByteString 值的对象字面量。</li><li>body: 请求的 body 信息：可能是一个 Blob、BufferSource、FormData、URLSearchParams 或者 USVString 对象。注意 GET 或 HEAD 方法的请求不能包含 body 信息。</li><li>mode: 请求的模式，如 cors、 no-cors 或者 same-origin。</li><li>credentials: 请求的 credentials，如 omit、same-origin 或者 include。为了在当前域名内自动发送 cookie ， 必须提供这个选项， 从 Chrome 50 开始， 这个属性也可以接受 FederatedCredential 实例或是一个 PasswordCredential 实例。</li><li>cache:  请求的 cache 模式: default 、 no-store 、 reload 、 no-cache 、 force-cache 或者 only-if-cached 。</li><li>redirect: 可用的 redirect 模式: follow (自动重定向), error (如果产生重定向将自动终止并且抛出一个错误), 或者 manual (手动处理重定向). 在Chrome中，Chrome 47之前的默认值是 follow，从 Chrome 47开始是 manual。</li><li>referrer: 一个 USVString 可以是 no-referrer、client或一个 URL。默认是 client。</li><li>referrerPolicy: 指定了HTTP头部referer字段的值。可能为以下值之一： no-referrer、 no-referrer-when-downgrade、 origin、 origin-when-cross-origin、 unsafe-url 。</li><li>integrity: 包括请求的  subresource integrity 值</li><li>signal: 用于取消请求</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFetch</span>(<span class="params"> obj </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.url = obj.url || <span class="string">""</span></span><br><span class="line">    <span class="keyword">this</span>.type = obj.type || <span class="string">"GET"</span></span><br><span class="line">    <span class="keyword">this</span>.data = obj.data ||&#123;&#125;</span><br><span class="line">    <span class="keyword">this</span>.success = obj.success || <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.error = obj.error || <span class="literal">null</span></span><br><span class="line">    <span class="comment">// 用于取消 fetch 请求</span></span><br><span class="line">    <span class="keyword">this</span>.controller = <span class="keyword">new</span> AbortController()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myFetch.prototype.send = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 将数据取出来 以 key=value 的形式保存到数组中，方便后续操作</span></span><br><span class="line">    <span class="keyword">let</span> dataArr = []</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">let</span> key <span class="keyword">in</span> <span class="keyword">this</span>.data )&#123;</span><br><span class="line">        dataArr.push( key + <span class="string">"="</span> + <span class="keyword">this</span>.data[key] )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">this</span>.type === <span class="string">"GET"</span> || <span class="keyword">this</span>.type === <span class="string">"get"</span> )&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = <span class="keyword">this</span>.url + <span class="string">"?"</span> + dataArr.join(<span class="string">"&amp;"</span>)</span><br><span class="line">        <span class="comment">// 删除尾部的 ?，当 data 为空的时候会多出来 ?</span></span><br><span class="line">        fetch( <span class="keyword">this</span>.url.replace(<span class="regexp">/\?$/g</span>, <span class="string">""</span>), &#123;</span><br><span class="line">            mode: <span class="string">"cors"</span>,</span><br><span class="line">            method: <span class="string">"GET"</span>,</span><br><span class="line">            signal: <span class="keyword">this</span>.controller.signal</span><br><span class="line">        &#125;).then( <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> res.json()</span><br><span class="line">        &#125;).then( <span class="function"><span class="params">resObj</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.success( resObj )</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">this</span>.type === <span class="string">"POST"</span> || <span class="keyword">this</span>.type === <span class="string">"post"</span> )&#123;</span><br><span class="line">        fetch( <span class="keyword">this</span>.url, &#123;</span><br><span class="line">            mode: <span class="string">"cors"</span>,</span><br><span class="line">            headers: &#123;</span><br><span class="line">                <span class="string">"Content-Type"</span> : <span class="string">"application/x-www-form-urlencoded"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            body: dataArr.join(<span class="string">"&amp;"</span>),</span><br><span class="line">            method: <span class="string">"POST"</span>,</span><br><span class="line">            signal: <span class="keyword">this</span>.controller.signal</span><br><span class="line">        &#125;).then( <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log( <span class="string">"新鲜的数据："</span> ,res )</span><br><span class="line">            <span class="keyword">return</span> res.json()</span><br><span class="line">        &#125;).then( <span class="function"><span class="params">resObj</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.success( resObj )</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myFetch.prototype.abort = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"取消请求--"</span> )</span><br><span class="line">    <span class="keyword">this</span>.controller.abort()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h1><p>XMLHttp<br>使用原生 XMLHttpRequest 创建 ajax 的步骤分 5 步，一定要记住，</p><ol><li>使用 new XMLHttpRequest() 创建 xhr 实例</li><li>调用 open 方法初始化请求信息</li><li>设置 请求头</li><li>设置请求响应函数</li><li>调用 send 方法发送请求</li></ol><h1 id="4-关于发送文件和图片"><a href="#4-关于发送文件和图片" class="headerlink" title="4. 关于发送文件和图片"></a>4. 关于发送文件和图片</h1><p>发送文件和图片，需要搭配 <code>FormData</code></p><p>直接将 FormData 作为参数发送即可。</p><p><strong>案例:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取文件放入 FormData</span></span><br><span class="line"><span class="keyword">var</span> formdata = <span class="keyword">new</span> FormData()</span><br><span class="line"><span class="keyword">var</span> elFile = <span class="built_in">document</span>.getElementById( <span class="string">"myfile"</span> )</span><br><span class="line">elFile.addEventListener( <span class="string">"change"</span>, () =&gt; &#123;</span><br><span class="line">    formdata.append( <span class="string">"file"</span>, elFile.files[<span class="number">0</span>] )</span><br><span class="line">    <span class="comment">// 调用发送文件</span></span><br><span class="line">    sendFile()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 创建 xhr</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open( <span class="string">"post"</span>, <span class="string">"http://***/uploadImage"</span> )</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( xhr.status === <span class="number">200</span> &amp;&amp; xhr.readyState === <span class="number">4</span> )&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"请求成功----"</span> )</span><br><span class="line">    <span class="built_in">console</span>.log( xhr.response )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendFile</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    xhr.send( formdata )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-参考材料"><a href="#5-参考材料" class="headerlink" title="5. 参考材料"></a>5. 参考材料</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener">MDN–XMLHttpRequest</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WindowOrWorkerGlobalScope/fetch" target="_blank" rel="noopener">MDN-fetch 文档</a></p><p><a href="https://blog.csdn.net/hlinghling/article/details/52624757" target="_blank" rel="noopener">创建ajax过程</a></p><p><a href="https://blog.csdn.net/sinat_35767703/article/details/67633058" target="_blank" rel="noopener">AJAX实现步骤,XMLHttpRequest对象的方法</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单的封装一个 ajax：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自动处理参数&lt;/li&gt;
&lt;li&gt;支持 get 和 post&lt;/li&gt;
&lt;li&gt;支持取消操作&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://blog.curtaintan.club/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js基础" scheme="http://blog.curtaintan.club/tags/js%E5%9F%BA%E7%A1%80/"/>
    
      <category term="ajax" scheme="http://blog.curtaintan.club/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>页面布局之居中</title>
    <link href="http://blog.curtaintan.club/2020/02/18/%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80%E4%B9%8B%E5%B1%85%E4%B8%AD/"/>
    <id>http://blog.curtaintan.club/2020/02/18/%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80%E4%B9%8B%E5%B1%85%E4%B8%AD/</id>
    <published>2020-02-18T06:42:19.000Z</published>
    <updated>2020-02-18T16:57:50.954Z</updated>
    
    <content type="html"><![CDATA[<p>水平居中 + 垂直居中 + 水平垂直居中</p><a id="more"></a><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>下文的所有 css 都是基于如下 html 结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"son"</span>&gt;</span>son<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>go–go–go—-</strong></p><h1 id="1-水平居中"><a href="#1-水平居中" class="headerlink" title="1. 水平居中"></a>1. 水平居中</h1><h2 id="1-1-使用-margin-0-auto"><a href="#1-1-使用-margin-0-auto" class="headerlink" title="1.1 使用 margin: 0 auto"></a>1.1 使用 margin: 0 auto</h2><p><strong>形成原理：</strong></p><ol><li>元素为块级元素</li><li>元素需要设置宽度</li><li>margin: 0 auto</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">38px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><fancybox><img src="https://image.gslb.dawnlab.me/0731902bacfad07794514d226c60bc97.png" alt=""></fancybox></p><h2 id="1-2-使用-text-align-center"><a href="#1-2-使用-text-align-center" class="headerlink" title="1.2 使用 text-align:center"></a>1.2 使用 text-align:center</h2><p><strong>形成原理：</strong></p><ol><li>子元素为行内元素（可以使用 display: inline-block 实现转换）</li><li>父元素设置 text-align:center</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">38px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-使用-flex-布局"><a href="#1-3-使用-flex-布局" class="headerlink" title="1.3 使用 flex 布局"></a>1.3 使用 flex 布局</h2><p><strong>形成原理：</strong></p><ol><li>父元素使用 flex 布局</li><li>父元素设置 justify-content: center</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">38px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-使用-absolute-transform"><a href="#1-4-使用-absolute-transform" class="headerlink" title="1.4 使用 absolute + transform"></a>1.4 使用 absolute + transform</h2><p><strong>形成原理：</strong></p><ol><li>子元素绝对定位 position: absolute;</li><li>以父元素宽度为基准向右偏移 50%，设置 left: 50%;</li><li>基于自己的宽度向左偏移 50%，设置：transform: translate( -50%, 0 );</li></ol><p><strong>存在问题：</strong></p><p>因为使用了绝对定位，元素脱离文档流，父元素捕获不到子元素高度导致父元素高度塌陷…</p><p>如果子元素是动态高度，则只能通过 js 获取子元素高度，再设置父元素高度.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">38px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>( -50%, 0 );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/48ff91bfc7d24ef9bb18b6a4ae5c17be.png" alt=""></fancybox></p><h2 id="1-5-使用-absolute-负margin"><a href="#1-5-使用-absolute-负margin" class="headerlink" title="1.5 使用 absolute + 负margin"></a>1.5 使用 absolute + 负margin</h2><p><strong>形成原理：</strong></p><ol><li>子元素绝对定位 position: absolute;</li><li>以父元素宽度为基准向右偏移 50%，设置 left: 50%;</li><li>需要设置固定宽度</li><li>使用负 margin ，基于自己的宽度向左偏移 50% 宽度，margin-left: -0.5 * width;</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">38px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">81px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">150px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-6-使用-absolute-width-margin"><a href="#1-6-使用-absolute-width-margin" class="headerlink" title="1.6 使用 absolute + width + margin"></a>1.6 使用 absolute + width + margin</h2><p><strong>形成原理：</strong></p><ol><li>子元素绝对定位 position: absolute;</li><li>设置子元素宽度</li><li>设置左右偏移为 0，left:0; right:0;</li><li>设置 margin 上下为 0，左右自适应占满整行. margin: 0 auto;</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">38px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">81px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-7-水平居中总结"><a href="#1-7-水平居中总结" class="headerlink" title="1.7 水平居中总结"></a>1.7 水平居中总结</h2><p>总共使用了 6 总方法，还有一种没有使用，就是使用 grid 实现，</p><p>三种使用绝对定位，但是绝对定位会导致父元素高度塌陷，需谨慎使用（其实也不算了…哈哈哈）</p><p>最推荐 flex 实现，兼容性优良，实现简单可靠.</p><h1 id="2-垂直居中"><a href="#2-垂直居中" class="headerlink" title="2. 垂直居中"></a>2. 垂直居中</h1><h2 id="2-1-行内元素的实现"><a href="#2-1-行内元素的实现" class="headerlink" title="2.1 行内元素的实现"></a>2.1 行内元素的实现</h2><p>行内元素 –&gt; 使用 line-height: height 实现</p><p><strong>实现原理：</strong></p><ol><li>父元素固定高度，并设置行高为高度值：line-height: height</li><li>子元素必须是行内元素（可以使用 display: inline-block 实现转换）</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">800px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">800px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-使用-flex-布局"><a href="#2-2-使用-flex-布局" class="headerlink" title="2.2 使用 flex 布局"></a>2.2 使用 flex 布局</h2><p><strong>实现原理：</strong></p><ol><li>父元素使用 flex 布局</li><li>父元素设置 align-items: center;</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-使用-position：absolute"><a href="#2-3-使用-position：absolute" class="headerlink" title="2.3 使用 position：absolute"></a>2.3 使用 position：absolute</h2><p>三种方式，</p><ol><li>absolute + transform</li><li>absolute + -margin</li><li>absolute + margin: auto 0</li></ol><h2 id="2-4-总结"><a href="#2-4-总结" class="headerlink" title="2.4 总结"></a>2.4 总结</h2><p>垂直居中还有表格、grid 和 vertical-align 可以实现。</p><p>推荐使用 flex 布局实现，简单易理解.</p><h1 id="3-水平垂直居中"><a href="#3-水平垂直居中" class="headerlink" title="3. 水平垂直居中"></a>3. 水平垂直居中</h1><h2 id="3-1-使用-absolute-margin"><a href="#3-1-使用-absolute-margin" class="headerlink" title="3.1 使用 absolute + margin"></a>3.1 使用 absolute + margin</h2><p><strong>实现原理：</strong></p><ol><li>父元素使用定位（除了 static 定位都行）</li><li>子元素使用绝对定位</li><li>上下左右偏移为 0</li><li>设置 margin: auto 占满整个父元素，居中</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-使用-absolute-transform"><a href="#3-2-使用-absolute-transform" class="headerlink" title="3.2 使用 absolute + transform"></a>3.2 使用 absolute + transform</h2><ol><li>父元素使用定位（除了 static 定位都行）</li><li>子元素使用绝对定位</li><li>上左各偏移基于父元素的 50%</li><li>使用 transform 再拉回多的偏移 transform: translate( -50%, -50% );</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    padding: <span class="number">0</span>;</span><br><span class="line">    margin: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">.parent&#123;</span><br><span class="line">    background-color: #ccc;</span><br><span class="line">    padding: <span class="number">20</span>px;</span><br><span class="line">    height: <span class="number">600</span>px;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.son&#123;</span><br><span class="line">    font-size: <span class="number">50</span>px;</span><br><span class="line">    line-height: <span class="number">100</span>px;</span><br><span class="line">    color: #ccc;</span><br><span class="line">    background-color: aquamarine;</span><br><span class="line">    text-align: center;</span><br><span class="line">    width: <span class="number">300</span>px;</span><br><span class="line">    height: <span class="number">100</span>px;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: <span class="number">50</span>%;</span><br><span class="line">    left: <span class="number">50</span>%;</span><br><span class="line">    transform: translate( <span class="number">-50</span>%, <span class="number">-50</span>% );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-使用-absolute-margin"><a href="#3-2-使用-absolute-margin" class="headerlink" title="3.2 使用 absolute + -margin"></a>3.2 使用 absolute + -margin</h2><p>原理同上，需要知道子元素的高度，</p><p>负 margin 的值等于高度的一半</p><h2 id="3-3-使用-flex-布局"><a href="#3-3-使用-flex-布局" class="headerlink" title="3.3 使用 flex 布局"></a>3.3 使用 flex 布局</h2><p><strong>实现原理：</strong></p><ol><li>父元素使用 flex 布局</li><li>设置属性水平居中：justify-content: center;</li><li>设置属性垂直居中：align-items: center;</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(117, 117, 117);</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h1><p>个人最喜欢 flex 布局.推荐多使用 flex 布局.</p><p>加油！！</p><h1 id="5-参考材料"><a href="#5-参考材料" class="headerlink" title="5. 参考材料"></a>5. 参考材料</h1><p><a href="https://juejin.im/post/58f818bbb123db006233ab2a" target="_blank" rel="noopener">16种方法实现水平居中垂直居中</a></p><p><a href="https://blog.csdn.net/linayangoo/article/details/88528774" target="_blank" rel="noopener">CSS实现文本，DIV垂直居中</a></p><p><a href="https://juejin.im/post/58e3a5a0a0bb9f0069fc16bb" target="_blank" rel="noopener">一劳永逸的搞定 flex 布局</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;水平居中 + 垂直居中 + 水平垂直居中&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://blog.curtaintan.club/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://blog.curtaintan.club/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>页面布局之三栏布局</title>
    <link href="http://blog.curtaintan.club/2020/02/18/%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80%E4%B9%8B%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80/"/>
    <id>http://blog.curtaintan.club/2020/02/18/%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80%E4%B9%8B%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80/</id>
    <published>2020-02-18T02:38:43.000Z</published>
    <updated>2020-02-18T06:37:18.484Z</updated>
    
    <content type="html"><![CDATA[<p><fancybox><img src="https://image.gslb.dawnlab.me/43c66317465dc346967bc541fc0ca7e8.png" alt=""></fancybox></p><p>实现三栏布局….</p><a id="more"></a><h1 id="三栏布局的定义"><a href="#三栏布局的定义" class="headerlink" title="三栏布局的定义"></a>三栏布局的定义</h1><p>三栏布局，顾名思义就是两边固定，中间自适应。</p><p>开写…..</p><h1 id="1-使用-BFC"><a href="#1-使用-BFC" class="headerlink" title="1. 使用 BFC"></a>1. 使用 BFC</h1><p>实现原理：BFC 元素不会与浮动元素重叠。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">            font-size: 30px;</span><br><span class="line">            color: rgb(224, 224, 224);</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 185px;</span><br><span class="line">        &#125;</span><br><span class="line">        h1&#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 80px;</span><br><span class="line">            color: rgb(38, 52, 99);</span><br><span class="line">            font-size: 28px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>, <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">            width: 180px;</span><br><span class="line">            height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">            background-color: rgb(104, 104, 104);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">            float: right;</span><br><span class="line">            background-color: rgb(133, 133, 133);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span>&#123;</span></span><br><span class="line">            overflow: hidden;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: rgb(112, 112, 112);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>三栏布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 先浮动，再创建 BFC --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-使用-float-margin-实现"><a href="#2-使用-float-margin-实现" class="headerlink" title="2. 使用 float + margin 实现"></a>2. 使用 float + margin 实现</h1><p>实现原理：使用 margin 替代浮动元素占据的位置。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">            font-size: 30px;</span><br><span class="line">            color: rgb(224, 224, 224);</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 185px;</span><br><span class="line">        &#125;</span><br><span class="line">        h1&#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 80px;</span><br><span class="line">            color: rgb(38, 52, 99);</span><br><span class="line">            font-size: 28px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>, <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">            width: 180px;</span><br><span class="line">            height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">            background-color: rgb(104, 104, 104);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">            float: right;</span><br><span class="line">            background-color: rgb(133, 133, 133);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 修改此行代码即可 */</span></span></span><br><span class="line">            margin: 0px 190px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: rgb(112, 112, 112);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>三栏布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3-flex-实现"><a href="#3-flex-实现" class="headerlink" title="3. flex 实现"></a>3. flex 实现</h1><p>实现原理：父元素使用 flex ，子元素定义 flex: 1 或 flex: auto 会自动填充宽度。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">            font-size: 30px;</span><br><span class="line">            color: rgb(224, 224, 224);</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 185px;</span><br><span class="line">        &#125;</span><br><span class="line">        h1&#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 80px;</span><br><span class="line">            color: rgb(38, 52, 99);</span><br><span class="line">            font-size: 28px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>, <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">            width: 180px;</span><br><span class="line">            height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">            background-color: rgb(104, 104, 104);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">            background-color: rgb(133, 133, 133);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span>&#123;</span></span><br><span class="line">            flex: 1;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: rgb(112, 112, 112);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.warp</span> &#123;</span></span><br><span class="line">            display: flex;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>三栏布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="4-使用-absolute-margin-实现"><a href="#4-使用-absolute-margin-实现" class="headerlink" title="4. 使用 absolute + margin 实现"></a>4. 使用 absolute + margin 实现</h1><p>实现原理：同 float + margin 一样。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">            font-size: 30px;</span><br><span class="line">            color: rgb(224, 224, 224);</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 185px;</span><br><span class="line">        &#125;</span><br><span class="line">        h1&#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 80px;</span><br><span class="line">            color: rgb(38, 52, 99);</span><br><span class="line">            font-size: 28px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>, <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">            width: 180px;</span><br><span class="line">            height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">            background-color: rgb(104, 104, 104);</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 0;</span><br><span class="line">            left: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">            background-color: rgb(133, 133, 133);</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 0;</span><br><span class="line">            right: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span>&#123;</span></span><br><span class="line">            height: 200px;</span><br><span class="line">            margin: 0px 200px;</span><br><span class="line">            background-color: rgb(112, 112, 112);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.warp</span> &#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>三栏布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="5-使用-Table-布局实现"><a href="#5-使用-Table-布局实现" class="headerlink" title="5. 使用 Table 布局实现"></a>5. 使用 Table 布局实现</h1><p>实现原理：父元素展示为 table，子元素展示为 table-cell</p><p><strong>注意：</strong>父元素宽度设置为 100% </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">            font-size: 30px;</span><br><span class="line">            color: rgb(224, 224, 224);</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 185px;</span><br><span class="line">        &#125;</span><br><span class="line">        h1&#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 80px;</span><br><span class="line">            color: rgb(38, 52, 99);</span><br><span class="line">            font-size: 28px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>, <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">            width: 180px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            display: table-cell;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">            background-color: rgb(104, 104, 104);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">            background-color: rgb(133, 133, 133);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span>&#123;</span></span><br><span class="line">            display: table-cell;</span><br><span class="line">            background-color: rgb(112, 112, 112);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.warp</span> &#123;</span></span><br><span class="line">            display: table;</span><br><span class="line">            width: 100%;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>三栏布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="6-使用-inner-block-calc-实现"><a href="#6-使用-inner-block-calc-实现" class="headerlink" title="6. 使用 inner-block + calc 实现"></a>6. 使用 inner-block + calc 实现</h1><p>实现原理：当展示为 inner-block 时需要指定宽度，此时就使用 calc 计算宽度</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">            font-size: 30px;</span><br><span class="line">            color: rgb(224, 224, 224);</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 185px;</span><br><span class="line">        &#125;</span><br><span class="line">        h1&#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 80px;</span><br><span class="line">            color: rgb(38, 52, 99);</span><br><span class="line">            font-size: 28px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>, <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">            width: 180px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            display: inline-block;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">            background-color: rgb(104, 104, 104);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">            background-color: rgb(133, 133, 133);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span>&#123;</span></span><br><span class="line">            background-color: rgb(112, 112, 112);</span><br><span class="line">            width: calc( 100% - 400px );</span><br><span class="line">            height: 200px;</span><br><span class="line">            display: inline-block;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>三栏布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="7-使用-grid-布局"><a href="#7-使用-grid-布局" class="headerlink" title="7. 使用 grid 布局"></a>7. 使用 grid 布局</h1><p>实现原理：grid 可以使用 1fr 划分等分和自适应</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">            font-size: 30px;</span><br><span class="line">            color: rgb(224, 224, 224);</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 185px;</span><br><span class="line">        &#125;</span><br><span class="line">        h1&#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 80px;</span><br><span class="line">            color: rgb(38, 52, 99);</span><br><span class="line">            font-size: 28px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>, <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">            height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">            background-color: rgb(104, 104, 104);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">            background-color: rgb(133, 133, 133);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span>&#123;</span></span><br><span class="line">            background-color: rgb(112, 112, 112);</span><br><span class="line">            height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.warp</span> &#123;</span></span><br><span class="line">            display: grid;</span><br><span class="line">            grid-template-columns: 200px 1fr 200px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>三栏布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="8-圣杯布局（难使）"><a href="#8-圣杯布局（难使）" class="headerlink" title="8. 圣杯布局（难使）"></a>8. 圣杯布局（难使）</h1><p>实现原理：使用负 margin 使浮动元素重新定位，结合 position 定位元素….</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">            font-size: 30px;</span><br><span class="line">            color: rgb(224, 224, 224);</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 185px;</span><br><span class="line">        &#125;</span><br><span class="line">        h1&#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 80px;</span><br><span class="line">            color: rgb(38, 52, 99);</span><br><span class="line">            font-size: 28px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>, <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">            height: 200px;</span><br><span class="line">            width: 180px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">            background-color: rgb(122, 122, 122);</span><br><span class="line">            float: left;</span><br><span class="line">            position: relative;</span><br><span class="line">            margin-left: -100%;</span><br><span class="line">            left: -200px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">            background-color: rgb(133, 133, 133);</span><br><span class="line">            position: relative;</span><br><span class="line">            float: left;</span><br><span class="line">            margin-left: -200px;</span><br><span class="line">            right: -220px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span>&#123;</span></span><br><span class="line">            background-color: rgb(112, 112, 112);</span><br><span class="line">            height: 200px;</span><br><span class="line">            width: 100%;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.warp</span> &#123;</span></span><br><span class="line">            margin: 0px 200px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>三栏布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>最后还有一个双飞翼布局实现，但是代码布局写起来不直观，且 css 搭配复杂，不推荐……</p><p>需要知道 margin 为负值时的结果..</p><p>总的来说，还是不难的….</p><h1 id="参考材料"><a href="#参考材料" class="headerlink" title="参考材料"></a>参考材料</h1><p><a href="https://juejin.im/post/5daebfc2518825502a44602a#heading-0" target="_blank" rel="noopener">面试官：请实现三栏布局，尽可能多的方式</a></p><p><a href="https://zhuanlan.zhihu.com/p/25070186?refer=learncoding" target="_blank" rel="noopener">详解 CSS 七种三栏布局技巧</a></p><p><a href="https://blog.csdn.net/twoto3_/article/details/52250602" target="_blank" rel="noopener">margin为负值产生的影响和常见布局应用</a></p><p><a href="https://www.cnblogs.com/Anita-meng/p/7803464.html" target="_blank" rel="noopener">margin负值的作用</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;fancybox&gt;&lt;img src=&quot;https://image.gslb.dawnlab.me/43c66317465dc346967bc541fc0ca7e8.png&quot; alt=&quot;&quot;&gt;&lt;/fancybox&gt;&lt;/p&gt;
&lt;p&gt;实现三栏布局….&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://blog.curtaintan.club/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://blog.curtaintan.club/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>css之BFC</title>
    <link href="http://blog.curtaintan.club/2020/02/17/css%E4%B9%8BBFC/"/>
    <id>http://blog.curtaintan.club/2020/02/17/css%E4%B9%8BBFC/</id>
    <published>2020-02-17T07:10:19.000Z</published>
    <updated>2020-02-17T13:30:03.739Z</updated>
    
    <content type="html"><![CDATA[<p><fancybox><img src="https://image.gslb.dawnlab.me/d51bb30b65a731d78f2344ca8bb237a7.png" alt=""></fancybox></p><p>从 BFC 解决的问题看待 BFC…..</p><a id="more"></a><h1 id="1-BFC是什么？"><a href="#1-BFC是什么？" class="headerlink" title="1. BFC是什么？"></a>1. BFC是什么？</h1><p>查阅了一些资料，觉得这个解释很合理：</p><p><code>Block fomatting context</code> = <code>block-level box</code> + <code>Formatting Context</code></p><p><strong>BFC 定义</strong></p><p>BFC(Block formatting context)直译为”块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。 </p><h1 id="2-BFC的作用"><a href="#2-BFC的作用" class="headerlink" title="2. BFC的作用"></a>2. BFC的作用</h1><ol><li>解决 margin 重叠问题（父子重叠、兄弟重叠）</li><li>和浮动元素产生边界</li><li>解决浮动元素的父元素高度塌陷</li></ol><p>总的来说，就是 BFC 布局规则的作用….</p><h1 id="3-BFC布局规则："><a href="#3-BFC布局规则：" class="headerlink" title="3. BFC布局规则："></a>3. BFC布局规则：</h1><ol><li>内部的 Box 会在垂直方向，一个接一个地放置。</li><li>Box垂直方向的距离由 margin 决定。属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠</li><li>每个元素的 margin box 的左边， 与包含块 border box 的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。（这说明BFC中子元素不会超出他的包含块，而 position 为 absolute 的元素可以超出他的包含块边界）</li><li>BFC的区域不会与 float box 重叠。</li><li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li><li>计算 BFC 的高度时，浮动元素也参与计算</li></ol><h1 id="4-哪些元素会生成BFC"><a href="#4-哪些元素会生成BFC" class="headerlink" title="4. 哪些元素会生成BFC?"></a>4. 哪些元素会生成BFC?</h1><ol><li>根元素</li><li>float属性不为none</li><li>position为absolute或fixed</li><li>display为inline-block, table-cell, table-caption, flex, inline-flex</li><li>overflow不为visible</li></ol><h1 id="5-BFC-的使用场景对应布局规则"><a href="#5-BFC-的使用场景对应布局规则" class="headerlink" title="5. BFC 的使用场景对应布局规则"></a>5. BFC 的使用场景对应布局规则</h1><h2 id="5-1-清除-margin-重叠"><a href="#5-1-清除-margin-重叠" class="headerlink" title="5.1 清除 margin 重叠"></a>5.1 清除 margin 重叠</h2><p>由布局规则第二条：</p><blockquote><p>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠</p></blockquote><p><strong>margin 重叠示例</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line">        padding: 0;</span><br><span class="line">        margin: 0;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span>, <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line">        font-size: 30px;</span><br><span class="line">        text-align: center;</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        padding: 20px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        width: 300px;</span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 10<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        background-color: aquamarine;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line">        margin: 50px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line">        margin: 20px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span>box1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span>box2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>运行效果</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/e2d29a13723fd265c05b02759f8fae00.png" alt=""></fancybox></p><p><strong>形成 BFC 解决重叠</strong></p><p>在 box2 外包一个 wrap 元素，并形成 BFC。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line">        padding: 0;</span><br><span class="line">        margin: 0;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span>, <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line">        font-size: 30px;</span><br><span class="line">        text-align: center;</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        padding: 20px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        width: 300px;</span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 10<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        background-color: aquamarine;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line">        margin: 50px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line">        margin: 20px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.warp</span> &#123;</span></span><br><span class="line">        overflow: hidden;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span>box1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span>box2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/c217069127bca09162acdd90b0a81a25.png" alt=""></fancybox></p><h2 id="5-2-和浮动元素产生边界"><a href="#5-2-和浮动元素产生边界" class="headerlink" title="5.2 和浮动元素产生边界"></a>5.2 和浮动元素产生边界</h2><p>由布局规则第四条：</p><blockquote><p>BFC的区域不会与float box重叠。</p></blockquote><p><strong>情况示例</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line">        padding: 0;</span><br><span class="line">        margin: 0;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.warp</span> &#123;</span></span><br><span class="line">        background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.float</span>&#123;</span></span><br><span class="line">        float: left;</span><br><span class="line">        width: 40px;</span><br><span class="line">        height: 40px;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-box"</span>&gt;</span></span><br><span class="line">        我是一些文字，我有很多的文字-------------------------------</span><br><span class="line">        我是一些文字，我有很多的文字-------------------------------</span><br><span class="line">        我是一些文字，我有很多的文字-------------------------------</span><br><span class="line">        我是一些文字，我有很多的文字-------------------------------</span><br><span class="line">        ---------------------------------------------------------</span><br><span class="line">        -----------</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/c30f6d04059be6f2b2692e21976922d8.png" alt=""></fancybox></p><p><strong>形成 BFC 和浮动元素产生边界</strong></p><p>让 text-box 形成 BFC，使他浮动元素产生边界。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    * &#123;</span><br><span class="line">        padding: <span class="number">0</span>;</span><br><span class="line">        margin: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    .warp &#123;</span><br><span class="line">        background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line">    .float&#123;</span><br><span class="line">        float: left;</span><br><span class="line">        width: <span class="number">40</span>px;</span><br><span class="line">        height: <span class="number">40</span>px;</span><br><span class="line">        background-color: #ccc;</span><br><span class="line">    &#125;</span><br><span class="line">    .text-box&#123;</span><br><span class="line">        overflow: auto;</span><br><span class="line">        background-color: paleturquoise;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;div class="warp"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="float"&gt;&lt;/</span>div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"text-box"</span>&gt;</span><br><span class="line">        我是一些文字，我有很多的文字-------------------------------</span><br><span class="line">        我是一些文字，我有很多的文字-------------------------------</span><br><span class="line">        我是一些文字，我有很多的文字-------------------------------</span><br><span class="line">        我是一些文字，我有很多的文字-------------------------------</span><br><span class="line">        ---------------------------------------------------------</span><br><span class="line">        -----------</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/a533764b0fa4c1f11e2cc04c9f11900b.png" alt=""></fancybox></p><h2 id="5-3-解决浮动元素的父元素高度塌陷"><a href="#5-3-解决浮动元素的父元素高度塌陷" class="headerlink" title="5.3 解决浮动元素的父元素高度塌陷"></a>5.3 解决浮动元素的父元素高度塌陷</h2><p>由布局规则第六条：</p><blockquote><p>计算 BFC 的高度时，浮动元素也参与计算</p></blockquote><p><strong>高度塌陷的情况：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line">        padding: 0;</span><br><span class="line">        margin: 0;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.warp</span> &#123;</span></span><br><span class="line">        background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.float</span>&#123;</span></span><br><span class="line">        float: left;</span><br><span class="line">        width: 40px;</span><br><span class="line">        height: 40px;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/cff0f5d101678dfa39b05da53e814c2e.png" alt=""></fancybox></p><p><strong>父元素形成 BFC 解决高度塌陷</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line">        padding: 0;</span><br><span class="line">        margin: 0;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.warp</span> &#123;</span></span><br><span class="line">        background-color: red;</span><br><span class="line">        overflow: auto;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.float</span>&#123;</span></span><br><span class="line">        float: left;</span><br><span class="line">        width: 40px;</span><br><span class="line">        height: 40px;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/7cf82919a6374ee38b10edb6dde709b3.png" alt=""></fancybox></p><h1 id="6-参考材料"><a href="#6-参考材料" class="headerlink" title="6. 参考材料"></a>6. 参考材料</h1><p><a href="https://www.html.cn/qa/css3/13757.html" target="_blank" rel="noopener">CSS什么是BFC？</a></p><p><a href="https://github.com/zuopf769/notebook/blob/master/fe/BFC%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/README.md" target="_blank" rel="noopener">史上最全面、最透彻的BFC原理剖析</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context" target="_blank" rel="noopener">MDN-块格式化上下文</a></p><h1 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h1><figure class="highlight html"><figcaption><span>父元素形成 BFC 解决高度塌陷</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.warp</span> &#123;</span></span><br><span class="line">            background-color: red;</span><br><span class="line">            overflow: auto;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.float</span>&#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">            width: 40px;</span><br><span class="line">            height: 40px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;fancybox&gt;&lt;img src=&quot;https://image.gslb.dawnlab.me/d51bb30b65a731d78f2344ca8bb237a7.png&quot; alt=&quot;&quot;&gt;&lt;/fancybox&gt;&lt;/p&gt;
&lt;p&gt;从 BFC 解决的问题看待 BFC…..&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://blog.curtaintan.club/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://blog.curtaintan.club/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>css之盒模型</title>
    <link href="http://blog.curtaintan.club/2020/02/17/css%E4%B9%8B%E7%9B%92%E6%A8%A1%E5%9E%8B/"/>
    <id>http://blog.curtaintan.club/2020/02/17/css%E4%B9%8B%E7%9B%92%E6%A8%A1%E5%9E%8B/</id>
    <published>2020-02-17T05:16:27.000Z</published>
    <updated>2020-02-17T12:10:23.765Z</updated>
    
    <content type="html"><![CDATA[<p><fancybox><img src="https://image.gslb.dawnlab.me/fc2a80e8075489dd5f57b4c6262a8113.png" alt=""></fancybox></p><p>盒子模型…</p><a id="more"></a><h1 id="1-简单盒模型"><a href="#1-简单盒模型" class="headerlink" title="1. 简单盒模型"></a>1. 简单盒模型</h1><p>我在查资料的时候，看到一篇文章很好的说明了两种模型的关系：</p><blockquote><p>通常情况下，被更多人认知的盒模型就是简单盒模型，简单盒模型在早期IE时期有一种怪异模式下的解析方式，也就是现在的border-box，后来W3C制定的标准以后规定在标准解析模式下使用标准盒模型(content-box)。</p><footer><strong>你真的了解盒模型吗？</strong><cite><a href="https://rainey.space/2016/07/02/Ni_Zhen_De_Liao_Jie_He_Mo_Xing_Ma/" target="_blank" rel="noopener">rainey.space/2016/07/02/Ni_Zhen_De_Liao_Jie_He_Mo_Xing_Ma</a></cite></footer></blockquote><p>文中有这样一个段子：</p><blockquote><p>IE：我觉得盒模型应该是这样的，blahblah。<br>W3C：明显应该是这样的才对，blahblah。<br>结果是 IE 在怪异模式下用了「不标准」的盒模型，标准模式下用了「标准」的盒模型。<br>围观群众：听说 IE 的盒模型不标准。<br>……多年过去……<br>W3C：感觉还是 IE 的那个模型比较好。但我们已经回不去了……算了加个属性支持一下 IE 那种模式吧。<br><code>box-sizing</code> 这货就是用来擦屁股的，我从来没见过有人用 <code>padding-box</code> 的……<br>作者：顾轶灵<br>链接：<a href="https://www.zhihu.com/question/25509268/answer/30949718" target="_blank" rel="noopener">https://www.zhihu.com/question/25509268/answer/30949718</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><h1 id="2-测试代码"><a href="#2-测试代码" class="headerlink" title="2. 测试代码"></a>2. 测试代码</h1><p><fancybox><img src="https://image.gslb.dawnlab.me/55a3a646889a1ae518708c376cc60805.png" alt=""></fancybox></p><p>代码放在文末</p><p><strong>运行结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/415425ebeafaf5ae1cf5a73ec42a31ee.png" alt=""></fancybox></p><h1 id="3-box-sizing-content-box"><a href="#3-box-sizing-content-box" class="headerlink" title="3. box-sizing: content-box"></a>3. box-sizing: content-box</h1><p><fancybox><img src="https://image.gslb.dawnlab.me/4cac638ea37d79552dc885573710f8b1.png" alt=""></fancybox></p><h1 id="4-box-sizing-border-box"><a href="#4-box-sizing-border-box" class="headerlink" title="4. box-sizing: border-box"></a>4. box-sizing: border-box</h1><p><fancybox><img src="https://image.gslb.dawnlab.me/0b50d7702ec405a4f4ab30fd35323861.png" alt=""></fancybox></p><h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h1><p>在浏览器中，box-sizing 默认是 content-box</p><ol><li><p>content-box（标准盒模型）<br>width = 内容的宽度<br>height = 内容的高度</p></li><li><p>border-box（怪异盒模型）<br>width = border + padding + 内容的宽度<br>height = border + padding + 内容的高度</p></li></ol><h1 id="6-参考材料"><a href="#6-参考材料" class="headerlink" title="6. 参考材料"></a>6. 参考材料</h1><p><a href="https://rainey.space/2016/07/02/Ni_Zhen_De_Liao_Jie_He_Mo_Xing_Ma/" target="_blank" rel="noopener">你真的了解盒模型吗？</a></p><h1 id="7-测试代码"><a href="#7-测试代码" class="headerlink" title="7. 测试代码"></a>7. 测试代码</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.content-box</span>, <span class="selector-class">.border-box</span> &#123;</span></span><br><span class="line">            font-size: 30px;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">            display: flex;</span><br><span class="line">            align-items: center;</span><br><span class="line">            justify-content: center;</span><br><span class="line">            padding: 20px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            width: 300px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 10<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">            background-color: aquamarine;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.content-box</span> &#123;</span></span><br><span class="line">            margin: 80px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.border-box</span> &#123;</span></span><br><span class="line">            margin: 30px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content-box"</span>&gt;</span>margin: 80px<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-box"</span>&gt;</span>margin: 30px<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;fancybox&gt;&lt;img src=&quot;https://image.gslb.dawnlab.me/fc2a80e8075489dd5f57b4c6262a8113.png&quot; alt=&quot;&quot;&gt;&lt;/fancybox&gt;&lt;/p&gt;
&lt;p&gt;盒子模型…&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://blog.curtaintan.club/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://blog.curtaintan.club/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>算法之排序</title>
    <link href="http://blog.curtaintan.club/2020/02/15/%E7%AE%97%E6%B3%95%E4%B9%8B%E6%8E%92%E5%BA%8F/"/>
    <id>http://blog.curtaintan.club/2020/02/15/%E7%AE%97%E6%B3%95%E4%B9%8B%E6%8E%92%E5%BA%8F/</id>
    <published>2020-02-15T09:20:59.000Z</published>
    <updated>2020-02-17T04:34:31.763Z</updated>
    
    <content type="html"><![CDATA[<p>总结常用排序算法.</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学数据结构已经是大二上学期的事了，</p><p>写一下常用的排序算法。</p><h1 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1. 冒泡排序"></a>1. 冒泡排序</h1><p><fancybox><img src="https://image.gslb.dawnlab.me/1a58b4df14ae64a31288c7957ea43070.png" alt=""></fancybox></p><h2 id="1-1-编程思路"><a href="#1-1-编程思路" class="headerlink" title="1.1 编程思路"></a>1.1 编程思路</h2><p>使用两层循环，</p><ul><li>外层循环：执行 i 次，每一次排好一个元素。</li><li>内层循环：每执行一次，就挑选出数组中第 i 个位置的元素，并将该元素放到 i 位置。</li></ul><h2 id="1-2-编程要点"><a href="#1-2-编程要点" class="headerlink" title="1.2 编程要点"></a>1.2 编程要点</h2><p>在内层循环，相邻元素依次比较，把最大或最小元素放到最后。</p><h2 id="1-3-代码实现"><a href="#1-3-代码实现" class="headerlink" title="1.3 代码实现"></a>1.3 代码实现</h2><figure class="highlight js"><figcaption><span>冒泡排序</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [ <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">6</span> ]</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param &#123; array &#125; arr 数组</span></span><br><span class="line"><span class="comment"> * @param &#123; boolean &#125; asc 是否升序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bobble</span>(<span class="params"> arr, asc = true </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i ++ )&#123;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr.length; j ++ )&#123;</span><br><span class="line">            <span class="comment">// 升序</span></span><br><span class="line">            <span class="keyword">if</span>( asc )&#123;</span><br><span class="line">                <span class="keyword">if</span>( arr[j] &lt; arr[j + <span class="number">1</span>] )&#123;</span><br><span class="line">                    [ arr[j+<span class="number">1</span>], arr[j] ] = [ arr[j], arr[j+<span class="number">1</span>] ]</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">// 降序</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>( arr[j+<span class="number">1</span>] &lt; arr[j] )&#123;</span><br><span class="line">                    [ arr[j+<span class="number">1</span>], arr[j] ] = [ arr[j], arr[j+<span class="number">1</span>] ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">`外层循环第<span class="subst">$&#123; i &#125;</span>次执行的结果：`</span>,arr )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( bobble( arr, <span class="literal">true</span> ) )</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><fancybox><img src="https://image.gslb.dawnlab.me/a236cf5691694704cd23494516c97198.png" alt=""></fancybox></p><p>根据代码可知，代码有待优化。</p><h2 id="1-4-代码优化"><a href="#1-4-代码优化" class="headerlink" title="1. 4 代码优化"></a>1. 4 代码优化</h2><p>优化点：</p><ol><li>可知，外层循环每执行一次，就有一个元素在尾部排好序，则在内部循环中，可以减少后面 i 次不必要的比较。</li><li>当外层循环执行到最后一次时，只有一个元素，则可以不必再比较，则外层循环可以减 1 </li></ol><figure class="highlight js"><figcaption><span>冒泡排序优化</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bobble</span>(<span class="params"> arr, asc = true </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i ++ )&#123;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j ++ )&#123;</span><br><span class="line">            <span class="comment">// 升序</span></span><br><span class="line">            <span class="keyword">if</span>( asc )&#123;</span><br><span class="line">                <span class="keyword">if</span>( arr[j] &lt; arr[j + <span class="number">1</span>] )&#123;</span><br><span class="line">                    [ arr[j+<span class="number">1</span>], arr[j] ] = [ arr[j], arr[j+<span class="number">1</span>] ]</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">// 降序</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>( arr[j+<span class="number">1</span>] &lt; arr[j] )&#123;</span><br><span class="line">                    [ arr[j+<span class="number">1</span>], arr[j] ] = [ arr[j], arr[j+<span class="number">1</span>] ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">`外层循环第<span class="subst">$&#123; i &#125;</span>次执行的结果：`</span>,arr )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><fancybox><img src="https://image.gslb.dawnlab.me/4eb2f917381073e959cd342fcc5f4454.png" alt=""></fancybox></p><h1 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2. 选择排序"></a>2. 选择排序</h1><p><fancybox><img src="https://image.gslb.dawnlab.me/f37218b2ce6f2f518bb3e438b3082db1.png" alt=""></fancybox></p><h2 id="2-1-编程思路"><a href="#2-1-编程思路" class="headerlink" title="2.1 编程思路"></a>2.1 编程思路</h2><p>从未排序的部分选择最大或最小的值，将其排在有序序列的前或后。</p><ul><li>升序：选择未排序部分的最小值，与排序部分后第一个元素交换</li><li>降序：选择未排序部分的最大值，与排序部分后第一个元素交换</li></ul><p><strong>实现：</strong>使用两层循环</p><ol><li>外层循环：执行 i - 1 次，将内层循环挑选出的元素放到已排序部分的尾部。</li><li>内层循环：挑选出未排序部分最小值或最大值的下标。</li></ol><h2 id="2-2-编程要点"><a href="#2-2-编程要点" class="headerlink" title="2.2 编程要点"></a>2.2 编程要点</h2><ol><li>将数组用外层循环分为两段</li><li>每次外层循环时，使用一个 flagIndex 标记来标记内层循环挑选出来的元素的下标</li><li>外层循环将挑选出来的元素放到排好序的末尾</li></ol><h2 id="2-3-代码实现"><a href="#2-3-代码实现" class="headerlink" title="2.3  代码实现"></a>2.3  代码实现</h2><figure class="highlight js"><figcaption><span>选择排序</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [ <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">6</span> ]</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param &#123; array &#125; arr 数组</span></span><br><span class="line"><span class="comment"> * @param &#123; boolean &#125; asc 是否升序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectSort</span>(<span class="params"> arr, asc = true </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i ++ )&#123;</span><br><span class="line">        <span class="comment">// 记住未排序部分的最小值或最大值的下标</span></span><br><span class="line">        <span class="keyword">let</span> flagIndex = i</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">let</span> j = i; j &lt; arr.length; j ++ )&#123;</span><br><span class="line">            <span class="keyword">if</span>( asc )&#123;</span><br><span class="line">                <span class="keyword">if</span>( arr[flagIndex] &gt; arr[j] )&#123;</span><br><span class="line">                    flagIndex = j</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>( arr[flagIndex] &lt; arr[j] )&#123;</span><br><span class="line">                    flagIndex = j</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        [ arr[flagIndex], arr[i] ] = [ arr[i], arr[flagIndex] ]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( selectSort( arr, <span class="literal">false</span> ) )</span><br></pre></td></tr></table></figure><h1 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3. 插入排序"></a>3. 插入排序</h1><p><fancybox><img src="https://image.gslb.dawnlab.me/f8e978f9c8fceeae5dc707da9e8b342d.png" alt=""></fancybox></p><h2 id="3-1-编程思路"><a href="#3-1-编程思路" class="headerlink" title="3.1 编程思路"></a>3.1 编程思路</h2><p>将数组以外层循环次数为基准分成两段，数组前段：已经排好序；数组后端：未排序</p><p>将未排序部分的第一个元素插入到排好序的部分中。</p><p><strong>实现思路：</strong>使用两层循环</p><ol><li>外层循环：执行 i - 1 次，每一次将后面的一个元素排进前面部分。</li><li>内层循环：将未排序部分的第一个元素插入到排好序的部分中</li></ol><h2 id="3-2-编程要点"><a href="#3-2-编程要点" class="headerlink" title="3.2 编程要点"></a>3.2 编程要点</h2><p>内层循环：已排序部分的后一个元素向前<strong>单向冒泡</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [ <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">6</span> ]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insetSort</span>(<span class="params"> arr </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i ++ )&#123;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">let</span> j = i + <span class="number">1</span>; j &gt;= <span class="number">0</span>; j -- )&#123;</span><br><span class="line">            <span class="comment">// 单向冒泡</span></span><br><span class="line">            <span class="keyword">if</span>( arr[j] &lt; arr[ j - <span class="number">1</span> ] )&#123;</span><br><span class="line">                [ arr[ j - <span class="number">1</span> ], arr[j] ] = [ arr[j], arr[ j - <span class="number">1</span> ] ]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( insetSort( arr ) )</span><br></pre></td></tr></table></figure><h1 id="4-快速排序"><a href="#4-快速排序" class="headerlink" title="4. 快速排序"></a>4. 快速排序</h1><p><fancybox><img src="https://image.gslb.dawnlab.me/cc11726a27ac11a43d2e140a6004f32d.png" alt=""></fancybox></p><h2 id="4-1-编程思路"><a href="#4-1-编程思路" class="headerlink" title="4.1 编程思路"></a>4.1 编程思路</h2><p>寻找一个中点，将原数组分为三部分</p><ol><li>第一部分：元素的值都比中点的值小</li><li>第二部分：当前元素</li><li>第三部分：元素的值都比中点的值大</li></ol><p>依次递归，当分出数组的长度小于等于 1 时，返回数组</p><p>最后把三部分合并到一起。</p><p><strong>实现思路：</strong></p><p>使用三个变量保存三部分的结果，最后合并到一起。</p><h2 id="4-2-编程要点"><a href="#4-2-编程要点" class="headerlink" title="4.2 编程要点"></a>4.2 编程要点</h2><p>将原数组分成三部分保存下来，返回合并的值。</p><h2 id="4-3-代码实现"><a href="#4-3-代码实现" class="headerlink" title="4.3  代码实现"></a>4.3  代码实现</h2><figure class="highlight js"><figcaption><span>快速排序</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [ <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">6</span> ]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quick</span>(<span class="params"> arr </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( arr.length &lt;= <span class="number">1</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> arr </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> pointIndex = <span class="built_in">Math</span>.floor( arr.length / <span class="number">2</span> )</span><br><span class="line">    <span class="keyword">let</span> pointValue = arr.splice( pointIndex, <span class="number">1</span> )[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">let</span> lArr = []</span><br><span class="line">    <span class="keyword">let</span> rArr = []</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i ++ )&#123;</span><br><span class="line">        arr[i] &gt; pointValue ? rArr.push( arr[i] ) : lArr.push( arr[i] )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [ ...quick(lArr), pointValue, ...quick(rArr) ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( quick( arr ) )</span><br></pre></td></tr></table></figure><h1 id="5-快速排序（原数组操作方式）"><a href="#5-快速排序（原数组操作方式）" class="headerlink" title="5. 快速排序（原数组操作方式）"></a>5. 快速排序（原数组操作方式）</h1><p><fancybox><img src="https://image.gslb.dawnlab.me/a29a951f083c80f8506d235edbc0f7a4.png" alt=""></fancybox></p><h2 id="5-1-编程思路"><a href="#5-1-编程思路" class="headerlink" title="5.1 编程思路"></a>5.1 编程思路</h2><p>在原数组上操作，取一个中值，操作原素组，将原数组以该中值为基点分成两部分，记录下标，重复进行此操作，当开始的下标和结束的下标相等时结束递归，最后，整个数组就排序成功。</p><h2 id="5-2-编程要点"><a href="#5-2-编程要点" class="headerlink" title="5.2 编程要点"></a>5.2 编程要点</h2><ol><li>将原数组以中值为基点分成三部分。</li><li>每次递归，传入正确的下标</li><li>获取中值下标函数的编写</li></ol><p><strong>获取中值下标函数</strong></p><p>作用：将数组段以左起点为中点，将此段数组分成三段，返回中值的下标。</p><p>思路：</p><ol><li>取出起点的值作为中点</li><li>使用变量 j 为起始值的下标</li><li>使用一个循环，循环将此段数组分为三段（满足条件–&gt;交换位置–&gt;j++）</li><li>返回中值下标 j</li></ol><h2 id="5-3-代码实现"><a href="#5-3-代码实现" class="headerlink" title="5.3  代码实现"></a>5.3  代码实现</h2><figure class="highlight js"><figcaption><span>快速排序（操作原数组方式）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [ <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">6</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函数的作用：获取中值下标</span></span><br><span class="line"><span class="comment"> * 以该段数组尾部的值作为基准，将数组分为两半，返回基准值的下标</span></span><br><span class="line"><span class="comment"> * @param &#123; Array &#125; arr  原素组</span></span><br><span class="line"><span class="comment"> * @param &#123; number &#125; start 操作开始的地方</span></span><br><span class="line"><span class="comment"> * @param &#123; number &#125; end 操作结束的地方</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCenterIndex</span>(<span class="params"> arr, start, end </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> j = start</span><br><span class="line">    <span class="keyword">let</span> pValue = arr[end]</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">let</span> i = start; i &lt;= end; i ++ )&#123;</span><br><span class="line">        <span class="keyword">if</span>( arr[i] &lt;= pValue )&#123;</span><br><span class="line">            [ arr[i], arr[j] ] = [ arr[j], arr[i] ]</span><br><span class="line">            j ++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> j - <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params"> arr, start = <span class="number">0</span>, end = arr.length <span class="number">-1</span> </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( end - start &lt; <span class="number">1</span> ) <span class="keyword">return</span> arr</span><br><span class="line">    <span class="keyword">let</span> centerIndex = getCenterIndex( arr, start, end )</span><br><span class="line">    <span class="comment">// 将左右两边依次排序</span></span><br><span class="line">    quickSort( arr, start, centerIndex - <span class="number">1</span> )</span><br><span class="line">    quickSort( arr, centerIndex + <span class="number">1</span>, end )</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( quickSort( arr ) )</span><br></pre></td></tr></table></figure><h1 id="6-归并排序"><a href="#6-归并排序" class="headerlink" title="6. 归并排序"></a>6. 归并排序</h1><p><fancybox><img src="https://image.gslb.dawnlab.me/6521052efb10fdb70ec72da8bbde203f.png" alt=""></fancybox></p><h2 id="6-1-编程思路"><a href="#6-1-编程思路" class="headerlink" title="6.1 编程思路"></a>6.1 编程思路</h2><ol><li>使用递归将数组递归拆分直至只有一个元素</li><li>将数组依次合并</li></ol><h2 id="6-2-编程要点"><a href="#6-2-编程要点" class="headerlink" title="6.2 编程要点"></a>6.2 编程要点</h2><p>使用两个函数：</p><ol><li>分函数：将数组进行拆分，直到只有一个元素为止</li><li>合函数：使用队列的思想，将两个两个的数组合并成一个数组</li></ol><h2 id="6-3-代码实现"><a href="#6-3-代码实现" class="headerlink" title="6.3  代码实现"></a>6.3  代码实现</h2><figure class="highlight js"><figcaption><span>归并排序</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [ <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">6</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 归并排序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params"> arr </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( arr.length &lt; <span class="number">2</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> middle = <span class="built_in">Math</span>.floor( arr.length / <span class="number">2</span> )</span><br><span class="line">    <span class="keyword">let</span> left = arr.slice( <span class="number">0</span>, middle )</span><br><span class="line">    <span class="keyword">let</span> right = arr.slice( middle )</span><br><span class="line">    <span class="comment">// 先分再和</span></span><br><span class="line">    <span class="keyword">return</span> merge( mergeSort( left ), mergeSort( right ) )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将分开的数组合并</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params"> l, r </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="comment">// 依次用第一个元素对比 小的元素放到</span></span><br><span class="line">    <span class="keyword">while</span>( l.length &amp;&amp; r.length )&#123;</span><br><span class="line">        <span class="keyword">if</span>( l[<span class="number">0</span>] &lt;= r[<span class="number">0</span>] )&#123;</span><br><span class="line">            res.push( l.shift() )</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.push( r.shift() )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将剩下的元素放到 res 中</span></span><br><span class="line">    <span class="keyword">while</span>( l.length ) res.push( l.shift() )</span><br><span class="line">    <span class="keyword">while</span>( r.length ) res.push( r.shift() )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( mergeSort( arr ) )</span><br></pre></td></tr></table></figure><h1 id="7-未完待续……"><a href="#7-未完待续……" class="headerlink" title="7. 未完待续……"></a>7. 未完待续……</h1><h2 id="7-1-桶排序"><a href="#7-1-桶排序" class="headerlink" title="7.1 桶排序"></a>7.1 桶排序</h2><h2 id="7-2-计数排序"><a href="#7-2-计数排序" class="headerlink" title="7.2 计数排序"></a>7.2 计数排序</h2><h2 id="7-3-希尔排序"><a href="#7-3-希尔排序" class="headerlink" title="7.3 希尔排序"></a>7.3 希尔排序</h2><h1 id="8-参考材料"><a href="#8-参考材料" class="headerlink" title="8. 参考材料"></a>8. 参考材料</h1><p><a href="https://juejin.im/post/5d371aa6e51d455d850d3bbe" target="_blank" rel="noopener">JavaScript 数据结构与算法之美 - 归并排序、快速排序、希尔排序、堆排序</a></p><p><a href="https://juejin.im/post/5d75f77e5188253e4b2f0d3d" target="_blank" rel="noopener">手写算法并记住它：快速排序（最易理解版）</a></p><p><a href="https://juejin.im/post/5d75b4d45188250c992d5919" target="_blank" rel="noopener">手写算法并记住它：快速排序（5行代码简单版）</a></p><p><a href="https://juejin.im/post/5d72201df265da03ca11906d" target="_blank" rel="noopener">手写算法并记住它：插入排序</a></p><p><a href="https://juejin.im/post/5d6f14c5e51d4561f17a5130" target="_blank" rel="noopener">手写算法并记住它：选择排序</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结常用排序算法.&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://blog.curtaintan.club/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="排序" scheme="http://blog.curtaintan.club/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>思路清晰--前端性能优化</title>
    <link href="http://blog.curtaintan.club/2020/02/14/%E6%80%9D%E8%B7%AF%E6%B8%85%E6%99%B0-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>http://blog.curtaintan.club/2020/02/14/%E6%80%9D%E8%B7%AF%E6%B8%85%E6%99%B0-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</id>
    <published>2020-02-14T01:25:00.000Z</published>
    <updated>2020-02-14T02:18:57.932Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-原则"><a href="#1-原则" class="headerlink" title="1. 原则"></a>1. 原则</h1><ol><li>多使用内存、缓存或其他方法来存储</li><li>减少 cpu 计算，减少 http 网络请求</li></ol><h1 id="2-从哪里入手"><a href="#2-从哪里入手" class="headerlink" title="2. 从哪里入手"></a>2. 从哪里入手</h1><ol><li>加载页面和静态资源</li><li>页面渲染</li></ol><h2 id="2-1-加载资源优化"><a href="#2-1-加载资源优化" class="headerlink" title="2.1 加载资源优化"></a>2.1 加载资源优化</h2><ol><li>静态资源的压缩和合并</li><li>静态资源缓存</li><li>使用 CDN 让资源加载更快</li><li>使用 SSR 后端渲染，数据直接输出到 HTML 中</li></ol><h2 id="2-2-渲染优化"><a href="#2-2-渲染优化" class="headerlink" title="2.2 渲染优化"></a>2.2 渲染优化</h2><ol><li>CSS 放前面，JS 放后面</li><li>懒加载（图片懒加载、下拉加载更多）</li><li>减少 DOM 查询，对 DOM 查询做缓存</li><li>减少 DOM 操作，多个操作尽量合并在一起执行（例如：插入列表）</li><li>使用事件节流与防抖</li><li>尽早执行操作（ 如：DOMContentLoaded ）</li></ol><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h1><p>简略的概述了一下前端性能的优化。</p><h1 id="4-资源推荐"><a href="#4-资源推荐" class="headerlink" title="4. 资源推荐"></a>4. 资源推荐</h1><p>框架打包优化</p><p><a href="https://juejin.im/post/5cd4d991e51d453a4a357e69" target="_blank" rel="noopener">🚀 记一次前端性能优化</a></p><p><a href="https://csspod.com/frontend-performance-best-practices/" target="_blank" rel="noopener">前端性能优化最佳实践</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-原则&quot;&gt;&lt;a href=&quot;#1-原则&quot; class=&quot;headerlink&quot; title=&quot;1. 原则&quot;&gt;&lt;/a&gt;1. 原则&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;多使用内存、缓存或其他方法来存储&lt;/li&gt;
&lt;li&gt;减少 cpu 计算，减少 http 网络请求&lt;/li&gt;

      
    
    </summary>
    
    
      <category term="前端" scheme="http://blog.curtaintan.club/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="性能优化" scheme="http://blog.curtaintan.club/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>[转载]webpack优化</title>
    <link href="http://blog.curtaintan.club/2020/02/12/[%E8%BD%AC%E8%BD%BD]-webpack%E4%BC%98%E5%8C%96/"/>
    <id>http://blog.curtaintan.club/2020/02/12/[%E8%BD%AC%E8%BD%BD]-webpack%E4%BC%98%E5%8C%96/</id>
    <published>2020-02-12T15:43:31.000Z</published>
    <updated>2020-02-15T09:27:13.484Z</updated>
    
    <content type="html"><![CDATA[<p><em>转载自：珠峰培训</em></p><p><em>原文地址：<a href="https://github.com/zhufengzhufeng/webpack-train" target="_blank" rel="noopener">github</a></em></p><a id="more"></a><h1 id="webpack各种优化"><a href="#webpack各种优化" class="headerlink" title="webpack各种优化"></a>webpack各种优化</h1><p>上一章节我们已经掌握了webpack常见的所有配置</p><p>这一节我们来看看如何实现webpack中的优化，我们先来编写最基本的webpack配置，然后依次实现各种优化！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">"mini-css-extract-plugin"</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">"html-webpack-plugin"</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">mode</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    mode: mode,</span><br><span class="line">    entry: <span class="string">"./src/main.js"</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">      filename: <span class="string">"bundle.js"</span>,</span><br><span class="line">      path: path.resolve(__dirname, <span class="string">"dist"</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">      rules: [</span><br><span class="line">        &#123;</span><br><span class="line">          test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">          use: <span class="string">"file-loader"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">          use: <span class="string">"babel-loader"</span> <span class="comment">// .babelrc已经配置支持react</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">          use: [</span><br><span class="line">            mode !== <span class="string">"development"</span></span><br><span class="line">              ? MiniCssExtractPlugin.loader</span><br><span class="line">              : <span class="string">"style-loader"</span>,</span><br><span class="line">            <span class="string">"css-loader"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="keyword">new</span> PurgecssPlugin(&#123;</span><br><span class="line">        paths: glob.sync(<span class="string">`<span class="subst">$&#123;path.join(__dirname, <span class="string">"src"</span>)&#125;</span>/**/*`</span>, &#123; <span class="attr">nodir</span>: <span class="literal">true</span> &#125;) <span class="comment">// 不匹配目录，只匹配文件</span></span><br><span class="line">      &#125;),</span><br><span class="line">      mode !== <span class="string">"development"</span> &amp;&amp;</span><br><span class="line">        <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">          filename: <span class="string">"css/[name].css"</span></span><br><span class="line">        &#125;),</span><br><span class="line">      <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">        template: <span class="string">"./src/template.html"</span>,</span><br><span class="line">        filename: <span class="string">"index.html"</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ].filter(<span class="built_in">Boolean</span>)</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>.babelrc</code>配置文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span>: [</span><br><span class="line">        <span class="string">"@babel/preset-env"</span>,</span><br><span class="line">        <span class="string">"@babel/preset-react"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-删除无用的Css样式"><a href="#1-删除无用的Css样式" class="headerlink" title="1.删除无用的Css样式"></a>1.删除无用的Css样式</h2><p>先来看编写的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./style.css'</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: red</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.class1</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: red</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里的<code>.class1</code>显然是无用的，我们可以搜索<code>src</code>目录下的文件，删除无用的样式</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> glob = <span class="built_in">require</span>(<span class="string">'glob'</span>);</span><br><span class="line"><span class="keyword">const</span> PurgecssPlugin = <span class="built_in">require</span>(<span class="string">'purgecss-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要配合mini-css-extract-plugin插件</span></span><br><span class="line">mode !== <span class="string">"development"</span> &amp;&amp; <span class="keyword">new</span> PurgecssPlugin(&#123;</span><br><span class="line">    paths: glob.sync(<span class="string">`<span class="subst">$&#123;path.join(__dirname, <span class="string">"src"</span>)&#125;</span>/**/*`</span>, &#123; <span class="attr">nodir</span>: <span class="literal">true</span> &#125;) <span class="comment">// 不匹配目录，只匹配文件</span></span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><h2 id="2-图片压缩插件"><a href="#2-图片压缩插件" class="headerlink" title="2.图片压缩插件"></a>2.图片压缩插件</h2><p>将打包后的图片进行优化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install image-webpack-loader --save-dev</span><br></pre></td></tr></table></figure><p>在file-loader之前使用压缩图片插件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">loader: <span class="string">"image-webpack-loader"</span>,</span><br><span class="line">options: &#123;</span><br><span class="line">  mozjpeg: &#123;</span><br><span class="line">    progressive: <span class="literal">true</span>,</span><br><span class="line">    quality: <span class="number">65</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// optipng.enabled: false will disable optipng</span></span><br><span class="line">  optipng: &#123;</span><br><span class="line">    enabled: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  pngquant: &#123;</span><br><span class="line">    quality: [<span class="number">0.90</span>, <span class="number">0.95</span>],</span><br><span class="line">    speed: <span class="number">4</span></span><br><span class="line">  &#125;,</span><br><span class="line">  gifsicle: &#123;</span><br><span class="line">    interlaced: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// the webp option will enable WEBP</span></span><br><span class="line">  webp: &#123;</span><br><span class="line">    quality: <span class="number">75</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以发现图片大小是有了明显的变化</p></blockquote><h2 id="3-CDN加载文件"><a href="#3-CDN加载文件" class="headerlink" title="3.CDN加载文件"></a>3.CDN加载文件</h2><p>我们希望通过cdn的方式引入资源</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AddAssetHtmlCdnPlugin = <span class="built_in">require</span>(<span class="string">'add-asset-html-cdn-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">new</span> AddAssetHtmlCdnPlugin(<span class="literal">true</span>,&#123;</span><br><span class="line">    <span class="string">'jquery'</span>:<span class="string">'https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>但是在代码中还希望引入<code>jquery</code>来获得提示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'jquery'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'$'</span>,$)</span><br></pre></td></tr></table></figure><p>但是打包时依然会将<code>jquery</code>进行打包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">externals:&#123;</span><br><span class="line">  <span class="string">'jquery'</span>:<span class="string">'$'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置文件中标注<code>jquery</code>是外部的，这样打包时就不会将jquery进行打包了</p><h2 id="4-Tree-shaking-amp-amp-Scope-Hoisting"><a href="#4-Tree-shaking-amp-amp-Scope-Hoisting" class="headerlink" title="4.Tree-shaking &amp;&amp; Scope-Hoisting"></a>4.Tree-shaking &amp;&amp; Scope-Hoisting</h2><h3 id="4-1-Tree-shaking"><a href="#4-1-Tree-shaking" class="headerlink" title="4.1 Tree-shaking"></a>4.1 Tree-shaking</h3><p>顾名思义就是将没用的内容摇晃掉,来看下面代码</p><p><code>main.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; minus &#125; <span class="keyword">from</span> <span class="string">"./calc"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(minus(<span class="number">1</span>,<span class="number">1</span>));</span><br></pre></td></tr></table></figure><p><code>calc.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;test&#125; <span class="keyword">from</span> <span class="string">'./test'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> sum = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + <span class="string">'sum'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> minus = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a - b + <span class="string">'minus'</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>test.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> test = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(test());</span><br></pre></td></tr></table></figure><blockquote><p>观察上述代码其实我们主要使用<code>minus</code>方法,<code>test.js</code>代码是有副作用的! </p></blockquote><p>默认<code>mode:production</code>时，会自动<code>tree-shaking</code>,但是打包后<code>&#39;hello&#39;</code>依然会被打印出来,这时候我们需要配置不使用副作用</p><p>在<code>package.json</code>中配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"sideEffects"</span>:<span class="literal">false</span>,</span><br></pre></td></tr></table></figure><p>如果这样设置，默认就不会导入<code>css</code>文件啦，因为我们引入css也是通过<code>import &#39;./style.css&#39;</code></p><p>这里重点就来了,<code>tree-shaking</code>主要针对<strong>es6模块</strong>,我们可以使用<code>require</code>语法导入css,但是这样用起来有点格格不入,所以我们可以配置<code>css</code>文件不是副作用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"sideEffects"</span>:[</span><br><span class="line">    <span class="string">"**/*.css"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在开发环境下默认<code>tree-shaking</code>不会生效,可以配置标识提示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">optimization:&#123;</span><br><span class="line">  usedExports:<span class="literal">true</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-Scope-Hoisting"><a href="#4-2-Scope-Hoisting" class="headerlink" title="4.2 Scope Hoisting"></a>4.2 Scope Hoisting</h3><p>作用域提升,可以减少代码体积，节约内存</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> c = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> d = a+b+c</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> d;</span><br><span class="line"><span class="comment">// 引入d</span></span><br><span class="line"><span class="keyword">import</span> d <span class="keyword">from</span> <span class="string">'./d'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(d)</span><br></pre></td></tr></table></figure><blockquote><p>最终打包后的结果会变成 <code>console.log(6)</code></p></blockquote><ul><li>代码量明显减少</li><li>减少多个函数后内存占用也将减少</li></ul><h2 id="5-DllPlugin-amp-amp-DllReferencePlugin"><a href="#5-DllPlugin-amp-amp-DllReferencePlugin" class="headerlink" title="5.DllPlugin &amp;&amp; DllReferencePlugin"></a>5.DllPlugin &amp;&amp; DllReferencePlugin</h2><p>每次构建时第三方模块都需要重新构建，这个性能消耗比较大，我们可以先把第三方库打包成动态链接库，以后构建时只需要查找构建好的库就好了，这样可以大大节约构建时间</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br></pre></td></tr></table></figure><h3 id="5-1-DllPlugin"><a href="#5-1-DllPlugin" class="headerlink" title="5.1 DllPlugin"></a>5.1 DllPlugin</h3><blockquote><p>这里我们可以先将<code>react</code>、<code>react-dom</code>单独进行打包</p></blockquote><p>单独打包创建<code>webpack.dll.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> DllPlugin = <span class="built_in">require</span>(<span class="string">'webpack/lib/DllPlugin'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry:[<span class="string">'react'</span>,<span class="string">'react-dom'</span>],</span><br><span class="line">    mode:<span class="string">'production'</span>,</span><br><span class="line">    output:&#123;</span><br><span class="line">        filename:<span class="string">'react.dll.js'</span>,</span><br><span class="line">        path:path.resolve(__dirname,<span class="string">'dll'</span>),</span><br><span class="line">        library:<span class="string">'react'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[</span><br><span class="line">        <span class="keyword">new</span> DllPlugin(&#123;</span><br><span class="line">            name:<span class="string">'react'</span>,</span><br><span class="line">            path:path.resolve(__dirname,<span class="string">'dll/manifest.json'</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行<code>&quot;webpack --config webpack.dll.js</code>命令，可以看到dll目录下创建了两个文件分别是<code>manifest.json</code>,<code>react.dll.js</code></p><p>关系是这个酱紫的，到时候我们会通过<code>manifest.json</code>找到<code>react.dll.js</code>文件中的模块进行加载</p><h3 id="5-2-DllReferencePlugin"><a href="#5-2-DllReferencePlugin" class="headerlink" title="5.2 DllReferencePlugin"></a>5.2 DllReferencePlugin</h3><p>在我们的项目中可以引用刚才打包好的动态链接库</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> DllReferencePlugin = <span class="built_in">require</span>(<span class="string">'webpack/lib/DllReferencePlugin'</span>);</span><br><span class="line"><span class="keyword">const</span> AddAssetHtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'add-asset-html-webpack-plugin'</span>);</span><br><span class="line"><span class="comment">// 构建时会引用动态链接库的内容</span></span><br><span class="line"><span class="keyword">new</span> DllReferencePlugin(&#123;</span><br><span class="line">  manifest:path.resolve(__dirname,<span class="string">'dll/manifest.json'</span>)</span><br><span class="line">&#125;),</span><br><span class="line"><span class="comment">// 需要手动引入react.dll.js</span></span><br><span class="line"><span class="keyword">new</span> AddAssetHtmlWebpackPlugin(</span><br><span class="line">  &#123; <span class="attr">filepath</span>: path.resolve(__dirname,<span class="string">'dll/react.dll.js'</span>) &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>使用DllPlugin可以大幅度提高构建速度</p><h2 id="6-动态加载"><a href="#6-动态加载" class="headerlink" title="6.动态加载"></a>6.动态加载</h2><p>实现点击后动态加载文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> btn = <span class="built_in">document</span>.createElement(<span class="string">'button'</span>);</span><br><span class="line">btn.innerHTML = <span class="string">'点击加载视频'</span>;</span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>,()=&gt;&#123;</span><br><span class="line">    <span class="keyword">import</span>(<span class="string">'./video'</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res.default);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(btn);</span><br></pre></td></tr></table></figure><p>给动态引入的文件增加名字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">output:&#123;</span><br><span class="line">  chunkFilename:<span class="string">'[name].min.js'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "video" */</span> <span class="string">'./video'</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res.default);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>这样打包后的结果最终的文件就是 <code>video.min.js</code></p></blockquote><h2 id="7-打包文件分析工具"><a href="#7-打包文件分析工具" class="headerlink" title="7.打包文件分析工具"></a>7.打包文件分析工具</h2><p>安装<code>webpack-bundle-analyzer</code>插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack-bundle-analyzer</span><br></pre></td></tr></table></figure><p>使用插件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;BundleAnalyzerPlugin&#125; = <span class="built_in">require</span>(<span class="string">'webpack-bundle-analyzer'</span>);</span><br><span class="line">mode !== <span class="string">"development"</span> &amp;&amp; <span class="keyword">new</span> BundleAnalyzerPlugin()</span><br></pre></td></tr></table></figure><p>默认就会展现当前应用的分析图表</p><h2 id="8-SplitChunks"><a href="#8-SplitChunks" class="headerlink" title="8.SplitChunks"></a>8.SplitChunks</h2><p>我们在来看下SplitChunks这个配置，他可以在编译时抽离第三方模块、公共模块</p><p>将项目配置成多入口文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">entry:&#123;</span><br><span class="line">  a:<span class="string">'./src/a.js'</span>,</span><br><span class="line">  b:<span class="string">'./src/b.js'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们让a,b两个模块同时引用<code>jquery</code>,别忘了去掉之前的<code>externals</code>配置</p><p><img src="http://img.fullstackjavascript.cn/analyze-1.png" alt=""></p><p>配置<code>SplitChunks</code>插件</p><p>默认配置在此，我一个个描述下含义</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">splitChunks: &#123;</span><br><span class="line">  chunks: <span class="string">'async'</span>, <span class="comment">// 分割异步模块</span></span><br><span class="line">  minSize: <span class="number">30000</span>, <span class="comment">// 分割的文件最小大小</span></span><br><span class="line">  maxSize: <span class="number">0</span>, </span><br><span class="line">  minChunks: <span class="number">1</span>, <span class="comment">// 引用次数</span></span><br><span class="line">  maxAsyncRequests: <span class="number">5</span>, <span class="comment">// 最大异步请求数</span></span><br><span class="line">  maxInitialRequests: <span class="number">3</span>, <span class="comment">// 最大初始化请求数</span></span><br><span class="line">  automaticNameDelimiter: <span class="string">'~'</span>, <span class="comment">// 抽离的命名分隔符</span></span><br><span class="line">  automaticNameMaxLength: <span class="number">30</span>, <span class="comment">// 名字最大长度</span></span><br><span class="line">  name: <span class="literal">true</span>,</span><br><span class="line">  cacheGroups: &#123; <span class="comment">// 缓存组</span></span><br><span class="line">    vendors: &#123; <span class="comment">// 先抽离第三方</span></span><br><span class="line">      test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">      priority: <span class="number">-10</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">default</span>: &#123; </span><br><span class="line">      minChunks: <span class="number">2</span>,</span><br><span class="line">      priority: <span class="number">-20</span>, <span class="comment">// 优先级</span></span><br><span class="line">      reuseExistingChunk: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们将<code>async</code>改为<code>initial</code></p></blockquote><p><img src="http://img.fullstackjavascript.cn/analyze-2.png" alt=""></p><p>我们在为每个文件动态导入<code>lodash</code>库,并且改成<code>async</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="string">'lodash'</span>)</span><br></pre></td></tr></table></figure><p><img src="http://img.fullstackjavascript.cn/analyze-3.png" alt=""></p><blockquote><p>为每个入口引入<code>c.js</code>,并且改造配置文件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">splitChunks: &#123;</span><br><span class="line">  chunks: <span class="string">'all'</span>,</span><br><span class="line">  name: <span class="literal">true</span>,</span><br><span class="line">  cacheGroups: &#123;</span><br><span class="line">    vendors: &#123;</span><br><span class="line">      test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">      priority: <span class="number">-10</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">default</span>: &#123;</span><br><span class="line">      minSize:<span class="number">1</span>, <span class="comment">// 不是第三方模块，被引入两次也会被抽离</span></span><br><span class="line">      minChunks: <span class="number">2</span>,</span><br><span class="line">      priority: <span class="number">-20</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.fullstackjavascript.cn/analyze-4.png" alt=""></p><blockquote><p>这样再反过来看<code>chunks</code>的参数是不是就了然于胸啦！</p></blockquote><h2 id="9-热更新"><a href="#9-热更新" class="headerlink" title="9.热更新"></a>9.热更新</h2><p>模块热替换（HMR - Hot Module Replacement）是 webpack 提供的最有用的功能之一。它允许在运行时替换，添加，删除各种模块，而无需进行完全刷新重新加载整个页面</p><ul><li>保留在完全重新加载页面时丢失的应用程序的状态</li><li>只更新改变的内容，以节省开发时间</li><li>调整样式更加快速，几乎等同于就在浏览器调试器中更改样式</li></ul><p>启用热更新，默认样式可以支持热更新，如果不支持热更新则采用强制刷新</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">devServer:&#123;</span><br><span class="line">  hot:<span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> webpack.NamedModulesPlugin(),</span><br></pre></td></tr></table></figure><p>让<code>js</code>支持热更新</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sum <span class="keyword">from</span> <span class="string">'./sum'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">module</span>.hot)&#123; <span class="comment">// 如果支持热更新</span></span><br><span class="line">    <span class="built_in">module</span>.hot.accept(); <span class="comment">// 当入口文件变化后重新执行当前入口文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-IgnorePlugin"><a href="#10-IgnorePlugin" class="headerlink" title="10.IgnorePlugin"></a>10.IgnorePlugin</h2><p>忽略 <code>import</code>和<code>require</code>语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.IgnorePlugin(<span class="regexp">/^\.\/locale$/</span>, /moment$/)</span><br></pre></td></tr></table></figure><h2 id="11-费时分析"><a href="#11-费时分析" class="headerlink" title="11.费时分析"></a>11.费时分析</h2><p>可以计算每一步执行的运行速度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> SpeedMeasureWebpackPlugin = <span class="built_in">require</span>(<span class="string">'speed-measure-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> smw = <span class="keyword">new</span> SpeedMeasureWebpackPlugin();</span><br><span class="line">  <span class="built_in">module</span>.exports =smw.wrap(&#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="12-noParse"><a href="#12-noParse" class="headerlink" title="12.noParse"></a>12.noParse</h2><p><code>module.noParse</code>，对类似jq这类依赖库，内部不会引用其他库，我们在打包的时候就没有必要去解析，这样能够增加打包速率</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">noParse:<span class="regexp">/jquery/</span></span><br></pre></td></tr></table></figure><h2 id="13-resolve"><a href="#13-resolve" class="headerlink" title="13.resolve"></a>13.resolve</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">  extensions: [<span class="string">".js"</span>,<span class="string">".jsx"</span>,<span class="string">".json"</span>,<span class="string">".css"</span>],</span><br><span class="line">  alias:&#123;&#125;,</span><br><span class="line">  modules:[<span class="string">'node_modules'</span>]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="14-include-exclude"><a href="#14-include-exclude" class="headerlink" title="14.include/exclude"></a>14.include/exclude</h2><p>在使用<code>loader</code>时,可以指定哪些文件不通过<code>loader</code>,或者指定哪些文件通过<code>loader</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  use: <span class="string">"babel-loader"</span>,</span><br><span class="line">  <span class="comment">// include:path.resolve(__dirname,'src'),</span></span><br><span class="line">  exclude:<span class="regexp">/node_modules/</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="15-happypack"><a href="#15-happypack" class="headerlink" title="15.happypack"></a>15.happypack</h2><p>多线程打包，我们可以将不同的逻辑交给不同的线程来处理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev happypack</span><br></pre></td></tr></table></figure><p>使用插件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HappyPack = <span class="built_in">require</span>(<span class="string">'happypack'</span>);</span><br><span class="line">rules:[</span><br><span class="line">  &#123;</span><br><span class="line">    test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">    use: <span class="string">'happypack/loader?id=jsx'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">    use: <span class="string">'happypack/loader?id=styles'</span></span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">  id: <span class="string">'jsx'</span>,</span><br><span class="line">  threads: <span class="number">4</span>,</span><br><span class="line">  loaders: [ <span class="string">'babel-loader'</span> ]</span><br><span class="line">&#125;),</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">  id: <span class="string">'styles'</span>,</span><br><span class="line">  threads: <span class="number">2</span>,</span><br><span class="line">  loaders: [ <span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>, <span class="string">'less-loader'</span> ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;转载自：珠峰培训&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;原文地址：&lt;a href=&quot;https://github.com/zhufengzhufeng/webpack-train&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="转载" scheme="http://blog.curtaintan.club/categories/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="webpack" scheme="http://blog.curtaintan.club/categories/%E8%BD%AC%E8%BD%BD/webpack/"/>
    
    
      <category term="webpack" scheme="http://blog.curtaintan.club/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>[转载]从0搭建自己的webpack开发环境（二）</title>
    <link href="http://blog.curtaintan.club/2020/02/12/[%E8%BD%AC%E8%BD%BD]-%E4%BB%8E0%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84webpack%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://blog.curtaintan.club/2020/02/12/[%E8%BD%AC%E8%BD%BD]-%E4%BB%8E0%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84webpack%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2020-02-12T15:37:37.000Z</published>
    <updated>2020-02-15T09:33:39.558Z</updated>
    
    <content type="html"><![CDATA[<p><em>转载自：珠峰培训</em></p><p><em>原文地址：<a href="https://github.com/zhufengzhufeng/webpack-train" target="_blank" rel="noopener">github</a></em></p><a id="more"></a><h1 id="Webpack中必须掌握的配置"><a href="#Webpack中必须掌握的配置" class="headerlink" title="Webpack中必须掌握的配置"></a>Webpack中必须掌握的配置</h1><p>loader主要用于把模块原内容按照需求转换成新内容，可以加载非 JS 模块！<br>通过使用不同的Loader，Webpack可以把不同的文件都转成JS文件,比如CSS、ES6/7、JSX等。  </p><p>我们来看看这些我们必须掌握的loader!</p><h2 id="1-loader的编写"><a href="#1-loader的编写" class="headerlink" title="1.loader的编写"></a>1.loader的编写</h2><h3 id="1-1-loader的使用"><a href="#1-1-loader的使用" class="headerlink" title="1.1 loader的使用"></a>1.1 loader的使用</h3><ul><li>test：匹配处理文件的扩展名的正则表达式</li><li>use：loader名称，就是你要使用模块的名称</li><li>include/exclude:手动指定必须处理的文件夹或屏蔽不需要处理的文件夹</li><li>options:为loaders提供额外的设置选项</li></ul><p>默认<code>loader</code>的顺序是<strong>从下到上</strong>、<strong>从右向左</strong>执行，当然执行顺序也可以手动定义的，接下来我们依次介绍常见的loader，来感受<code>loader</code>的魅力!</p><p>我们基于这个基础配置来继续编写:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> dev = <span class="built_in">require</span>(<span class="string">"./webpack.dev"</span>);</span><br><span class="line"><span class="keyword">const</span> prod = <span class="built_in">require</span>(<span class="string">"./webpack.prod"</span>);</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">"webpack-merge"</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">"html-webpack-plugin"</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> base = &#123;</span><br><span class="line">  entry:<span class="string">'./src/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">"[name].js"</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"../dist"</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">        filename: <span class="string">'index.html'</span>,</span><br><span class="line">        template: path.resolve(__dirname, <span class="string">"../public/template.html"</span>),</span><br><span class="line">        hash: <span class="literal">true</span>,</span><br><span class="line">        minify: &#123;</span><br><span class="line">            removeAttributeQuotes: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(&#123;</span><br><span class="line">        cleanOnceBeforeBuildPatterns: [path.resolve(<span class="string">'xxxx/*'</span>),<span class="string">'**/*'</span>],</span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">env</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (env.development) &#123;</span><br><span class="line">    <span class="keyword">return</span> merge(base, dev);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> merge(base, prod);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-处理CSS文件"><a href="#2-处理CSS文件" class="headerlink" title="2.处理CSS文件"></a>2.处理CSS文件</h2><h3 id="2-1-解析css样式"><a href="#2-1-解析css样式" class="headerlink" title="2.1 解析css样式"></a>2.1 解析css样式</h3><p>我们在<code>js</code>文件中引入css样式！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./index.css'</span>;</span><br></pre></td></tr></table></figure><p>再次执行打包时，会提示css无法解析</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ERROR <span class="keyword">in</span> ./src/index.css 1:4</span><br><span class="line">Module parse failed: Unexpected token (1:4)</span><br><span class="line">You may need an appropriate loader to handle this file <span class="built_in">type</span>, currently no loaders are configured to process this file. See https://webpack.js.org/concepts<span class="comment">#loaders</span></span><br></pre></td></tr></table></figure><p><strong>安装loader</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install style-loader css-loader --save-dev</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">       test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">       use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-抽离样式文件"><a href="#2-2-抽离样式文件" class="headerlink" title="2.2 抽离样式文件"></a>2.2 抽离样式文件</h3><p>默认只在打包时进行样式抽离</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">env</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> isDev = env.development;</span><br><span class="line">  <span class="keyword">const</span> base = &#123;<span class="comment">/*source...*/</span>&#125;</span><br><span class="line">  <span class="keyword">if</span> (isDev) &#123;</span><br><span class="line">    <span class="keyword">return</span> merge(base, dev);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> merge(base, prod);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>安装抽离插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mini-css-extract-plugin --save-dev</span><br></pre></td></tr></table></figure><p>配置抽离插件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">    use: [</span><br><span class="line">        !isDev &amp;&amp; MiniCssExtractPlugin.loader,</span><br><span class="line">        isDev &amp;&amp; <span class="string">'style-loader'</span>,</span><br><span class="line">        <span class="string">"css-loader"</span></span><br><span class="line">    ].filter(<span class="built_in">Boolean</span>)</span><br><span class="line">&#125;</span><br><span class="line">!isDev &amp;&amp; <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">    filename: <span class="string">"css/[name].css"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>最终文件配置贴一下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> dev = <span class="built_in">require</span>(<span class="string">"./webpack.dev"</span>);</span><br><span class="line"><span class="keyword">const</span> prod = <span class="built_in">require</span>(<span class="string">"./webpack.prod"</span>);</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">"webpack-merge"</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">"mini-css-extract-plugin"</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">"html-webpack-plugin"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">env</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> isDev = env.development;</span><br><span class="line">  <span class="keyword">const</span> base = &#123;</span><br><span class="line">    entry: <span class="string">"./src/index.js"</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">      filename: <span class="string">"[name].js"</span>,</span><br><span class="line">      path: path.resolve(__dirname, <span class="string">"../dist"</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">      rules: [</span><br><span class="line">        &#123;</span><br><span class="line">          test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">          use: [</span><br><span class="line">            !isDev &amp;&amp; MiniCssExtractPlugin.loader,</span><br><span class="line">            isDev &amp;&amp; <span class="string">'style-loader'</span>,</span><br><span class="line">            <span class="string">"css-loader"</span></span><br><span class="line">          ].filter(<span class="built_in">Boolean</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[</span><br><span class="line">        !isDev &amp;&amp; <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">          filename: <span class="string">"css/[name].css"</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">          filename: <span class="string">"index.html"</span>,</span><br><span class="line">          template: path.resolve(__dirname, <span class="string">"../public/template.html"</span>),</span><br><span class="line">          hash: <span class="literal">true</span>,</span><br><span class="line">          minify: &#123;</span><br><span class="line">            removeAttributeQuotes: <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">      ].filter(<span class="built_in">Boolean</span>)</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (isDev) &#123;</span><br><span class="line">    <span class="keyword">return</span> merge(base, dev);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> merge(base, prod);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-3-css预处理器"><a href="#2-3-css预处理器" class="headerlink" title="2.3 css预处理器"></a>2.3 css预处理器</h3><p>不同的css预处理器要安装不同的loader来进行解析</p><ul><li>sass: sass-loader node-sass</li><li>less: less-loader less</li><li>stylus: stylus-loader stylus</li></ul><p>使用<code>sass</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test:<span class="regexp">/\.scss$/</span>,</span><br><span class="line">    use:[</span><br><span class="line">        !isDev &amp;&amp; MiniCssExtractPlugin.loader,</span><br><span class="line">        isDev &amp;&amp; <span class="string">'style-loader'</span>,</span><br><span class="line">        <span class="string">"css-loader"</span>,</span><br><span class="line">        <span class="string">"sass-loader"</span></span><br><span class="line">    ].filter(<span class="built_in">Boolean</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在css文件中可能会使用<code>@import</code>语法引用<code>css</code>文件,被引用的<code>css</code>文件中可能还会导入<code>scss</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">    use: [</span><br><span class="line">    !isDev &amp;&amp; MiniCssExtractPlugin.loader,</span><br><span class="line">    isDev &amp;&amp; <span class="string">'style-loader'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        loader:<span class="string">"css-loader"</span>,</span><br><span class="line">        options:&#123;</span><br><span class="line">            importLoaders:<span class="number">1</span> <span class="comment">// 引入的文件需要调用sass-loader来处理 </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"sass-loader"</span></span><br><span class="line">    ].filter(<span class="built_in">Boolean</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="2-4-处理样式前缀"><a href="#2-4-处理样式前缀" class="headerlink" title="2.4 处理样式前缀"></a>2.4 处理样式前缀</h3><p>使用<code>postcss-loader</code>增加样式前缀</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install postcss-loader autoprefixer</span><br></pre></td></tr></table></figure><p>在处理css前先增加前缀</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">    test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">    use: [</span><br><span class="line">    !isDev &amp;&amp; MiniCssExtractPlugin.loader,</span><br><span class="line">    isDev &amp;&amp; <span class="string">'style-loader'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        loader:<span class="string">"postcss-loader"</span>,</span><br><span class="line">        options:&#123;</span><br><span class="line">            plugins:[<span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"postcss-loader"</span>,</span><br><span class="line">    <span class="string">"sass-loader"</span></span><br><span class="line">    ].filter(<span class="built_in">Boolean</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>或者也可以创建<code>postcss</code>的配置文件<code>postcss.config.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins:[</span><br><span class="line">        <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以配置浏览器的兼容性范围  <a href="https://github.com/browserslist/browserslist" target="_blank" rel="noopener">.browserslistrc</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cover 99.5%</span><br></pre></td></tr></table></figure><h3 id="2-5-css压缩"><a href="#2-5-css压缩" class="headerlink" title="2.5 css压缩"></a>2.5 css压缩</h3><p>在生产环境下我们需要压缩<code>css</code>文件,配置<code>minimizer</code>选项,安装压缩插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i optimize-css-assets-webpack-plugin terser-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><p>在<code>webpack.prod.js</code>文件中配置压缩</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> OptimizeCSSAssetsPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> TerserJSPlugin = <span class="built_in">require</span>(<span class="string">'terser-webpack-plugin'</span>);</span><br><span class="line">optimization:&#123;</span><br><span class="line">    minimizer:[<span class="keyword">new</span> TerserJSPlugin(&#123;&#125;), <span class="keyword">new</span> OptimizeCSSAssetsPlugin(&#123;&#125;)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-文件指纹"><a href="#2-6-文件指纹" class="headerlink" title="2.6 文件指纹"></a>2.6 文件指纹</h3><ul><li>Hash整个项目的hash值</li><li>chunkhash 根据入口产生hash值</li><li>contentHash 根据每个文件的内容产生的hash值</li></ul><p>我们可以合理的使用<code>hash</code>戳，进行文件的缓存</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!isDev &amp;&amp; <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">    filename: <span class="string">"css/[name].[contentHash].css"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="3-处理文件类型"><a href="#3-处理文件类型" class="headerlink" title="3.处理文件类型"></a>3.处理文件类型</h2><h3 id="3-1-处理引用的图片"><a href="#3-1-处理引用的图片" class="headerlink" title="3.1 处理引用的图片"></a>3.1 处理引用的图片</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'./webpack.png'</span>;</span><br><span class="line"><span class="keyword">let</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">img.src = logo;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(img);</span><br></pre></td></tr></table></figure><p>使用<code>file-loader</code>,会将图片进行打包，并将打包后的路径返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test:<span class="regexp">/\.jpe?g|png|gif/</span>,</span><br><span class="line">    use:&#123;</span><br><span class="line">        loader:<span class="string">'file-loader'</span>,</span><br><span class="line">        options:&#123;</span><br><span class="line">            name:<span class="string">`img/[name].[ext]`</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-处理icon"><a href="#3-2-处理icon" class="headerlink" title="3.2 处理icon"></a>3.2 处理icon</h3><p>二进制文件也是使用<code>file-loader</code>来打包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test:<span class="regexp">/woff|ttf|eot|svg|otf/</span>,</span><br><span class="line">    use:&#123;</span><br><span class="line">        loader:<span class="string">'file-loader'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-转化成base64"><a href="#3-3-转化成base64" class="headerlink" title="3.3 转化成base64"></a>3.3 转化成base64</h3><p>使用<code>url-loader</code>将满足条件的图片转化成base64,不满足条件的<code>url-loader</code>会自动调用<code>file-loader</code>来进行处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test:<span class="regexp">/\.jpe?g|png|gif/</span>,</span><br><span class="line">    use:&#123;</span><br><span class="line">        loader:<span class="string">'url-loader'</span>,</span><br><span class="line">        options:&#123;</span><br><span class="line">            limit:<span class="number">100</span>*<span class="number">1024</span>,</span><br><span class="line">            name:<span class="string">`img/[name].[ext]`</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-处理JS模块"><a href="#4-处理JS模块" class="headerlink" title="4.处理JS模块"></a>4.处理JS模块</h2><h3 id="4-1-将es6代码编译成es5代码"><a href="#4-1-将es6代码编译成es5代码" class="headerlink" title="4.1 将es6代码编译成es5代码"></a>4.1 将<code>es6</code>代码编译成<code>es5</code>代码</h3><p>代码的转化工作要交给<code>babel</code>来处理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @babel/core @babel/preset-env babel-loader --save-dev</span><br></pre></td></tr></table></figure><p><code>@babel/core</code>是babel中的核心模块，<code>@babel/preset-env</code> 的作用是es6转化es5插件的插件集合，<code>babel-loader</code>是<code>webpack</code>和<code>loader</code>的桥梁。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>增加<code>babel</code>的配置文件 <code>.babelrc</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span>: [</span><br><span class="line">       [<span class="string">"@babel/preset-env"</span>]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置loader</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">rules: [&#123; <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="attr">use</span>: <span class="string">"babel-loader"</span> &#125;]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>现在打包已经可以成功的将es6语法转化成es5语法！</p><h3 id="4-2-解析装饰器"><a href="#4-2-解析装饰器" class="headerlink" title="4.2 解析装饰器"></a>4.2 解析装饰器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @babel/plugin-proposal-class-properties @babel/plugin-proposal-decorators --save-dev</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"plugins": [</span><br><span class="line">  ["@babel/plugin-proposal-decorators", &#123; "legacy": true &#125;],</span><br><span class="line">  [<span class="string">"@babel/plugin-proposal-class-properties"</span>,&#123;<span class="attr">"loose"</span>:<span class="literal">true</span>&#125;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><code>legacy:true</code>表示继续使用装饰器装饰器，loose为false时会采用<code>Object.defineProperty</code>定义属性</p><ul><li>Plugin会运行在Preset之前</li><li>Plugin 会从第一个开始顺序执行，Preset则是相反的</li></ul><h3 id="4-3-polyfill"><a href="#4-3-polyfill" class="headerlink" title="4.3 polyfill"></a>4.3 polyfill</h3><p>根据<code>.browserslistrc</code>文件，转化使用到的浏览器api</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"presets"</span>: [</span><br><span class="line">    [<span class="string">"@babel/preset-env"</span>,&#123;</span><br><span class="line">        <span class="string">"useBuiltIns"</span>:<span class="string">"usage"</span>, <span class="comment">// 按需加载</span></span><br><span class="line">        <span class="string">"corejs"</span>:<span class="number">2</span> <span class="comment">// corejs 替代了以前的pollyfill</span></span><br><span class="line">    &#125;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>安装corejs</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install core-js@2 --save</span><br></pre></td></tr></table></figure><blockquote><p><strong>使用<code>transform-runtime</code></strong><br>A plugin that enables the re-use of Babel’s injected helper code to save on codesize.可以帮我们节省代码</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @babel/plugin-transform-runtime @babel/runtime</span><br></pre></td></tr></table></figure><p>在<code>.babelrc</code>中配置插件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"plugins": [</span><br><span class="line">    <span class="string">"@babel/plugin-transform-runtime"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="4-4-添加eslint"><a href="#4-4-添加eslint" class="headerlink" title="4.4 添加eslint"></a>4.4 添加eslint</h3><p>安装<code>eslint</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install eslint</span><br><span class="line">npx eslint --init <span class="comment"># 初始化配置文件</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test:&#x2F;\.js&#x2F;,</span><br><span class="line">    enforce:&#39;pre&#39;,</span><br><span class="line">    use:&#39;eslint-loader&#39;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><blockquote><p>配置<code>eslint-loader</code>可以实时校验js文件的正确性,<code>pre</code>表示在所有<code>loader</code>执行前执行</p></blockquote><h2 id="5-source-map"><a href="#5-source-map" class="headerlink" title="5.source-map"></a>5.source-map</h2><ul><li>eval 生成代码 每个模块都被eval执行,每一个打包后的模块后面都增加了包含sourceURL</li><li>source-map 产生map文件</li><li>inline 不会生成独立的 .map文件,会以dataURL形式插入</li><li>cheap 忽略打包后的列信息，不使用loader中的sourcemap</li><li>module 没有列信息，使用loader中的sourcemap(没有列信息)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">devtool:isDev?<span class="string">'cheap-module-eval-source-map'</span>:<span class="literal">false</span></span><br></pre></td></tr></table></figure><blockquote><p>每个库中采用的<code>sourcemap</code>方式不一,可以根据自己的需要自行配置</p></blockquote><h2 id="6-resolve解析"><a href="#6-resolve解析" class="headerlink" title="6.resolve解析"></a>6.resolve解析</h2><p>想实现使用require或是import的时候,可以自动尝试添加扩展名进行匹配</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">".js"</span>, <span class="string">".jsx"</span>, <span class="string">".json"</span>, <span class="string">".css"</span>, <span class="string">".ts"</span>, <span class="string">".tsx"</span>, <span class="string">".vue"</span>]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="7-拷贝静态文件"><a href="#7-拷贝静态文件" class="headerlink" title="7.拷贝静态文件"></a>7.拷贝静态文件</h2><p>有些时候在打包时希望将一些静态资源文件进行拷贝,可以使用<code>copy-webpack-plugin</code></p><p>安装插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i copy-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><p>使用拷贝插件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">'copy-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">new</span> CopyWebpackPlugin([</span><br><span class="line">    &#123;<span class="attr">from</span>:path.resolve(<span class="string">'./src/static'</span>),<span class="attr">to</span>:path.resolve(<span class="string">'./dist'</span>)&#125;,</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h2 id="8-配置TS环境"><a href="#8-配置TS环境" class="headerlink" title="8.配置TS环境"></a>8.配置TS环境</h2><h3 id="8-1-使用ts-loader"><a href="#8-1-使用ts-loader" class="headerlink" title="8.1 使用ts-loader"></a>8.1 使用ts-loader</h3><p>使用<code>ts</code>需要安装<code>ts</code>相关配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install typescript ts-loader --save-dev</span><br></pre></td></tr></table></figure><p>生成<code>ts</code>的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx tsc --init</span><br></pre></td></tr></table></figure><p>配置<code>ts-loader</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test:<span class="regexp">/\.tsx?/</span>,</span><br><span class="line">    use: [<span class="string">'ts-loader'</span>],</span><br><span class="line">    exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将入口文件更改成<code>ts</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a:string = <span class="string">'hello'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><p>执行<code>npm run dev</code>发现已经可以正常的解析<code>ts</code>文件啦！</p><h3 id="8-2-使用-preset-typescript"><a href="#8-2-使用-preset-typescript" class="headerlink" title="8.2 使用 preset-typescript"></a>8.2 使用 preset-typescript</h3><p>不需要借助<code>typescript</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @babel/preset-typescript</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span>: [</span><br><span class="line">       [<span class="string">"@babel/preset-env"</span>,&#123;</span><br><span class="line">        <span class="attr">"useBuiltIns"</span>:<span class="string">"usage"</span>,</span><br><span class="line">        <span class="attr">"corejs"</span>:<span class="number">2</span> </span><br><span class="line">       &#125;],</span><br><span class="line">       <span class="string">"@babel/preset-react"</span>,</span><br><span class="line">       [<span class="string">"@babel/preset-typescript"</span>,&#123;</span><br><span class="line">           <span class="attr">"allExtensions"</span>: <span class="literal">true</span>  </span><br><span class="line">       &#125;]</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"plugins"</span>: [</span><br><span class="line">        [<span class="string">"@babel/plugin-proposal-decorators"</span>, &#123; <span class="attr">"legacy"</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">        [<span class="string">"@babel/plugin-proposal-class-properties"</span>,&#123;<span class="attr">"loose"</span>:<span class="literal">true</span>&#125;],</span><br><span class="line">        <span class="string">"@babel/plugin-transform-runtime"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-配置ts-react环境"><a href="#9-配置ts-react环境" class="headerlink" title="9.配置ts+react环境"></a>9.配置ts+react环境</h2><p>安装<code>react</code>相关模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i @babel/preset-react --save-dev <span class="comment"># 解析jsx语法</span></span><br><span class="line">npm i react @types/react @types/react-dom react react-dom typescript</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">const</span> state = &#123;<span class="built_in">number</span>:<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">type</span> State = Readonly&lt;<span class="keyword">typeof</span> state&gt;;</span><br><span class="line"><span class="keyword">class</span> Counter <span class="keyword">extends</span> React.Component&lt;object,State&gt;&#123;</span><br><span class="line">    state:State = state</span><br><span class="line">    handleClick =<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;<span class="built_in">number</span>:<span class="keyword">this</span>.state.number+<span class="number">1</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;<span class="built_in">number</span>&#125; = <span class="keyword">this</span>.state;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;点击&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                &#123;number&#125;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(&lt;Counter&gt;&lt;<span class="regexp">/Counter&gt;,document.getElementById('root'));</span></span><br></pre></td></tr></table></figure><h2 id="10-配置ts-vue环境"><a href="#10-配置ts-vue环境" class="headerlink" title="10.配置ts+vue环境"></a>10.配置ts+vue环境</h2><p>安装<code>vue</code>所需要的模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-loader  vue-template-compiler --save-dev</span><br><span class="line">npm install vue vue-property-decorator</span><br></pre></td></tr></table></figure><p>配置<code>ts-loader</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.tsx?/</span>,</span><br><span class="line">    use: &#123;</span><br><span class="line">        loader:<span class="string">'ts-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">            appendTsSuffixTo: [<span class="regexp">/\.vue$/</span>],</span><br><span class="line">        &#125;, </span><br><span class="line">    &#125;,</span><br><span class="line">    exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>vue-loader</code>插件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">'vue-loader/lib/plugin'</span>);</span><br><span class="line"><span class="keyword">new</span> VueLoaderPlugin();</span><br></pre></td></tr></table></figure><p>配置解析<code>.vue</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test:<span class="regexp">/\.vue$/</span>,</span><br><span class="line">    use:<span class="string">'vue-loader'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>增加<code>vue-shims.d.ts</code>，可以识别<code>.vue</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">declare module &#39;*.vue&#39; &#123;</span><br><span class="line">    import Vue from &#39;vue&#39;;</span><br><span class="line">    export default Vue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>index.tsx</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span>;</span><br><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    render:<span class="function"><span class="params">h</span>=&gt;</span>h(App)</span><br><span class="line">&#125;).$mount(<span class="string">'#root'</span>)</span><br></pre></td></tr></table></figure><p><code>App.vue文件</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(todo,index) in todos"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span>&#123;&#123;todo&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;Component,Vue&#125; <span class="keyword">from</span> <span class="string">'vue-property-decorator'</span>;</span></span><br><span class="line">@Component</span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Todo</span> <span class="keyword">extends</span> <span class="title">Vue</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">public</span> todos = [<span class="string">'香蕉'</span>,<span class="string">'苹果'</span>,<span class="string">'橘子'</span>]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="11-配置代理"><a href="#11-配置代理" class="headerlink" title="11.配置代理"></a>11.配置代理</h2><p>设置服务端接口</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.get(<span class="string">'/api/list'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.send([<span class="string">'香蕉'</span>, <span class="string">'苹果'</span>, <span class="string">'橘子'</span>]);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">4000</span>);</span><br></pre></td></tr></table></figure><p>安装<code>axios</code>获取数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios --save-dev</span><br></pre></td></tr></table></figure><p>配置接口请求</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(todo,index) in todos"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">            &#123;&#123;todo&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;Component ,Vue&#125; <span class="keyword">from</span> <span class="string">'vue-property-decorator'</span>;</span></span><br><span class="line">@Component</span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Todo</span> <span class="keyword">extends</span> <span class="title">Vue</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">public</span> todos:string[] =[];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">async</span> mounted()&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> &#123; data &#125; =  <span class="keyword">await</span> axios.get(<span class="string">'/api/list'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.todos = data</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置服务器代理路由</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">proxy: &#123;</span><br><span class="line">    <span class="string">'/api'</span>: &#123;</span><br><span class="line">    target: <span class="string">'http://localhost:4000'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;转载自：珠峰培训&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;原文地址：&lt;a href=&quot;https://github.com/zhufengzhufeng/webpack-train&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="转载" scheme="http://blog.curtaintan.club/categories/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="webpack" scheme="http://blog.curtaintan.club/categories/%E8%BD%AC%E8%BD%BD/webpack/"/>
    
    
      <category term="webpack" scheme="http://blog.curtaintan.club/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>[转载]从0搭建自己的webpack开发环境（一）</title>
    <link href="http://blog.curtaintan.club/2020/02/12/[%E8%BD%AC%E8%BD%BD]%E4%BB%8E0%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84webpack%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://blog.curtaintan.club/2020/02/12/[%E8%BD%AC%E8%BD%BD]%E4%BB%8E0%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84webpack%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2020-02-12T15:30:46.000Z</published>
    <updated>2020-02-15T09:27:01.817Z</updated>
    
    <content type="html"><![CDATA[<p><em>转载自：珠峰培训</em></p><p><em>原文地址：<a href="https://github.com/zhufengzhufeng/webpack-train" target="_blank" rel="noopener">github</a></em></p><a id="more"></a><h1 id="从0搭建自己的webpack开发环境"><a href="#从0搭建自己的webpack开发环境" class="headerlink" title="从0搭建自己的webpack开发环境"></a>从0搭建自己的webpack开发环境</h1><h2 id="1-什么是Webpack？"><a href="#1-什么是Webpack？" class="headerlink" title="1.什么是Webpack？"></a>1.什么是Webpack？</h2><p>webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler),当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle<br><img src="http://img.zhufengpeixun.cn/webpack.jpeg" alt=""></p><p>使用Webpack作为前端构建工具：</p><ul><li>代码转换：TypeScript 编译成 JavaScript、SCSS 编译成 CSS 等。</li><li>文件优化：压缩 JavaScript、CSS、HTML 代码，压缩合并图片等。</li><li>代码分割：提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载。</li><li>模块合并：在采用模块化的项目里会有很多个模块和文件，需要构建功能把模块分类合并成一个文件。</li><li>自动刷新：监听本地源代码的变化，自动重新构建、刷新浏览器。</li><li>代码校验：在代码被提交到仓库前需要校验代码是否符合规范，以及单元测试是否通过。</li><li>自动发布：更新完代码后，自动构建出线上发布代码并传输给发布系统。</li></ul><p><strong>在<code>webpack</code>应用中有两个核心</strong>:</p><ul><li>1) 模块转换器，用于把模块原内容按照需求转换成新内容，可以加载非 JS 模块</li><li>2) 扩展插件，在 Webpack 构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要的事情。</li></ul><h2 id="2-初始化项目"><a href="#2-初始化项目" class="headerlink" title="2.初始化项目"></a>2.初始化项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">├── src   <span class="comment"># 源码目录</span></span><br><span class="line">│   ├── a-module.js</span><br><span class="line">│   └── index.js</span><br></pre></td></tr></table></figure><p>编写 <em>a-module.js</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="string">'hello'</span>;</span><br></pre></td></tr></table></figure><p>编写 <em>index.js</em> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="built_in">require</span>(<span class="string">'./a-module'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><blockquote><p>这里我们使用<code>CommonJS</code>模块的方式引入，这种方式默认在浏览器上是无法运行的，我们希望通过 <code>webpack</code> 来进行打包！</p></blockquote><h2 id="3-webpack快速上手"><a href="#3-webpack快速上手" class="headerlink" title="3.webpack快速上手"></a>3.webpack快速上手</h2><h3 id="3-1-安装"><a href="#3-1-安装" class="headerlink" title="3.1 安装"></a>3.1 安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br><span class="line">npm install webpack webpack-cli --save-dev</span><br></pre></td></tr></table></figure><p><code>webpack</code>默认支持0配置,配置<code>scripts</code>脚本</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "build": "webpack"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行<code>npm run build</code>,默认会调用 <code>node_modules/.bin</code>下的<code>webpack</code>命令，内部会调用<code>webpack-cli</code>解析用户参数进行打包。默认会以 <code>src/index.js</code> 作为入口文件。</p><blockquote><p>这里也可以使用<code>npx webpack</code>,<code>npx</code> 是 5.2版本之后<code>npm</code>提供的命令可以执行<code>.bin</code>下的可执行文件</p></blockquote><p><img src="http://img.fullstackjavascript.cn/webpack1.png" alt=""></p><p>我们可以发现已经产生了<code>dist</code>目录，此目录为最终打包出的结果。<code>main.js</code>可以在html中直接引用,这里还提示我们默认<code>mode</code> 为<code>production</code></p><h3 id="3-2-webpack-config-js"><a href="#3-2-webpack-config-js" class="headerlink" title="3.2 webpack.config.js"></a>3.2 webpack.config.js</h3><p>我们打包时一般不会采用0配置，<code>webpack</code>在打包时默认会查找当前目录下的 <code>webpack.config.js or webpackfile.js</code> 文件。</p><p>通过配置文件进行打包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry:<span class="string">'./src/index.js'</span>,</span><br><span class="line">    output:&#123;</span><br><span class="line">        filename:<span class="string">'bundle.js'</span>, <span class="comment">// 打包出的结果文件</span></span><br><span class="line">        path:path.resolve(__dirname,<span class="string">'dist'</span>) <span class="comment">// 打包到dist目录下</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-配置打包的mode"><a href="#3-3-配置打包的mode" class="headerlink" title="3.3 配置打包的mode"></a>3.3 配置打包的mode</h3><p>我们需要在打包时提供<code>mode</code>属性来区分是开发环境还是生产环境,来实现配置文件的拆分</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">├── build</span><br><span class="line">│   ├── webpack.base.js</span><br><span class="line">│   ├── webpack.dev.js</span><br><span class="line">│   └── webpack.prod.js</span><br></pre></td></tr></table></figure><p><strong>我们可以通过指定不同的文件来进行打包</strong></p><p>配置<code>scripts</code>脚本</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "build": "webpack --config ./build/webpack.prod",</span><br><span class="line">  "dev": "webpack --config ./build/webpack.dev"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过 <code>config</code> 参数指定,使用哪个配置文件来进行打包 </p><p><strong>通过env参数区分</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "build": "webpack --env.production --config ./build/webpack.base",</span><br><span class="line">    "dev": "webpack --env.development --config ./build/webpack.base"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改造<code>webpack.base</code>文件默认导出函数，会将环境变量传入到函数的参数中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">env</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(env); <span class="comment">// &#123; development: true &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>合并配置文件</strong></p><p>我们可以判断当前环境是否是开发环境来加载不同的配置,这里我们需要做配置合并<br>安装<code>webpack-merge</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-merge --save-dev</span><br></pre></td></tr></table></figure><p><code>webpack.dev</code>配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode:<span class="string">'development'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>webpack.prod</code>配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode:<span class="string">'production'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>webpack.base</code>配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>);</span><br><span class="line"><span class="comment">// 开发环境</span></span><br><span class="line"><span class="keyword">const</span> dev = <span class="built_in">require</span>(<span class="string">'./webpack.dev'</span>);</span><br><span class="line"><span class="comment">// 生产环境</span></span><br><span class="line"><span class="keyword">const</span> prod = <span class="built_in">require</span>(<span class="string">'./webpack.prod'</span>);</span><br><span class="line"><span class="keyword">const</span> base = &#123; <span class="comment">// 基础配置</span></span><br><span class="line">    entry:<span class="string">'./src/index.js'</span>,</span><br><span class="line">    output:&#123;</span><br><span class="line">        filename:<span class="string">'bundle.js'</span>,</span><br><span class="line">        path:path.resolve(__dirname,<span class="string">'../dist'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">env</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(env.development)&#123;</span><br><span class="line">        <span class="keyword">return</span> merge(base,dev);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> merge(base,prod)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后续的开发中，我们会将公共的逻辑放到<code>base</code>中,开发和生产对的配置也分别进行存放！</p><h2 id="4-webpack-dev-server"><a href="#4-webpack-dev-server" class="headerlink" title="4.webpack-dev-server"></a>4.webpack-dev-server</h2><p>配置开发服务器，可以在实现在内存中打包,并且自动启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "build": "webpack --env.production --config ./build/webpack.base",</span><br><span class="line">    "dev": "webpack-dev-server --env.development --config ./build/webpack.base"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过执行<code>npm run dev</code>来启启动开发环境</p><p><img src="http://img.fullstackjavascript.cn/webpack2.png" alt=""></p><p>默认会在当前根目录下启动服务</p><p><strong>配置开发服务的配置</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode:<span class="string">'development'</span>,</span><br><span class="line">    devServer:&#123;</span><br><span class="line">        <span class="comment">// 更改静态文件目录位置</span></span><br><span class="line">        contentBase:path.resolve(__dirname,<span class="string">'../dist'</span>),</span><br><span class="line">        compress:<span class="literal">true</span>, <span class="comment">// 开启gzip</span></span><br><span class="line">        port:<span class="number">3000</span>, <span class="comment">// 更改端口号</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-打包Html插件"><a href="#5-打包Html插件" class="headerlink" title="5.打包Html插件"></a>5.打包Html插件</h2><h3 id="5-1-单入口打包"><a href="#5-1-单入口打包" class="headerlink" title="5.1 单入口打包"></a>5.1 单入口打包</h3><p>自动产生html，并引入打包后的文件</p><p>编辑<code>webpack.base</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line">plugins:[</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">        filename:<span class="string">'index.html'</span>, <span class="comment">// 打包出来的文件名</span></span><br><span class="line">        template:path.resolve(__dirname,<span class="string">'../public/index.html'</span>),</span><br><span class="line">        hash:<span class="literal">true</span>, <span class="comment">// 在引用资源的后面增加hash戳</span></span><br><span class="line">        minify:&#123;</span><br><span class="line">            removeAttributeQuotes:<span class="literal">true</span> <span class="comment">// 删除属性双引号</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="5-2-多入口打包"><a href="#5-2-多入口打包" class="headerlink" title="5.2 多入口打包"></a>5.2 多入口打包</h3><p>根据不同入口 生成多个js文件，引入到不同html中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">── src</span><br><span class="line">    ├── entry-1.js</span><br><span class="line">    └── entry-2.js</span><br></pre></td></tr></table></figure><p>多入口需要配置多个entry</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">entry:&#123;</span><br><span class="line">    jquery:[<span class="string">'jquery'</span>], <span class="comment">// 打包jquery</span></span><br><span class="line">    entry1:path.resolve(__dirname,<span class="string">'../src/entry-1.js'</span>),</span><br><span class="line">    entry2:path.resolve(__dirname,<span class="string">'../src/entry-2.js'</span>)</span><br><span class="line">&#125;,</span><br><span class="line">output:&#123;</span><br><span class="line">    filename:<span class="string">'[name].js'</span>,</span><br><span class="line">    path:path.resolve(__dirname,<span class="string">'../dist'</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>产生多个Html文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    filename:<span class="string">'index.html'</span>, </span><br><span class="line">    template:path.resolve(__dirname,<span class="string">'../public/template.html'</span>),</span><br><span class="line">    hash:<span class="literal">true</span>, </span><br><span class="line">    minify:&#123;</span><br><span class="line">        removeAttributeQuotes:<span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    chunks:[<span class="string">'jquery'</span>,<span class="string">'entry1'</span>], <span class="comment">// 引入的chunk 有jquery,entry</span></span><br><span class="line">&#125;),</span><br><span class="line"><span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    filename:<span class="string">'login.html'</span>,</span><br><span class="line">    template:path.resolve(__dirname,<span class="string">'../public/template.html'</span>),</span><br><span class="line">    hash:<span class="literal">true</span>,</span><br><span class="line">    minify:&#123;</span><br><span class="line">        removeAttributeQuotes:<span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    inject:<span class="literal">false</span>, <span class="comment">// inject 为false表示不注入js文件</span></span><br><span class="line">    chunksSortMode:<span class="string">'manual'</span>, <span class="comment">// 手动配置代码块顺序</span></span><br><span class="line">    chunks:[<span class="string">'entry2'</span>,<span class="string">'jquery'</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>以上的方式不是很优雅，每次都需要手动添加<code>HtmlPlugin</code>应该动态产生<code>html</code>文件，像这样:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> htmlPlugins = [</span><br><span class="line">  &#123;</span><br><span class="line">    entry: <span class="string">"entry1"</span>,</span><br><span class="line">    html: <span class="string">"index.html"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    entry: <span class="string">"entry2"</span>,</span><br><span class="line">    html: <span class="string">"login.html"</span></span><br><span class="line">  &#125;</span><br><span class="line">].map(</span><br><span class="line">  item =&gt;</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      filename: item.html,</span><br><span class="line">      template: path.resolve(__dirname, <span class="string">"../public/template.html"</span>),</span><br><span class="line">      hash: <span class="literal">true</span>,</span><br><span class="line">      minify: &#123;</span><br><span class="line">        removeAttributeQuotes: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      chunks: [<span class="string">"jquery"</span>, item.entry]</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line">plugins: [...htmlPlugins]</span><br></pre></td></tr></table></figure><h2 id="6-清空打包结果"><a href="#6-清空打包结果" class="headerlink" title="6.清空打包结果"></a>6.清空打包结果</h2><p>可以使用<code>clean-webpack-plugin</code>手动清除某个文件夹内容:</p><p><strong>安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev clean-webpack-plugin</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">new</span> CleanWebpackPlugin(&#123;</span><br><span class="line">    <span class="comment">// 清空匹配的路径</span></span><br><span class="line">    cleanOnceBeforeBuildPatterns: [path.resolve(<span class="string">'xxxx/*'</span>),<span class="string">'**/*'</span>],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样就可以清空指定的目录了,我们可以看到<code>webpack</code>插件的基本用法就是 <code>new Plugin</code>并且放到<code>plugins</code>中</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;转载自：珠峰培训&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;原文地址：&lt;a href=&quot;https://github.com/zhufengzhufeng/webpack-train&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="转载" scheme="http://blog.curtaintan.club/categories/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="webpack" scheme="http://blog.curtaintan.club/categories/%E8%BD%AC%E8%BD%BD/webpack/"/>
    
    
      <category term="webpack" scheme="http://blog.curtaintan.club/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>mobx与mobx-react实现todoList</title>
    <link href="http://blog.curtaintan.club/2020/02/11/mobx%E4%B8%8Emobx-react%E5%AE%9E%E7%8E%B0todoList/"/>
    <id>http://blog.curtaintan.club/2020/02/11/mobx%E4%B8%8Emobx-react%E5%AE%9E%E7%8E%B0todoList/</id>
    <published>2020-02-11T09:09:51.000Z</published>
    <updated>2020-02-15T09:35:29.527Z</updated>
    
    <content type="html"><![CDATA[<p>使用 mobx 结合 react 搭建的小 demo….</p><a id="more"></a><p>先看效果图：</p><p><fancybox><img src="https://image.gslb.dawnlab.me/330531fde85d66b06ad388bb580c1fcb.png" alt=""></fancybox></p><p><fancybox><img src="https://image.gslb.dawnlab.me/14ac7263bb6a30480b9833b07e708fb0.png" alt=""></fancybox></p><p>预览地址：<a href="https://curtaintan.github.io/mobx-todoList/react/" target="_blank" rel="noopener">TodoList</a><br>github 地址：<a href="https://github.com/curtainTan/mobx-todoList" target="_blank" rel="noopener">mobx-react — todoList</a></p><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>本文主要介绍 mobx-react 与 mobx 的使用，最后完成 todolist。</p><p>此 demo 全部用 class 组件搭建完成，如需使用 hooks ，请参考<a href="https://mobx-react.js.org/" target="_blank" rel="noopener">mobx与react-hooks</a></p><h1 id="2-环境准备"><a href="#2-环境准备" class="headerlink" title="2. 环境准备"></a>2. 环境准备</h1><p>需要在<a href="http://blog.curtaintan.club/2020/02/11/mobx-%E7%AE%80%E6%98%8E%E5%AD%A6%E4%B9%A0/">mobx—简明学习</a>的基础上。</p><p><strong>安装 react一套</strong>：</p><p><code>yarn add react react-dom prop-types</code></p><p><strong>安装 babel-react相关插件</strong></p><p><code>yarn add @babel/preset-react</code></p><p><strong>安装 mobx-react</strong></p><p><code>yarn add mobx-react</code></p><p><strong>配置 webpack.config.js 文件</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/3e9514b9386a865aef4f966afab7f411.png" alt=""></fancybox></p><p>配置完成，开始编写文件。</p><h1 id="3-mobx-react-说明："><a href="#3-mobx-react-说明：" class="headerlink" title="3. mobx-react 说明："></a>3. mobx-react 说明：</h1><p>看 <a href="https://github.com/mobxjs/mobx-react" target="_blank" rel="noopener">mobx-react 官方文档</a></p><p>可知有如下 api：</p><ol><li>observer(componentClass)</li><li>Observer —- Observer是一个React组件，它将观察者应用于组件中的匿名区域。</li><li>useLocalStore hook</li><li>useAsObservableSource hook</li><li>Server Side Rendering with useStaticRendering（服务端）</li><li>PropTypes</li><li>Provider and inject</li><li>disposeOnUnmount(componentInstance, propertyKey | function | function[])</li></ol><p>可见，有两种 api，一种是针对 componentClass 的，一种是针对 hooks 的。</p><p>我们使用 componentClass，所以主要用到：</p><ol><li>observer(componentClass)   使类重新render</li><li>PropTypes                  判定proptype</li><li>Provider and inject        提供 store 和 注入对应props</li></ol><p>具体的使用，请阅读 <strong><a href="https://github.com/mobxjs/mobx-react" target="_blank" rel="noopener"> 官方文档 </a></strong>， 官方文档写得蛮详细的。</p><h1 id="4-开始编写"><a href="#4-开始编写" class="headerlink" title="4. 开始编写"></a>4. 开始编写</h1><p>文件结构：<br><fancybox><img src="https://image.gslb.dawnlab.me/d3bc60216a0eeede72d6328d81258ed7.png" alt=""></fancybox></p><h2 id="4-1-store-js"><a href="#4-1-store-js" class="headerlink" title="4.1 store.js"></a>4.1 store.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observable, action, computed, observe &#125; <span class="keyword">from</span> <span class="string">"mobx"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span> </span>&#123;</span><br><span class="line">    id = <span class="built_in">Math</span>.random()</span><br><span class="line">    @observable title = <span class="string">""</span></span><br><span class="line">    @observable finished = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">constructor</span>( title )&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title</span><br><span class="line">    &#125;</span><br><span class="line">    @action.bound toggle()&#123;</span><br><span class="line">        <span class="keyword">this</span>.finished = !<span class="keyword">this</span>.finished</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">    @observable todos = []</span><br><span class="line">    disposers = []</span><br><span class="line">    @action.bound createTodo( title )&#123;</span><br><span class="line">        <span class="keyword">this</span>.todos.unshift( <span class="keyword">new</span> Todo( title ) )</span><br><span class="line">    &#125;</span><br><span class="line">    @computed <span class="keyword">get</span> left()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.todos.filter( <span class="function"><span class="params">todo</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> !todo.finished</span><br><span class="line">        &#125;).length</span><br><span class="line">    &#125;</span><br><span class="line">    @action.bound removeTodo( todo )&#123;</span><br><span class="line">        <span class="keyword">this</span>.todos.remove( todo )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        observe( <span class="keyword">this</span>.todos, change =&gt; &#123;</span><br><span class="line">            <span class="keyword">this</span>.disposers.forEach( <span class="function"><span class="params">disposer</span> =&gt;</span> disposer() )</span><br><span class="line">            <span class="keyword">this</span>.disposers = []</span><br><span class="line">            <span class="keyword">for</span>( <span class="keyword">let</span> todo <span class="keyword">of</span> change.object )&#123;</span><br><span class="line">                <span class="keyword">var</span> disposer = observe( todo, change =&gt; &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log( change )</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="keyword">this</span>.disposers.push( disposer )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Store()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ss = &#123;</span><br><span class="line">    store</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ss</span><br></pre></td></tr></table></figure><h2 id="4-2-index-jsx"><a href="#4-2-index-jsx" class="headerlink" title="4.2 index.jsx"></a>4.2 index.jsx</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span></span><br><span class="line"><span class="keyword">import</span> &#123; observer, Provider &#125; <span class="keyword">from</span> <span class="string">"mobx-react"</span></span><br><span class="line"><span class="keyword">import</span> &#123; trace &#125; <span class="keyword">from</span> <span class="string">"mobx"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> TodoHeader <span class="keyword">from</span> <span class="string">"./conponent/TodoHeader.jsx"</span></span><br><span class="line"><span class="keyword">import</span> TodoView <span class="keyword">from</span> <span class="string">"./conponent/TodoView.jsx"</span></span><br><span class="line"><span class="keyword">import</span> TodoFooter <span class="keyword">from</span> <span class="string">"./conponent/TodoFooter.jsx"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ss <span class="keyword">from</span> <span class="string">"./store.js"</span></span><br><span class="line"></span><br><span class="line">@observer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoList</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        trace()</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">"todo-list"</span> &gt;</span><br><span class="line">                &lt;TodoHeader /&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;TodoView /&gt;</span><br><span class="line">                &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">                &lt;TodoFooter /</span>&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render( (</span></span><br><span class="line"><span class="regexp">    &lt;Provider &#123; ...ss &#125; &gt;</span></span><br><span class="line"><span class="regexp">        &lt;TodoList /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/Provider&gt;</span></span><br><span class="line"><span class="regexp">), document.querySelector("#root") )</span></span><br></pre></td></tr></table></figure><h2 id="4-3-TodoFooter-jsx"><a href="#4-3-TodoFooter-jsx" class="headerlink" title="4.3 TodoFooter.jsx"></a>4.3 TodoFooter.jsx</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span></span><br><span class="line"><span class="keyword">import</span> &#123; observer, inject &#125; <span class="keyword">from</span> <span class="string">"mobx-react"</span></span><br><span class="line"><span class="keyword">import</span> &#123; trace &#125; <span class="keyword">from</span> <span class="string">"mobx"</span></span><br><span class="line"></span><br><span class="line">@inject( <span class="function"><span class="params">allStore</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        left: allStore.store.left</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">@observer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoFooter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        trace()</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;footer&gt;</span><br><span class="line">                &#123; <span class="keyword">this</span>.props.left &#125; items unfinished...</span><br><span class="line">            &lt;<span class="regexp">/footer&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default TodoFooter</span></span><br></pre></td></tr></table></figure><h2 id="4-4-TodoHeader-jsx"><a href="#4-4-TodoHeader-jsx" class="headerlink" title="4.4 TodoHeader.jsx"></a>4.4 TodoHeader.jsx</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span></span><br><span class="line"><span class="keyword">import</span> &#123; observer, inject &#125; <span class="keyword">from</span> <span class="string">"mobx-react"</span></span><br><span class="line"></span><br><span class="line">@inject( <span class="string">"store"</span> )</span><br><span class="line">@observer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoHeader</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        inputValue : <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleSubmit = <span class="function">(<span class="params"> e </span>) =&gt;</span> &#123;</span><br><span class="line">        e.preventDefault()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> store = <span class="keyword">this</span>.props.store</span><br><span class="line">        <span class="keyword">var</span> inputValue = <span class="keyword">this</span>.state.inputValue</span><br><span class="line"></span><br><span class="line">        store.createTodo( inputValue )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.setState(&#123; <span class="attr">inputValue</span>: <span class="string">""</span> &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    handleChange = <span class="function">(<span class="params"> e </span>) =&gt;</span> &#123;</span><br><span class="line">        e.persist()</span><br><span class="line">        <span class="keyword">var</span> inputValue = e.target.value</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            inputValue: inputValue</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;header&gt;</span><br><span class="line">                &lt;form onSubmit=&#123; <span class="keyword">this</span>.handleSubmit &#125; &gt;</span><br><span class="line">                    &lt;input </span><br><span class="line">                    type=<span class="string">"text"</span> </span><br><span class="line">                    onChange=&#123; e =&gt; <span class="keyword">this</span>.handleChange( e )&#125; </span><br><span class="line">                    value=&#123; <span class="keyword">this</span>.state.inputValue &#125;</span><br><span class="line">                    className=<span class="string">"input"</span></span><br><span class="line">                    placeholder=<span class="string">" what deeds to be finished? "</span></span><br><span class="line">                    /&gt;</span><br><span class="line">                &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>header&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> TodoHeader</span><br></pre></td></tr></table></figure><h2 id="4-5-TodoView-jsx"><a href="#4-5-TodoView-jsx" class="headerlink" title="4.5 TodoView.jsx"></a>4.5 TodoView.jsx</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, Fragment &#125; <span class="keyword">from</span> <span class="string">"react"</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">"prop-types"</span></span><br><span class="line"><span class="keyword">import</span> &#123; observer, inject &#125; <span class="keyword">from</span> <span class="string">"mobx-react"</span></span><br><span class="line"></span><br><span class="line">@inject( <span class="string">"store"</span> )</span><br><span class="line">@observer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoView</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">const</span> store = <span class="keyword">this</span>.props.store</span><br><span class="line">        <span class="keyword">const</span> &#123; todos &#125; = store</span><br><span class="line">        <span class="keyword">return</span> todos.map( <span class="function"><span class="params">todo</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                &lt;li key=&#123; todo.id &#125; className=<span class="string">"todo-item"</span>&gt;</span><br><span class="line">                    &lt;TodoItem todo=&#123; todo &#125; /&gt;</span><br><span class="line">                    &lt;span className=<span class="string">"delete"</span> onClick=&#123; e =&gt; store.removeTodo( todo ) &#125; &gt;X&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>li&gt;</span><br><span class="line">            )</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@observer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoItem</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">        todo: PropTypes.shape(&#123;</span><br><span class="line">            id: PropTypes.number.isRequired,</span><br><span class="line">            title: PropTypes.string.isRequired,</span><br><span class="line">            finished: PropTypes.bool.isRequired</span><br><span class="line">        &#125;).isRequired</span><br><span class="line">    &#125;</span><br><span class="line">    handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.props.todo.toggle()</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">const</span> todo = <span class="keyword">this</span>.props.todo</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;Fragment&gt;</span><br><span class="line">                &lt;input </span><br><span class="line">                type=<span class="string">"checkbox"</span> </span><br><span class="line">                className=<span class="string">"toggle"</span> </span><br><span class="line">                checked=&#123; todo.finished &#125; </span><br><span class="line">                onChange=&#123; <span class="keyword">this</span>.handleClick &#125; /&gt;</span><br><span class="line">                &lt;span className=&#123;[<span class="string">"title"</span>, todo.finished &amp;&amp; <span class="string">"finished"</span>].join(<span class="string">" "</span>)&#125; &gt;</span><br><span class="line">                    &#123; todo.title &#125;</span><br><span class="line">                &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>Fragment&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> TodoView</span><br></pre></td></tr></table></figure><h2 id="4-6-html-文件内添加-css-样式"><a href="#4-6-html-文件内添加-css-样式" class="headerlink" title="4.6 html 文件内添加 css 样式"></a>4.6 html 文件内添加 css 样式</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.input</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.todo-item</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.todo-item</span> <span class="selector-class">.toggle</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.todo-item</span> <span class="selector-class">.title</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.todo-item</span> <span class="selector-class">.title</span><span class="selector-class">.finished</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: line-through;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.todo-item</span> <span class="selector-class">.delete</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">footer</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">22px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-性能优化"><a href="#5-性能优化" class="headerlink" title="5. 性能优化"></a>5. 性能优化</h1><p><strong>提升性能三大法则：</strong></p><ol><li>细粒度拆分视图组件</li><li>使用专用组件处理列表</li><li>尽可能晚的结构可观察数据</li></ol><p>上面三大法则，你在上面的代码中，能找到在哪里吗？？</p><p>还有其他的优化点：</p><ol><li>尽早的绑定函数（不要传匿名函数和箭头函数）</li><li>不要使用数组的索引作为 key</li><li>使用小组件</li></ol><p>详情参考：<a href="https://cn.mobx.js.org/best/react-performance.html" target="_blank" rel="noopener">优化 React 组件渲染</a></p><h1 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h1><p>当得到一些点拨过后，再去阅读官方文档，就会收获更多，</p><p>当然也要学会阅读官方文档，官方文档写得都蛮好的。</p><p>写下这篇文章，也算是总结了一下 mobx 相关的知识.</p><p><strong>加油，写下这篇文章希望对你有帮助，与君共勉！！</strong></p><p>有时间，我会把 class 版本改成 hook 版本的。</p><h1 id="7-参考材料"><a href="#7-参考材料" class="headerlink" title="7. 参考材料"></a>7. 参考材料</h1><p><a href="https://www.imooc.com/video/17455" target="_blank" rel="noopener">茵风泳月–mobx入门基础教程</a></p><p><a href="https://cn.mobx.js.org/" target="_blank" rel="noopener">mobx—-官网</a></p><p><a href="https://github.com/mobxjs/mobx-react" target="_blank" rel="noopener">mobx-react 文档</a></p><p><a href="https://mobx-react.js.org/" target="_blank" rel="noopener">mobx-react 官方文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 mobx 结合 react 搭建的小 demo….&lt;/p&gt;
    
    </summary>
    
    
      <category term="mobx" scheme="http://blog.curtaintan.club/categories/mobx/"/>
    
    
      <category term="mobx" scheme="http://blog.curtaintan.club/tags/mobx/"/>
    
  </entry>
  
  <entry>
    <title>mobx--简明学习</title>
    <link href="http://blog.curtaintan.club/2020/02/11/mobx-%E7%AE%80%E6%98%8E%E5%AD%A6%E4%B9%A0/"/>
    <id>http://blog.curtaintan.club/2020/02/11/mobx-%E7%AE%80%E6%98%8E%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-02-11T06:19:41.000Z</published>
    <updated>2020-02-12T02:07:02.181Z</updated>
    
    <content type="html"><![CDATA[<p><fancybox><img src="https://image.gslb.dawnlab.me/6e7e66ff9996ffb60b60ef4706ceb9f2.png" alt=""></fancybox></p><p>mobx 简明学习与实践….</p><a id="more"></a><p><strong>前置环境准备：</strong>请参考：<strong><a href="http://blog.curtaintan.club/2020/02/10/es6-Decorator/">es6—Decorator</a></strong>,并使用 <code>yarn add mobx</code> 安装 mobx 模块。</p><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p><em>学习前，建议仔细阅读一遍 <strong><a href="https://cn.mobx.js.org/" target="_blank" rel="noopener">MobX 介绍</a></strong> 了解 mobx 运行机制。</em></p><p>先看 mobx 官网的文档目录：<br><fancybox><img src="https://image.gslb.dawnlab.me/ec3dc09eacd9da06d5254f2d0355517a.png" alt=""></fancybox></p><p>可以看到，整个库，需要我们学习的就只有三个主要的点：</p><ol><li>observable 相关 —– 创建观察数据</li><li>对 observables 作出响应 —– 数据改变时的响应操作</li><li>改变 observables</li></ol><p>还有一个工具函数。</p><h1 id="2-observable-相关-—-创建被观察数据"><a href="#2-observable-相关-—-创建被观察数据" class="headerlink" title="2. observable 相关 —- 创建被观察数据"></a>2. observable 相关 —- 创建被观察数据</h1><p>创建可观察数据的方式有两种：</p><ol><li>使用 observable 函数构建</li><li>使用 @observable 装饰类构建</li></ol><h2 id="2-1-使用-observable-函数构建"><a href="#2-1-使用-observable-函数构建" class="headerlink" title="2.1 使用 observable 函数构建"></a>2.1 使用 observable 函数构建</h2><figure class="highlight js"><figcaption><span>observable 函数构建可观察的数据</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> value = observable(<span class="string">"value"</span>)</span><br><span class="line"><span class="keyword">const</span> list = observable([<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>])</span><br><span class="line"><span class="keyword">const</span> map = observable.map(&#123; <span class="attr">key</span>: <span class="string">"value"</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 observable.box()</span></span><br><span class="line"><span class="keyword">const</span> cityName = observable.box(<span class="string">"tan"</span>)</span><br></pre></td></tr></table></figure><h2 id="2-1-使用-observable-装饰类构建"><a href="#2-1-使用-observable-装饰类构建" class="headerlink" title="2.1 使用 @observable 装饰类构建"></a>2.1 使用 @observable 装饰类构建</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">    @observable num = <span class="number">22</span></span><br><span class="line">    @observable str = <span class="string">"string"</span></span><br><span class="line">    @observable bool = <span class="literal">false</span></span><br><span class="line">    @observable obj = &#123;</span><br><span class="line">        name: <span class="string">"tan"</span>,</span><br><span class="line">        age: <span class="number">12</span></span><br><span class="line">    &#125;</span><br><span class="line">    @observable array = []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-对-observables-作出响应"><a href="#3-对-observables-作出响应" class="headerlink" title="3. 对 observables 作出响应"></a>3. 对 observables 作出响应</h1><p>有 4 个 api 处理响应：</p><ol><li>computed 和 @computed 函数内依赖的观察项改变时，自动执行，类似 vue 中的 computed</li><li>autorun( fn, { options } ): 函数内的依赖项改变时，自动执行</li><li>when( fn, fn ): 第一个函数内依赖项改变时执行第一个函数，第一个函数返回 true 时，执行第二个函数</li><li>reaction( fn, fn ): 第一个函数返回一个数组，数组中值的改变时，执行第二个函数</li></ol><p>observer 和 @observer 修饰 react 类，用于更新视图</p><p><strong>代码：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/12691c66d2e142ff96b024157e974bfe.png" alt=""></fancybox></p><p>代码放在文章尾部</p><p><strong>运行结果：</strong><br><fancybox><img src="https://image.gslb.dawnlab.me/3cb216864da9253115ef5c162a1d09c6.png" alt=""></fancybox></p><h1 id="4-action-–改变–-observables"><a href="#4-action-–改变–-observables" class="headerlink" title="4. action –改变– observables"></a>4. action –改变– observables</h1><p>我们可以直接通过 store 来修改属性，但是每一次属性的改变，响应操作都会执行，当我们需要一次性执多个属性的改变的时候，响应操作就会执行多次，但是我们只需要执行一次就够了，那怎么解决呢？？此时 action 就出场了。</p><p>action 主要有：</p><ol><li>action( fn ): fn — 创建一个 action 函数</li><li>@action - fn : 修饰类方法，使其变成 action 方法</li><li>@action.bound : 修饰类方法，绑定 this</li><li>runInAction(name?, thunk)： 直接运行 action 操作，搭配 @action 可执行异步</li></ol><p><strong>案例：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/14079b48e3c40c775f1c3c9c9d351800.png" alt=""></fancybox><br>代码放在文章底部</p><p><strong>测试结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/67b0553703743d9e422da1752a5b2d5b.png" alt=""></fancybox></p><h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h1><p><em>工具函数就自行看官方文档了。</em></p><p>对比着 mobx 的运行流程图：</p><p><fancybox><img src="https://image.gslb.dawnlab.me/6e7e66ff9996ffb60b60ef4706ceb9f2.png" alt=""></fancybox></p><p>我们就可以很轻易的理解各个 api 之间的关系了。</p><h1 id="6-参考材料"><a href="#6-参考材料" class="headerlink" title="6. 参考材料"></a>6. 参考材料</h1><p><a href="https://cn.mobx.js.org/" target="_blank" rel="noopener">mobx—-官网</a></p><p>推荐大家去观看此教程，非常好的教程。<br><a href="https://www.imooc.com/video/17455" target="_blank" rel="noopener">茵风泳月–mobx入门基础教程</a></p><h1 id="7-文中使用代码："><a href="#7-文中使用代码：" class="headerlink" title="7. 文中使用代码："></a>7. 文中使用代码：</h1><h2 id="测试相应的代码"><a href="#测试相应的代码" class="headerlink" title="测试相应的代码"></a>测试相应的代码</h2><figure class="highlight js"><figcaption><span>测试副作用</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observable, computed, autorun, when, reaction &#125; <span class="keyword">from</span> <span class="string">"mobx"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">    @observable num = <span class="number">22</span></span><br><span class="line">    @observable str = <span class="string">"string"</span></span><br><span class="line">    @observable bool = <span class="literal">false</span></span><br><span class="line">    @observable obj = &#123;</span><br><span class="line">        name: <span class="string">"tan"</span>,</span><br><span class="line">        age: <span class="number">12</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @computed <span class="keyword">get</span> mixed()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.obj.age + <span class="string">"-----"</span> + <span class="keyword">this</span>.str</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> store = <span class="keyword">new</span> Store()</span><br><span class="line"><span class="comment">// 测试 computed</span></span><br><span class="line"><span class="keyword">var</span> foo =  computed( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> store.str + <span class="string">"/"</span> + store.obj.age</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log( foo.get() )</span><br><span class="line"><span class="built_in">console</span>.log( store.mixed )</span><br><span class="line"></span><br><span class="line">foo.observe( <span class="function"><span class="keyword">function</span>(<span class="params"> change </span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"computed 值改变："</span> )</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"修改值："</span>, change )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试 autorun </span></span><br><span class="line">autorun( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"autorun运行："</span> )</span><br><span class="line">    <span class="built_in">console</span>.log( store.str + <span class="string">"/"</span> + store.obj.age )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试 wen</span></span><br><span class="line">when( <span class="function"><span class="params">()</span>=&gt;</span> store.bool , ()=&gt; <span class="built_in">console</span>.log( <span class="string">"变成 true 了..."</span> ) )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试 reaction</span></span><br><span class="line">reaction( <span class="function"><span class="params">()</span> =&gt;</span> [ store.str, store.obj.age ], </span><br><span class="line">          arr =&gt; <span class="built_in">console</span>.log( <span class="string">"reaction 运行："</span>,arr ) )</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"开始测试：------- wen ------"</span> )</span><br><span class="line">store.bool = <span class="literal">true</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"开始测试：------- 其他三个 ------"</span> )</span><br><span class="line">store.obj.age = <span class="number">13</span></span><br></pre></td></tr></table></figure><h2 id="测试-action"><a href="#测试-action" class="headerlink" title="测试 action"></a>测试 action</h2><figure class="highlight js"><figcaption><span>测试 action </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observable, action, reaction &#125; <span class="keyword">from</span> <span class="string">"mobx"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">    @observable num = <span class="number">22</span></span><br><span class="line">    @observable str = <span class="string">"string"</span></span><br><span class="line">    @observable bool = <span class="literal">false</span></span><br><span class="line">    @observable obj = &#123;</span><br><span class="line">        name: <span class="string">"tan"</span>,</span><br><span class="line">        age: <span class="number">12</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @action bar()&#123;</span><br><span class="line">        <span class="keyword">this</span>.str = <span class="string">"修改值了--"</span></span><br><span class="line">        <span class="keyword">this</span>.num = <span class="number">89</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> store = <span class="keyword">new</span> Store()</span><br><span class="line">reaction( <span class="function"><span class="params">()</span> =&gt;</span> [ store.str, store.obj.age ], </span><br><span class="line">         arr =&gt; <span class="built_in">console</span>.log( <span class="string">"reaction 运行："</span>,arr ) )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不用 action 改变值</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"不用 action 改变值："</span> )</span><br><span class="line">store.obj.age = <span class="number">11</span></span><br><span class="line">store.str = <span class="string">"你好---"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 @action</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"使用 action 修饰器改变多个值"</span> )</span><br><span class="line">store.bar()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 action   执行</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"使用 action 修饰器改变多个值"</span> )</span><br><span class="line">action( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    store.str = <span class="string">"ppppppp"</span></span><br><span class="line">    store.obj.age = <span class="number">45</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;fancybox&gt;&lt;img src=&quot;https://image.gslb.dawnlab.me/6e7e66ff9996ffb60b60ef4706ceb9f2.png&quot; alt=&quot;&quot;&gt;&lt;/fancybox&gt;&lt;/p&gt;
&lt;p&gt;mobx 简明学习与实践….&lt;/p&gt;
    
    </summary>
    
    
      <category term="mobx" scheme="http://blog.curtaintan.club/categories/mobx/"/>
    
    
      <category term="mobx" scheme="http://blog.curtaintan.club/tags/mobx/"/>
    
  </entry>
  
  <entry>
    <title>es6---Decorator</title>
    <link href="http://blog.curtaintan.club/2020/02/10/es6-Decorator/"/>
    <id>http://blog.curtaintan.club/2020/02/10/es6-Decorator/</id>
    <published>2020-02-10T08:17:56.000Z</published>
    <updated>2020-02-17T13:38:36.534Z</updated>
    
    <content type="html"><![CDATA[<p>搭建可使用 Decorator 的环境，并学习 Decorator 。</p><a id="more"></a><h1 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h1><ol><li>安装插件：</li></ol><p><strong>webpack ：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add webpack webpack-cli</span><br></pre></td></tr></table></figure><p><strong>babel ：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add @babel/cli @babel/core @babel/preset-env babel-loader</span><br></pre></td></tr></table></figure><p><strong>babel 装饰器相关插件：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add @babel/plugin-proposal-decorators babel-plugin-transform-<span class="class"><span class="keyword">class</span>-<span class="title">properties</span></span></span><br></pre></td></tr></table></figure><p><strong>webpack.config.js 配置</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/6daf0e45f415f634d1d7e6fd084f9054.png" alt=""></fancybox></p><p>配置代码放在文章末尾。</p><p><strong>配置 package.json</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"webpack"</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>环境配置完毕，运行 <code>yarn dev</code> 就可以将文件编译好。</p><p>新建一个html文件，引入编译好的 js 文件，环境配置基本完成。</p><p><strong>目录结构：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/ad660f54c86b4d30f9fe7d93c7f3483a.png" alt=""></fancybox></p><h1 id="2-开始书写代码"><a href="#2-开始书写代码" class="headerlink" title="2. 开始书写代码"></a>2. 开始书写代码</h1><p>编写 bundle.js</p><h2 id="2-1-类的装饰："><a href="#2-1-类的装饰：" class="headerlink" title="2.1 类的装饰："></a>2.1 类的装饰：</h2><p><strong>代码设计：</strong><br><fancybox><img src="https://image.gslb.dawnlab.me/0653a511ca0ddb772e26aa5bf1d669b6.png" alt=""></fancybox></p><p><strong>运行结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/2de3ec69dcadd741363c8900ad824c22.png" alt=""></fancybox></p><h2 id="2-2-类方法的修饰"><a href="#2-2-类方法的修饰" class="headerlink" title="2.2 类方法的修饰"></a>2.2 类方法的修饰</h2><p><strong>代码设计：</strong><br><fancybox><img src="https://image.gslb.dawnlab.me/dc114028d6ae3eceb45a0dfdf92ee224.png" alt=""></fancybox></p><p><strong>运行结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/97f7d88203ca25ced8007e485edb6b72.png" alt=""></fancybox></p><h2 id="2-2-类属性的修饰"><a href="#2-2-类属性的修饰" class="headerlink" title="2.2 类属性的修饰"></a>2.2 类属性的修饰</h2><p><strong>代码设计：</strong><br><fancybox><img src="https://image.gslb.dawnlab.me/77917f3081af6e5790e9d41fc217aea7.png" alt=""></fancybox></p><p><strong>运行结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/ecf3285bee122202661e7b9f28be9b5d.png" alt=""></fancybox></p><p><strong>注：</strong></p><p>可以在 js 文件头部编写 <code>&quot;use strict&quot;</code>来使用严格模式，</p><p>使用严格模式后，当修改不可修改的属性时，就会打断操作并报错。</p><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h1><p>装饰器不能用修饰函数，因为函数存在变量提升。</p><h1 id="4-参考材料"><a href="#4-参考材料" class="headerlink" title="4. 参考材料"></a>4. 参考材料</h1><p><a href="https://www.imooc.com/video/17455" target="_blank" rel="noopener">茵风泳月–mobx入门基础教程</a></p><p><a href="http://es6.ruanyifeng.com/#docs/decorator#%E7%B1%BB%E7%9A%84%E8%A3%85%E9%A5%B0" target="_blank" rel="noopener">阮一峰–es6 基础入门</a></p><h1 id="5-代码"><a href="#5-代码" class="headerlink" title="5. 代码"></a>5. 代码</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义类修饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"> target </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> desc = <span class="built_in">Object</span>.getOwnPropertyDescriptors( target.prototype )</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">const</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys( desc ) )&#123;</span><br><span class="line">        <span class="keyword">if</span>( key === <span class="string">"constuctor"</span> )&#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> func = desc[key].value</span><br><span class="line">        <span class="keyword">if</span>( <span class="keyword">typeof</span> func === <span class="string">"function"</span> )&#123;</span><br><span class="line">            <span class="built_in">Object</span>.defineProperty( target.prototype, key, &#123;</span><br><span class="line">                value( ...arg )&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log( <span class="string">"加之前"</span>, key )</span><br><span class="line">                    <span class="keyword">const</span> ret = func.apply( <span class="keyword">this</span>, arg )</span><br><span class="line">                    <span class="built_in">console</span>.log( <span class="string">"相加----结果："</span>, ret )</span><br><span class="line">                    <span class="built_in">console</span>.log( <span class="string">"加之后"</span>, key )</span><br><span class="line">                    <span class="keyword">return</span> ret</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 属性修饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readonly</span>(<span class="params"> target, key, desc </span>)</span>&#123;</span><br><span class="line">    desc.writable = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法修饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validate</span>(<span class="params"> target, key, desc </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> func = desc.value</span><br><span class="line">    desc.value = <span class="function"><span class="keyword">function</span>(<span class="params"> ...arg </span>)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">let</span> num <span class="keyword">of</span> arg )&#123;</span><br><span class="line">            <span class="keyword">if</span>( <span class="keyword">typeof</span> num !== <span class="string">"number"</span> )&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`"<span class="subst">$&#123; num &#125;</span> " 不是一个数字..`</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">"函数里面的装饰器-----函数的操作---"</span> )</span><br><span class="line">        <span class="keyword">return</span> func.apply( <span class="keyword">this</span>, [ <span class="number">4</span>, <span class="number">7</span> ] )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@log</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Numberic</span> </span>&#123;</span><br><span class="line">    @readonly PI = <span class="number">3.1315926</span></span><br><span class="line">    <span class="comment">// 修饰方法</span></span><br><span class="line">    add( ...nums )&#123;</span><br><span class="line">        <span class="keyword">return</span> nums.reduce( <span class="function">(<span class="params"> p, n </span>) =&gt;</span> ( p + n ), <span class="number">0</span> )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="keyword">new</span> Numberic().add( <span class="number">1</span>, <span class="number">2</span> ) )</span><br><span class="line"><span class="keyword">var</span> ss =  <span class="keyword">new</span> Numberic()</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"修改数据前："</span>, ss )</span><br><span class="line">ss.PI = <span class="number">99</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"修改数据后："</span>, ss )</span><br></pre></td></tr></table></figure><h2 id="5-1-环境配置代码："><a href="#5-1-环境配置代码：" class="headerlink" title="5.1 环境配置代码："></a>5.1 环境配置代码：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    mode: <span class="string">"development"</span>,</span><br><span class="line">    <span class="comment">// 入口文件</span></span><br><span class="line">    entry: path.resolve( __dirname, <span class="string">"./src/mobx.js"</span> ),</span><br><span class="line">    <span class="comment">// 打包输出文件</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve( __dirname, <span class="string">"mobx"</span> ),</span><br><span class="line">        filename: <span class="string">"main.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                use: &#123;</span><br><span class="line">                    loader: <span class="string">"babel-loader"</span>,</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        presets: [ <span class="string">"@babel/preset-env"</span> ],</span><br><span class="line">                        <span class="comment">// 配置 babel 插件</span></span><br><span class="line">                        plugins: [ </span><br><span class="line">                            [<span class="string">"@babel/plugin-proposal-decorators"</span>, &#123; <span class="string">"legacy"</span>: <span class="literal">true</span> &#125;], </span><br><span class="line">                            <span class="string">"transform-class-properties"</span></span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 配置 map 文件</span></span><br><span class="line">    devtool: <span class="string">"inline-source-map"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;搭建可使用 Decorator 的环境，并学习 Decorator 。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://blog.curtaintan.club/categories/JavaScript/"/>
    
    
      <category term="js基础" scheme="http://blog.curtaintan.club/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>设计模式（五）---装饰器模式</title>
    <link href="http://blog.curtaintan.club/2020/02/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%94%EF%BC%89-%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://blog.curtaintan.club/2020/02/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%94%EF%BC%89-%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-02-10T07:46:53.000Z</published>
    <updated>2020-02-10T08:14:24.701Z</updated>
    
    <content type="html"><![CDATA[<p><fancybox><img src="https://image.gslb.dawnlab.me/124991d344285d28139138d6d1a00a7d.png" alt=""></fancybox></p><p>手写一个装饰器模式。</p><a id="more"></a><h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h1><p><strong>装饰器模式的目的：</strong></p><ol><li>为对象添加新功能</li><li>不改变其原有的结构和功能</li></ol><h1 id="2-代码演示"><a href="#2-代码演示" class="headerlink" title="2. 代码演示"></a>2. 代码演示</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    draw() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"画一个圆形"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(circle)&#123;</span><br><span class="line">        <span class="keyword">this</span>.circle = circle;</span><br><span class="line">    &#125;</span><br><span class="line">    draw() &#123;</span><br><span class="line">        <span class="keyword">this</span>.circle.draw();</span><br><span class="line">        <span class="keyword">this</span>.setRedBorder(<span class="keyword">this</span>.circle);</span><br><span class="line">    &#125;</span><br><span class="line">    setBorder(circle) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"设置边框"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试代码</span></span><br><span class="line"><span class="keyword">let</span> circle = <span class="keyword">new</span> Circle();</span><br><span class="line"><span class="keyword">let</span> dec = <span class="keyword">new</span> Decorator(circle);</span><br><span class="line">dec.setRedBorder();</span><br></pre></td></tr></table></figure><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h1><p>装饰器小情景：手机又照相的功能，我们可以在手机摄像头前装饰一个放大镜，手机在具有照相的基础还有放大的功能。</p><p><strong>本质：</strong>在执行真正的操作前后，可以进行其他的操作</p><h1 id="4-参考材料"><a href="#4-参考材料" class="headerlink" title="4. 参考材料"></a>4. 参考材料</h1><p><a href="https://github.com/MuYunyun/blog/blob/master/BasicSkill/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F.md" target="_blank" rel="noopener">装饰者模式</a></p><p><a href="https://www.jianshu.com/p/398f0e8f2699" target="_blank" rel="noopener">JS设计模式-装饰器模式</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;fancybox&gt;&lt;img src=&quot;https://image.gslb.dawnlab.me/124991d344285d28139138d6d1a00a7d.png&quot; alt=&quot;&quot;&gt;&lt;/fancybox&gt;&lt;/p&gt;
&lt;p&gt;手写一个装饰器模式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://blog.curtaintan.club/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式（四）---发布订阅模式</title>
    <link href="http://blog.curtaintan.club/2020/02/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%9B%EF%BC%89-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://blog.curtaintan.club/2020/02/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%9B%EF%BC%89-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-02-09T06:56:37.000Z</published>
    <updated>2020-02-09T13:40:31.851Z</updated>
    
    <content type="html"><![CDATA[<p><fancybox><img src="https://image.gslb.dawnlab.me/03749b735b8f8f8ea84314ccbf236dbb.png" alt=""></fancybox></p><p>我看了很多关于发布订阅模式与观察者模式的文章，有点朋友认为观察者模式就是发布订阅模式，根据我看了这么多的文章的总结，他们确实是不一样的。</p><p>在vue中，emit和on方法。他们都似乎不约而同的自带了发布订阅属性一般，让开发变得更加高效好用起来。</p><p>今天就写一个发布订阅。</p><a id="more"></a><h1 id="1-情景模拟："><a href="#1-情景模拟：" class="headerlink" title="1. 情景模拟："></a>1. 情景模拟：</h1><p>当我们在注册虎扑的时候，软件会让我们选择我们感兴趣的板块，例如：唱、跳、rap、篮球…..</p><p>当我们选择自己喜欢的版块时，我们就订阅了相关板块的消息。</p><p>当此板块内有热门消息时，虎扑就会给我们推送此消息，他不会把其他板块的消息推送给我们。</p><h1 id="2-分析："><a href="#2-分析：" class="headerlink" title="2. 分析："></a>2. 分析：</h1><p>我们可以抽象出三个对象，一个发布者，一个调度中心，一个订阅者</p><p>发布者：我就是在不同板块发送热门消息的</p><p>调度中心：存下所有板块，与板块对应的订阅者</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个函数：接收消息并给相关板块所有的订阅者发送消息</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个函数：移除订阅者</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个函数：添加订阅者</p><p>订阅者：自己的属性</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个函数：订阅消息</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个函数：取消订阅消息</p><p>画出 UML 类图就是文章前的图片。</p><h1 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h1><p><fancybox><img src="https://image.gslb.dawnlab.me/584ee200caf26a8c25c9ec5232c3996b.png" alt=""></fancybox></p><p>真实代码放在文章末尾。</p><p><strong>结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/122ac8c8cbcff112954ff8a7cd4063a1.png" alt=""></fancybox></p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h1><p><strong>什么是发布订阅模式：</strong></p><blockquote><p>发布-订阅是一种消息范式，消息的发送者（称为发布者）不会将消息直接发送给特定的接收者（称为订阅者）。而是将发布的消息分为不同的类别，无需了解哪些订阅者（如果有的话）可能存在。同样的，订阅者可以表达对一个或多个类别的兴趣，只接收感兴趣的消息，无需了解哪些发布者（如果有的话）存在。</p><footer><strong>维基百科</strong><cite><a href="https://zh.wikipedia.org/wiki/%E5%8F%91%E5%B8%83/%E8%AE%A2%E9%98%85" target="_blank" rel="noopener">zh.wikipedia.org/wiki/%E5%8F%91%E5%B8%83/%E8%AE%A2%E9%98%85</a></cite></footer></blockquote><p><strong>说说我的理解：</strong></p><p>发布订阅模式可以理解成三个对象，一个是发布者，一个是订阅者，一个是调度中心。</p><p>为什么需要一个调度中心？因为订阅者的订阅是有一定要求的，而不是接收所有发布的消息，</p><p>所以调度中心就是将消息分别发送给订阅者。订阅者不会接收到没有订阅的消息。</p><p><strong>观察者模式：</strong></p><p>观察者只有两个对象，一个观察者、一个被观察者，被观察者只要作出变化（不论什么变化），所有的观察者都会接受到消息。</p><h1 id="5-参考材料"><a href="#5-参考材料" class="headerlink" title="5. 参考材料"></a>5. 参考材料</h1><p><a href="https://juejin.im/post/5b125ad3e51d450688133f22#heading-1" target="_blank" rel="noopener">发布订阅模式，在工作中它的能量超乎你的想象</a></p><p><a href="https://juejin.im/post/5bb1bb616fb9a05d2b6dccfa" target="_blank" rel="noopener">谈谈观察者模式和发布订阅模式</a></p><p><a href="https://blog.csdn.net/a469516684/article/details/86082844" target="_blank" rel="noopener">EventBus—思考观察者模式与发布订阅者模式</a></p><p><a href="https://juejin.im/post/5b2e65fee51d4558df370532" target="_blank" rel="noopener">JavaScript中发布/订阅模式的理解</a></p><h1 id="6-代码："><a href="#6-代码：" class="headerlink" title="6. 代码："></a>6. 代码：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发布者   传入调度中心实例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Publisher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>( dispatch )&#123;</span><br><span class="line">        <span class="keyword">this</span>.dispatch = dispatch</span><br><span class="line">    &#125;</span><br><span class="line">    publish()&#123;</span><br><span class="line">        <span class="keyword">let</span> arg = <span class="built_in">Array</span>.from( <span class="built_in">arguments</span> )</span><br><span class="line">        <span class="keyword">let</span> event = arg.shift()</span><br><span class="line">        <span class="keyword">this</span>.dispatch.emit( event, arg )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调度中心</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dispatcher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.eventObj = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    on( event, fn )&#123;</span><br><span class="line">        <span class="keyword">if</span>( !<span class="keyword">this</span>.eventObj[event] )&#123;</span><br><span class="line">            <span class="keyword">this</span>.eventObj[event] = []</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.eventObj[event].push( fn )</span><br><span class="line">    &#125;</span><br><span class="line">    emit( type, arg )&#123;</span><br><span class="line">        <span class="keyword">let</span> funs = <span class="keyword">this</span>.eventObj[type]</span><br><span class="line">        <span class="keyword">if</span>( !funs || funs.length === <span class="number">0</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        funs.forEach( <span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            item.apply( <span class="keyword">this</span>, arg )</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    remove( type, fn )&#123;</span><br><span class="line">        <span class="keyword">let</span> fns = <span class="keyword">this</span>.eventObj[ type ]</span><br><span class="line">        <span class="keyword">if</span>( !fns ) <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span>( !fn )&#123;</span><br><span class="line">            <span class="keyword">delete</span> <span class="keyword">this</span>.eventObj[type]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.eventObj[ type ] = fns.filter( <span class="function"><span class="params">item</span> =&gt;</span> item !== fn )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 订阅者类   传入 dispatch 和 自己的属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subscriber</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>( dispatch, name )&#123;</span><br><span class="line">        <span class="keyword">this</span>.dispatch = dispatch</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    fn = <span class="function">(<span class="params"> msg </span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">`我是<span class="subst">$&#123; <span class="keyword">this</span>.name &#125;</span>:`</span> ,<span class="string">"收到订阅的消息："</span>, msg )</span><br><span class="line">    &#125;</span><br><span class="line">    subscrib( type, fn )&#123;</span><br><span class="line">        <span class="keyword">this</span>.dispatch.on( type, fn, <span class="keyword">this</span> )</span><br><span class="line">    &#125;</span><br><span class="line">    removeSubscrib( type, fn )&#123;</span><br><span class="line">        <span class="keyword">this</span>.dispatch.remove( type, fn )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">let</span> dispatch = <span class="keyword">new</span> Dispatcher()</span><br><span class="line"><span class="keyword">let</span> pub = <span class="keyword">new</span> Publisher( dispatch )</span><br><span class="line"><span class="keyword">let</span> sub1 = <span class="keyword">new</span> Subscriber( dispatch, <span class="string">"sub1"</span> )</span><br><span class="line"><span class="keyword">let</span> sub2 = <span class="keyword">new</span> Subscriber( dispatch, <span class="string">"sub2"</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅消息</span></span><br><span class="line">sub1.subscrib( <span class="string">"篮球"</span>, sub1.fn )</span><br><span class="line">sub2.subscrib( <span class="string">"篮球"</span>, sub2.fn )</span><br><span class="line">sub2.subscrib( <span class="string">"足球"</span>, sub2.fn )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布消息</span></span><br><span class="line">pub.publish( <span class="string">"篮球"</span>, <span class="string">"乔丹去世了---"</span> )</span><br><span class="line">pub.publish( <span class="string">"足球"</span>, <span class="string">"国足能进世界杯吗？？"</span> )</span><br><span class="line"><span class="comment">// 取消订阅</span></span><br><span class="line">sub1.removeSubscrib( <span class="string">"篮球"</span>, sub1.fn )</span><br><span class="line">pub.publish( <span class="string">"篮球"</span>, <span class="string">"这里有一些NBA相关的信息"</span> )</span><br></pre></td></tr></table></figure><h2 id="通用代码："><a href="#通用代码：" class="headerlink" title="通用代码："></a>通用代码：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> event = &#123;</span><br><span class="line">    list: &#123;&#125;,</span><br><span class="line">    on(key, fn) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.list[key]) &#123;</span><br><span class="line">            <span class="keyword">this</span>.list[key] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.list[key].push(fn);</span><br><span class="line">    &#125;,</span><br><span class="line">    emit() &#123;</span><br><span class="line">        <span class="keyword">let</span> key = [].shift.call(<span class="built_in">arguments</span>),</span><br><span class="line">            fns = <span class="keyword">this</span>.list[key];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!fns || fns.length === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fns.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> &#123;</span><br><span class="line">            fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    remove(key, fn) &#123;</span><br><span class="line">        <span class="comment">// 这回我们加入了取消订阅的方法</span></span><br><span class="line">        <span class="keyword">let</span> fns = <span class="keyword">this</span>.list[key];</span><br><span class="line">        <span class="comment">// 如果缓存列表中没有函数，返回false</span></span><br><span class="line">        <span class="keyword">if</span> (!fns) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 如果没有传对应函数的话</span></span><br><span class="line">        <span class="comment">// 就会将key值对应缓存列表中的函数都清空掉</span></span><br><span class="line">        <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">            fns &amp;&amp; (fns.length = <span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 遍历缓存列表，看看传入的fn与哪个函数相同</span></span><br><span class="line">            <span class="comment">// 如果相同就直接从缓存列表中删掉即可</span></span><br><span class="line">            fns.forEach(<span class="function">(<span class="params">cb, i</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (cb === fn) &#123;</span><br><span class="line">                    fns.splice(i, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cat</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'一起喵喵喵'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'一起旺旺旺'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">event.on(<span class="string">'pet'</span>, data =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'接收数据'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br><span class="line">event.on(<span class="string">'pet'</span>, cat);</span><br><span class="line">event.on(<span class="string">'pet'</span>, dog);</span><br><span class="line"><span class="comment">// 取消dog方法的订阅</span></span><br><span class="line">event.remove(<span class="string">'pet'</span>, dog);</span><br><span class="line"><span class="comment">// 发布</span></span><br><span class="line">event.emit(<span class="string">'pet'</span>, [<span class="string">'二哈'</span>, <span class="string">'波斯猫'</span>]);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    接收数据</span></span><br><span class="line"><span class="comment">    [ '二哈', '波斯猫' ]</span></span><br><span class="line"><span class="comment">    一起喵喵喵</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>摘自：</strong></p><p><strong><a href="https://juejin.im/post/5b125ad3e51d450688133f22#heading-4" target="_blank" rel="noopener">发布订阅模式，在工作中它的能量超乎你的想象</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;fancybox&gt;&lt;img src=&quot;https://image.gslb.dawnlab.me/03749b735b8f8f8ea84314ccbf236dbb.png&quot; alt=&quot;&quot;&gt;&lt;/fancybox&gt;&lt;/p&gt;
&lt;p&gt;我看了很多关于发布订阅模式与观察者模式的文章，有点朋友认为观察者模式就是发布订阅模式，根据我看了这么多的文章的总结，他们确实是不一样的。&lt;/p&gt;
&lt;p&gt;在vue中，emit和on方法。他们都似乎不约而同的自带了发布订阅属性一般，让开发变得更加高效好用起来。&lt;/p&gt;
&lt;p&gt;今天就写一个发布订阅。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://blog.curtaintan.club/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式（三）--代理模式</title>
    <link href="http://blog.curtaintan.club/2020/02/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%89%EF%BC%89-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://blog.curtaintan.club/2020/02/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%89%EF%BC%89-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-02-08T13:08:41.000Z</published>
    <updated>2020-02-09T14:46:30.384Z</updated>
    
    <content type="html"><![CDATA[<p><fancybox><img src="https://image.gslb.dawnlab.me/8151655788e5ad17587fdc36a060bfb2.png" alt=""></fancybox></p><p>写一个代理模式.</p><a id="more"></a><h1 id="1-情景"><a href="#1-情景" class="headerlink" title="1. 情景"></a>1. 情景</h1><p>情景: 小明追女生 A</p><ul><li>非代理模式: 小明 =花=&gt; 女生A</li><li>代理模式: 小明 =花=&gt; 让女生A的好友B帮忙 =花=&gt; 女生A</li></ul><h1 id="2-代理模式的特点"><a href="#2-代理模式的特点" class="headerlink" title="2. 代理模式的特点"></a>2. 代理模式的特点</h1><ul><li>代理对象和本体对象具有一致的接口, 对使用者友好</li></ul><blockquote><p>常用的虚拟代理形式：某一个花销很大的操作，可以通过虚拟代理的方式延迟到这种需要它的时候才去创建（例：使用虚拟代理实现图片懒加载）<br>图片懒加载的方式：先通过一张loading图占位，然后通过异步的方式加载图片，等图片加载好了再把完成的图片加载到img标签里面。</p><footer><strong>考拉海购前端团队</strong><cite><a href="https://juejin.im/post/59df4f74f265da430f311909" target="_blank" rel="noopener">juejin.im/post/59df4f74f265da430f311909</a></cite></footer></blockquote><h1 id="3-代码设计"><a href="#3-代码设计" class="headerlink" title="3. 代码设计"></a>3. 代码设计</h1><p><fancybox><img src="https://image.gslb.dawnlab.me/1477504b420fce64b3cd68ebed8e9c00.png" alt=""></fancybox></p><h1 id="4-es6-代理模式-—-Proxy"><a href="#4-es6-代理模式-—-Proxy" class="headerlink" title="4. es6 代理模式 —- Proxy"></a>4. es6 代理模式 —- Proxy</h1><p><strong>目的：在操作前可以进行其他的操作（对数据加工等）。</strong></p><p><strong>代码设计</strong><br><fancybox><img src="https://image.gslb.dawnlab.me/017a9c46002a617e370af1ffc6a158ec.png" alt=""></fancybox></p><p><strong>运行结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/60e895dd1bc44e25965c0350cd5a0efe.png" alt=""></fancybox></p><p>案例参考：</p><ul><li><a href="https://juejin.im/post/5a5227ce6fb9a01c927e85c4" target="_blank" rel="noopener">ES6中的代理模式—–Proxy</a></li><li><a href="http://es6.ruanyifeng.com/#docs/proxy" target="_blank" rel="noopener">阮一峰– es6 入门</a></li></ul><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h1><p>代理模式，总的来说，是在操作前，可以进行其他的操作。</p><h1 id="5-参考材料"><a href="#5-参考材料" class="headerlink" title="5. 参考材料"></a>5. 参考材料</h1><p><a href="https://github.com/MuYunyun/blog/blob/master/BasicSkill/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.md" target="_blank" rel="noopener">BasicSkill–代理模式</a></p><p><a href="https://juejin.im/post/59df4f74f265da430f311909#heading-2" target="_blank" rel="noopener">JavaScript设计模式</a></p><p><a href="https://www.cnblogs.com/mn6364/p/10990874.html" target="_blank" rel="noopener">js –代理模式</a></p><h1 id="6-代码"><a href="#6-代码" class="headerlink" title="6. 代码"></a>6. 代码</h1><figure class="highlight js"><figcaption><span>图片懒加载</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 真实的对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealImg</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.imgNode = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>)</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild( <span class="keyword">this</span>.imgNode )</span><br><span class="line">    &#125;</span><br><span class="line">    setSrc( src )&#123;</span><br><span class="line">        <span class="keyword">this</span>.imgNode.src = src</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 代理对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyImg</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.realImg = <span class="keyword">new</span> RealImg()</span><br><span class="line">    &#125;</span><br><span class="line">    setSrc( src )&#123;</span><br><span class="line">        <span class="keyword">this</span>.realImg.setSrc(<span class="string">"http://seopic.699pic.com/photo/40007/8839.jpg_wh1200.jpg"</span>)</span><br><span class="line">        <span class="keyword">let</span> img = <span class="keyword">new</span> Image()</span><br><span class="line">        img.src = src</span><br><span class="line">        img.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.realImg.setSrc( src )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> proxyImg = <span class="keyword">new</span> ProxyImg()</span><br><span class="line">proxyImg.setSrc( <span class="string">"http://seopic.699pic.com/photo/40006/7735.jpg_wh1200.jpg"</span> )</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;fancybox&gt;&lt;img src=&quot;https://image.gslb.dawnlab.me/8151655788e5ad17587fdc36a060bfb2.png&quot; alt=&quot;&quot;&gt;&lt;/fancybox&gt;&lt;/p&gt;
&lt;p&gt;写一个代理模式.&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://blog.curtaintan.club/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式（二）--观察者模式</title>
    <link href="http://blog.curtaintan.club/2020/02/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://blog.curtaintan.club/2020/02/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-02-08T08:21:01.000Z</published>
    <updated>2020-02-08T09:33:31.663Z</updated>
    
    <content type="html"><![CDATA[<p><fancybox><img src="https://image.gslb.dawnlab.me/97ffbb5c36692b1f63a62b517db84ff8.png" alt=""></fancybox></p><p>写一个观察者模式。</p><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><strong>意图：</strong> 定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</p><p><strong>主要解决：</strong> 一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作。</p><p><strong>何时使用：</strong> 一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知，进行广播通知。</p><p><strong>关键代码：</strong> 在抽象类里有一个 ArrayList&lt;\Observer&gt; 存放观察者们。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight js"><figcaption><span>观察者模式</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 观察者模式</span></span><br><span class="line"><span class="comment"> * state 状态</span></span><br><span class="line"><span class="comment"> * observers &#123; Observer &#125;  保存所有的观察者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = <span class="number">0</span></span><br><span class="line">        <span class="keyword">this</span>.observers = []</span><br><span class="line">    &#125;</span><br><span class="line">    getState()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.state</span><br><span class="line">    &#125;</span><br><span class="line">    setState( state )&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state</span><br><span class="line">        <span class="keyword">this</span>.notifyAllObservers()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通知所有的观察者</span></span><br><span class="line">    notifyAllObservers()&#123;</span><br><span class="line">        <span class="keyword">this</span>.observers.forEach( <span class="function"><span class="params">observer</span> =&gt;</span> &#123;</span><br><span class="line">            observer.update()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加观察者</span></span><br><span class="line">    attach( observer )&#123;</span><br><span class="line">        <span class="keyword">this</span>.observers.push( observer )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 观察者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>( name, subject )&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">        <span class="keyword">this</span>.subject = subject</span><br><span class="line">        <span class="keyword">this</span>.subject.attach( <span class="keyword">this</span> )</span><br><span class="line">    &#125;</span><br><span class="line">    update()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">`<span class="subst">$&#123; <span class="keyword">this</span>.name &#125;</span> -- update, state: <span class="subst">$&#123; <span class="keyword">this</span>.subject.getState() &#125;</span>`</span> )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> Subject()</span><br><span class="line"><span class="keyword">let</span> o1 = <span class="keyword">new</span> Observer( <span class="string">"o1"</span>, s )</span><br><span class="line"><span class="keyword">let</span> o2 = <span class="keyword">new</span> Observer( <span class="string">"o2"</span>, s )</span><br><span class="line"></span><br><span class="line">s.setState( <span class="number">11</span> )</span><br><span class="line">s.setState( <span class="number">12</span> )</span><br><span class="line"><span class="built_in">console</span>.log( s )</span><br></pre></td></tr></table></figure><p><strong>测试结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/a7763467be0e62af3e014f19169dbf1c.png" alt=""></fancybox></p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>观察者模式的要点主要是将观察者放在被观察者里面，当状态变化后，就依次通知观察者。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://juejin.im/post/5cb534386fb9a0685727e1eb#heading-72" target="_blank" rel="noopener">超全的设计模式简介（45种）—观察者模式</a></p><p><a href="https://juejin.im/post/5afe6430518825428630bc4d" target="_blank" rel="noopener">JavaScript 中常见设计模式整理</a></p><p><a href="https://juejin.im/post/5bb1bb616fb9a05d2b6dccfa" target="_blank" rel="noopener">谈谈观察者模式和发布订阅模式</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;fancybox&gt;&lt;img src=&quot;https://image.gslb.dawnlab.me/97ffbb5c36692b1f63a62b517db84ff8.png&quot; alt=&quot;&quot;&gt;&lt;/fancybox&gt;&lt;/p&gt;
&lt;p&gt;写一个观察者模式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://blog.curtaintan.club/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式（一）--单例模式</title>
    <link href="http://blog.curtaintan.club/2020/02/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://blog.curtaintan.club/2020/02/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-02-08T06:00:08.000Z</published>
    <updated>2020-02-08T08:07:23.641Z</updated>
    
    <content type="html"><![CDATA[<p><fancybox><img src="https://image.gslb.dawnlab.me/b9bb7ddf819be28cee3cbe3dfb440e9a.png" alt=""></fancybox></p><p>写一个单例模式。</p><a id="more"></a><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>确保一个类只有一个实例，使每次获取的实例都是同一个。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>( name )&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    getName()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">    &#125;</span><br><span class="line">    setName( data )&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = data</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取单例的方法   ---   使用闭包获取单例</span></span><br><span class="line">Store.getInstance = (</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> instance</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"> name </span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>( !instance )&#123;</span><br><span class="line">                instance = <span class="keyword">new</span> Store( name )</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> instance</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> store1 = Store.getInstance( <span class="string">"你好"</span> )</span><br><span class="line"><span class="keyword">let</span> store2 = Store.getInstance( <span class="string">"你好----"</span> )</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( store1 )</span><br><span class="line"><span class="built_in">console</span>.log( store2 )</span><br><span class="line"><span class="built_in">console</span>.log( store1 === store2 )</span><br></pre></td></tr></table></figure><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p><fancybox><img src="https://image.gslb.dawnlab.me/a3f69ad1bf9019e1d04d1d15b54eea25.png" alt=""></fancybox></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>单例模式运用非常广泛，只要在代码中涉及到只存在一个实例，就可以使用单例模式，</p><p>vuex 和 redux 就是使用单例模式构建。</p><p><strong>写一个单例模式的要点：</strong></p><ol><li>使用一个特定函数来获取单例，</li><li>此函数使用闭包来确保但会单例是唯一的，</li><li>使用函数柯理化–接收传入参数</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://juejin.im/post/59df4f74f265da430f311909" target="_blank" rel="noopener">JavaScript设计模式</a></p><p><a href="https://juejin.im/post/5e021eb96fb9a01628014095#heading-0" target="_blank" rel="noopener">JavaScript设计模式es6（23种)</a></p><p><a href="https://juejin.im/post/5afe6430518825428630bc4d" target="_blank" rel="noopener">JavaScript 中常见设计模式整理</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;fancybox&gt;&lt;img src=&quot;https://image.gslb.dawnlab.me/b9bb7ddf819be28cee3cbe3dfb440e9a.png&quot; alt=&quot;&quot;&gt;&lt;/fancybox&gt;&lt;/p&gt;
&lt;p&gt;写一个单例模式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://blog.curtaintan.club/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
</feed>
