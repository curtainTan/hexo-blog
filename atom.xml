<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>curTain</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.curtaintan.club/"/>
  <updated>2020-09-30T09:18:06.931Z</updated>
  <id>http://blog.curtaintan.club/</id>
  
  <author>
    <name>tanTantan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>红宝书第三章-语言基础</title>
    <link href="http://blog.curtaintan.club/2020/09/30/%E7%BA%A2%E5%AE%9D%E4%B9%A6%E7%AC%AC%E4%B8%89%E7%AB%A0-%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    <id>http://blog.curtaintan.club/2020/09/30/%E7%BA%A2%E5%AE%9D%E4%B9%A6%E7%AC%AC%E4%B8%89%E7%AB%A0-%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</id>
    <published>2020-09-30T02:17:45.000Z</published>
    <updated>2020-09-30T09:18:06.931Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、语法"><a href="#一、语法" class="headerlink" title="一、语法"></a>一、语法</h2><h3 id="1-1-变量命名规则"><a href="#1-1-变量命名规则" class="headerlink" title="1.1 变量命名规则"></a>1.1 变量命名规则</h3><ol><li>第一个字符必须是一个字符、下划线（_）或美元符号（$）</li><li>剩下的字符可以是字母、下划线、美元符号和数字，也可以是 Unicode 的字母字符</li></ol><h3 id="1-2-严格模式"><a href="#1-2-严格模式" class="headerlink" title="1.2 严格模式"></a>1.2 严格模式</h3><p>概念：ES5 添加了严格模式，严格模式是一个预处理指令，严格模式的目的是处理一些不规范写法，对于不安全的活动抛错误</p><p>如何添加严格模式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在脚本开头添加一行</span></span><br><span class="line"><span class="meta">"use strict"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或在函数体内第一行添加</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="meta">    "use strict"</span></span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>严格模式的影响：</strong></p><h4 id="1-2-1-针对变量："><a href="#1-2-1-针对变量：" class="headerlink" title="1.2.1 针对变量："></a>1.2.1 针对变量：</h4><ol><li>不允许以外创建全局变量，给一个没有声明的变量赋值，抛错 ReferenceError 引用错误</li><li>不能对变量使用 delete 操作符</li><li>不能使用保留字作为变量名</li></ol><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 非严格模式:创建全局变量 </span></span><br><span class="line"><span class="comment">// 严格模式:抛出 ReferenceError</span></span><br><span class="line">name = <span class="string">"tan"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非严格模式:静默失败 </span></span><br><span class="line"><span class="comment">//严格模式:抛出 ReferenceError</span></span><br><span class="line"><span class="keyword">var</span> color = <span class="string">"red"</span>;</span><br><span class="line"><span class="keyword">delete</span> color;</span><br></pre></td></tr></table></figure><h4 id="1-2-2-针对对象："><a href="#1-2-2-针对对象：" class="headerlink" title="1.2.2 针对对象："></a>1.2.2 针对对象：</h4><ol><li>为只读属性赋值会抛出 <code>TypeError</code></li><li>对不可配置的属性（noConfigurable）使用 delete 操作会抛出 TypeError</li><li>对不可扩展的对象添加属性会抛出 <code>TypeError</code></li><li>使用对象字面量时，属性名必须唯一</li></ol><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty( obj, <span class="string">"name"</span>, &#123;</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// read-only </span></span><br><span class="line">    writable: <span class="literal">false</span>,</span><br><span class="line">value: <span class="string">"tan"</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非严格模式: 默认修改失败</span></span><br><span class="line"><span class="comment">// 严格模式: 抛出错误 Cannot assign to read only property "name"</span></span><br><span class="line">obj.name = <span class="string">"yu"</span></span><br></pre></td></tr></table></figure><h4 id="1-2-3-针对函数："><a href="#1-2-3-针对函数：" class="headerlink" title="1.2.3 针对函数："></a>1.2.3 针对函数：</h4><ol><li>要求命名函数的参数必须唯一</li><li>在非严格模式下，修改命名参数的值会反映到 arguments 对象中，而在严格模式下，值是独立的</li><li>arguments.callee 和 arguments.caller，在非严格模式下，这两个属性一个引用函数本身，一个引用调用函数。而在严格模式下，访问哪个属性都会抛出 TypeError</li><li>只能在脚本的顶级和函数内部生命函数</li></ol><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//非严格模式: 没有错误，后面的参数覆盖前面的值</span></span><br><span class="line"><span class="comment">//严格模式: 抛出语法错误</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"> num, str, num </span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 非严格模式：undefined 12</span></span><br><span class="line">    <span class="comment">// 严格模式: 抛出语法错误</span></span><br><span class="line">    <span class="built_in">console</span>.log( num, str )</span><br><span class="line">&#125;</span><br><span class="line">fn( <span class="number">12</span>, <span class="string">"tan"</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment">//非严格模式: 修改会反映到 arguments 中 </span></span><br><span class="line"><span class="comment">//严格模式: 修改不会反映到 arguments 中</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showValue</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    value = <span class="string">"yu"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(value); <span class="comment">// "yu" </span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]); <span class="comment">// 非严格模式:"yu"，严格模式:"tan"</span></span><br><span class="line">&#125;</span><br><span class="line">showValue(<span class="string">"tan"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问 arguments.callee </span></span><br><span class="line"><span class="comment">//非严格模式:没有问题 </span></span><br><span class="line"><span class="comment">//严格模式:抛出 TypeError</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num * <span class="built_in">arguments</span>.callee(num<span class="number">-1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result=factorial(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在 if 语句中声明函数 </span></span><br><span class="line"><span class="comment">//非严格模式:将函数提升到 if 语句外部 </span></span><br><span class="line"><span class="comment">//严格模式:抛出语法错误</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// todo </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-4-针对-eval-函数中的变量"><a href="#1-2-4-针对-eval-函数中的变量" class="headerlink" title="1.2.4 针对 eval() 函数中的变量"></a>1.2.4 针对 eval() 函数中的变量</h4><ol><li>在严格模式中，它在包含上下文中不再创建变量或函数</li><li>在 eval() 函数中声明的变量和函数，只在特殊的终于用中有效，随后将被销毁</li></ol><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用 eval()创建变量</span></span><br><span class="line"><span class="comment">//非严格模式:弹出对话框显示 10</span></span><br><span class="line"><span class="comment">//严格模式:调用 alert(x)时会抛出 ReferenceError</span></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">"var x=10"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"></span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">eval</span>(<span class="string">"var x=10, y=11; x+y"</span>);</span><br><span class="line">alert(result);  <span class="comment">// 21   执行结果存在变量内</span></span><br></pre></td></tr></table></figure><h4 id="1-2-5-抑制-this-指向"><a href="#1-2-5-抑制-this-指向" class="headerlink" title="1.2.5 抑制 this 指向"></a>1.2.5 抑制 this 指向</h4><p>在非严格模式下使用函数的 apply()或 call()方法时，null 或 undefined 值会被转换为全局 对象。而在严格模式下，函数的 this 值始终是指定的值，无论指定的是什么值</p><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问属性</span></span><br><span class="line"><span class="comment">// 非严格模式: 传入null, 函数的this值是全局对象</span></span><br><span class="line"><span class="comment">// 严格模式: 抛出错误，因为this的值为 null</span></span><br><span class="line"><span class="keyword">var</span> color = <span class="string">"red"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">displayColor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.color);</span><br><span class="line">&#125;</span><br><span class="line">displayColor.call(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h4 id="1-2-6-其他影响"><a href="#1-2-6-其他影响" class="headerlink" title="1.2.6 其他影响"></a>1.2.6 其他影响</h4><ol><li>严格模式去掉了 JavaScript 中的八进制字面量</li><li>严格模式下 parseInt()的行为，八进制字面量在严格模式下会被当作以 0 开头的十进制字面量</li></ol><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用八进制字面量 </span></span><br><span class="line"><span class="comment">//非严格模式:值为 8 </span></span><br><span class="line"><span class="comment">//严格模式:抛出语法错误</span></span><br><span class="line"><span class="keyword">var</span> value = <span class="number">010</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 parseInt()解析八进制字面量 </span></span><br><span class="line"><span class="comment">//非严格模式:值为 8 </span></span><br><span class="line"><span class="comment">//严格模式:值为 10</span></span><br><span class="line"><span class="keyword">var</span> value = <span class="built_in">parseInt</span>(<span class="string">"010"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、语法&quot;&gt;&lt;a href=&quot;#一、语法&quot; class=&quot;headerlink&quot; title=&quot;一、语法&quot;&gt;&lt;/a&gt;一、语法&lt;/h2&gt;&lt;h3 id=&quot;1-1-变量命名规则&quot;&gt;&lt;a href=&quot;#1-1-变量命名规则&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="红宝书" scheme="http://blog.curtaintan.club/categories/%E7%BA%A2%E5%AE%9D%E4%B9%A6/"/>
    
    
      <category term="js基础" scheme="http://blog.curtaintan.club/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>9.30-每日一题</title>
    <link href="http://blog.curtaintan.club/2020/09/30/9-30-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    <id>http://blog.curtaintan.club/2020/09/30/9-30-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</id>
    <published>2020-09-30T00:30:49.000Z</published>
    <updated>2020-09-30T02:16:18.856Z</updated>
    
    <content type="html"><![CDATA[<ol start="701"><li>二叉搜索树中的插入操作</li></ol><a id="more"></a><h2 id="701-二叉搜索树中的插入操作"><a href="#701-二叉搜索树中的插入操作" class="headerlink" title="701. 二叉搜索树中的插入操作"></a><a href="https://leetcode-cn.com/problems/insert-into-a-binary-search-tree/" target="_blank" rel="noopener">701. 二叉搜索树中的插入操作</a></h2><p>给定二叉搜索树（BST）的根节点和要插入树中的值，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 输入数据保证，新值和原始二叉搜索树中的任意节点值都不同。</p><p>注意，可能存在多种有效的插入方式，只要树在插入后仍保持为二叉搜索树即可。 你可以返回任意有效的结果。</p><p>例如：</p><style>.bg-pre {    padding: 10px;    background: rgba(33,150,243,.2);    border-radius: 4px;}</style><pre class="bg-pre" >给定二叉搜索树:        4       / \      2   7     / \    1   3和 插入的值: 5</pre><p>你可以返回这个二叉搜索树:</p><pre class="bg-pre" >         4       /   \      2     7     / \   /    1   3 5</pre><p>或者这个树也是有效的:</p><pre class="bg-pre" >         5       /   \      2     7     / \       1   3         \          4</pre><p><strong>提示：</strong></p><p>新值和原始二叉搜索树中的任意节点值都不同</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>由题可知，题目是搜索二叉树，搜索二叉树的特点是，左子节点的值小于当前节点的值，右子节点的值大于当前节点的值</p><p>迭代进行比较，一直比较到下一个位置为 null 时停止，并创建一个节点放在最后就完成了插入</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; val</span></span><br><span class="line"><span class="comment"> * @return &#123;TreeNode&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> insertIntoBST = <span class="function"><span class="keyword">function</span>(<span class="params">root, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( !root ) <span class="keyword">return</span> <span class="keyword">new</span> TreeNode(val)</span><br><span class="line">    <span class="keyword">let</span> node = root</span><br><span class="line">    <span class="comment">// 依次迭代</span></span><br><span class="line">    <span class="keyword">while</span>( node )&#123;</span><br><span class="line">        <span class="keyword">if</span>( val &lt; node.val )&#123;</span><br><span class="line">            <span class="comment">// 迭代到最后，插入节点</span></span><br><span class="line">            <span class="keyword">if</span>( !node.left )&#123;</span><br><span class="line">                node.left = <span class="keyword">new</span> TreeNode(val)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node = node.left</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>( !node.right )&#123;</span><br><span class="line">                node.right = <span class="keyword">new</span> TreeNode(val)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node = node.right</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回首节点</span></span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>递归实现：</p><blockquote><p>递归结束条件：当前节点为 null，返回以 val 新建的节点<br>将节点的左右节点进行赋值，赋值为当前函数的调用<br>最后返回当前节点</p></blockquote><h2 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> insertIntoBST = <span class="function"><span class="keyword">function</span>(<span class="params">root, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( !root ) <span class="keyword">return</span> <span class="keyword">new</span> TreeNode(val)</span><br><span class="line">    <span class="keyword">if</span>( val &lt; root.val )&#123;</span><br><span class="line">        root.left = insertIntoBST( root.left, val )</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        root.right = insertIntoBST( root.right, val )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ol start=&quot;701&quot;&gt;
&lt;li&gt;二叉搜索树中的插入操作&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://blog.curtaintan.club/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://blog.curtaintan.club/tags/leetcode/"/>
    
      <category term="二叉树" scheme="http://blog.curtaintan.club/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="二叉搜索树" scheme="http://blog.curtaintan.club/tags/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>9.29-每日一题--二叉树后序遍历</title>
    <link href="http://blog.curtaintan.club/2020/09/29/9-29-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    <id>http://blog.curtaintan.club/2020/09/29/9-29-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</id>
    <published>2020-09-29T00:47:28.000Z</published>
    <updated>2020-09-29T01:36:51.539Z</updated>
    
    <content type="html"><![CDATA[<ol start="145"><li>二叉树的后序遍历</li></ol><a id="more"></a><p><a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/" target="_blank" rel="noopener">145. 二叉树的后序遍历</a></p><p>给定一个二叉树，返回它的 后序 遍历。</p><style>.bg-pre {    padding: 10px;    background: rgba(33,150,243,.2);    border-radius: 4px;}</style><p>示例:</p><pre class="bg-pre" > 输入: [1,null,2,3]     1    \     2    /   3 </pre><p>输出: [3,2,1]<br>进阶: 递归算法很简单，你可以通过迭代算法完成吗？</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><ol><li>当前节点存在左节点，递归左节点</li><li>当前节点存在右节点，递归右节点</li><li>将当前节点的值存到结果中</li></ol><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> postorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 保存最后结果</span></span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="keyword">let</span> dfs = <span class="function">(<span class="params"> node </span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>( !node ) <span class="keyword">return</span></span><br><span class="line">        <span class="comment">// 左右子树递归</span></span><br><span class="line">        node.left &amp;&amp; dfs( node.left )</span><br><span class="line">        node.right &amp;&amp; dfs( node.right )</span><br><span class="line">        res.push( node.val )</span><br><span class="line">    &#125;</span><br><span class="line">    dfs( root )</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ol start=&quot;145&quot;&gt;
&lt;li&gt;二叉树的后序遍历&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://blog.curtaintan.club/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://blog.curtaintan.club/tags/leetcode/"/>
    
      <category term="二叉树" scheme="http://blog.curtaintan.club/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>js类型转换</title>
    <link href="http://blog.curtaintan.club/2020/09/28/js%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <id>http://blog.curtaintan.club/2020/09/28/js%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</id>
    <published>2020-09-28T08:58:25.000Z</published>
    <updated>2020-09-30T14:37:41.672Z</updated>
    
    <content type="html"><![CDATA[<p>js 中类型转换分为显式类型转换和隐式类型转换</p><ol><li>显式类型转换方法：<code>Number()</code>、<code>parseInt()</code>、<code>parseFloat()</code>、<code>toString()</code>、<code>String</code>、<code>Boolean()</code></li><li>隐式类型转换：逻辑运算符（ &amp;&amp;、||、！ ）、运算符（+、-、*、/）、关系运算符（&gt;、&lt;、&lt;=、&gt;=）、相等运算符（==）、if/while 条件运算</li></ol><h2 id="一、显式类型转换"><a href="#一、显式类型转换" class="headerlink" title="一、显式类型转换"></a>一、显式类型转换</h2><h3 id="1-1-Number"><a href="#1-1-Number" class="headerlink" title="1.1 Number()"></a>1.1 Number()</h3><blockquote><p>Number() 能将任意类型的参数转换为数值类型</p></blockquote><p>规则如下：</p><ul><li>布尔值：true 和 false 分别被转换为 1 和 0</li><li>数字：返回本身</li><li>null：返回 0</li><li>undefined：返回 NaN </li><li>字符串：<ul><li>只包含数字（<code>0X</code>/<code>0x</code>开头的十六进制数字字符串，允许正负号），返回十进制数</li><li>包含有效浮点数，返回浮点数</li><li>空字符串，返回0</li><li>不是以上形式的字符串，返回 NaN</li></ul></li><li>Symbol：抛错</li><li>对象：调用对象的 <code>valueOf()</code> 方法，然后依据前面的规则转换返回的值，如果转换的结果是 <code>NaN</code>，则调用对象的 <code>toString()</code> 方法，再次按照前面的规则转换返回的字符串</li></ul><p><strong>强调：</strong></p><blockquote><p>当对象转换为数字时，调用对象的 <code>valueOf()</code> 方法，然后依据前面的规则转换返回的值，如果转换的结果是引用类型，则调用对象的 <code>toString()</code> 方法，再次按照前面的规则转换返回的字符串，如果返回还是引用类型，最后返回 <code>NaN</code></p></blockquote><style>table th:first-of-type {    width: 100px;}table th:nth-of-type(3) {    width: 100px;}</style><p>部分内置对象默认调用的 <code>valueOf()</code> 方法的行为：</p><table><thead><tr><th>对象</th><th>返回值</th><th>类型</th></tr></thead><tbody><tr><td>Boolean</td><td>布尔值</td><td>基础类型</td></tr><tr><td>Date</td><td>返回毫秒数-从1970.1.1 0:0:0 开始计算</td><td>基础类型</td></tr><tr><td>Nunber</td><td>数字值</td><td>基础类型</td></tr><tr><td>String</td><td>字符串值</td><td>基础类型</td></tr><tr><td>Array</td><td>返回数组本身</td><td>对象类型</td></tr><tr><td>Object</td><td>对象本身</td><td>对象类型</td></tr><tr><td>Function</td><td>函数本身</td><td>对象类型</td></tr></tbody></table><p><strong>注意：</strong></p><p>当数组只有一个元素时，会将第一个元素提取出来做转换</p><p><strong>案例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Number() 类型转换</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">true</span>)        <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">null</span>)        <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">undefined</span>)   <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">"0x15"</span>)      <span class="comment">// 21   0x15 -&gt; 16+5=21</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">""</span>)          <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">"-0X16"</span>)     <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="built_in">Symbol</span>(<span class="number">12</span>))  <span class="comment">// error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// valueOf() 方法返回值</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].valueOf()     <span class="comment">// [1, 2, 3, 4]  对象类型</span></span><br><span class="line"><span class="built_in">Number</span>( [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] )     <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Number</span>( [ <span class="number">12</span> ] )        <span class="comment">// 12</span></span><br><span class="line"><span class="built_in">Number</span>( [ <span class="string">"12"</span> ] )      <span class="comment">// 12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> empty = [].valueOf()   <span class="comment">// []  对象类型</span></span><br><span class="line"><span class="built_in">Number</span>( empty )   <span class="comment">// 0  [].valueOf()=[]-&gt;NaN, 再调用empty.toString()='' Number("") -&gt; 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Boolean</span>().valueOf()     <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>( <span class="built_in">Boolean</span>() )     <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">date.valueOf()          <span class="comment">// 1601345955850</span></span><br><span class="line"><span class="built_in">Number</span>( date )          <span class="comment">// 1601345955850</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123; <span class="keyword">var</span> a = <span class="number">1</span> &#125;</span><br><span class="line">fn.valueOf()            <span class="comment">// fn()&#123; var a = 1 &#125;</span></span><br><span class="line"><span class="built_in">Number</span>( fn )            <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">"tan"</span> &#125;</span><br><span class="line">obj.valueOf()           <span class="comment">// &#123;name: "tan"&#125;   // 对象本身</span></span><br><span class="line"><span class="built_in">Number</span>( fn )            <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><h3 id="1-2-parseInt-param，radix"><a href="#1-2-parseInt-param，radix" class="headerlink" title="1.2 parseInt( param，radix )"></a>1.2 parseInt( param，radix )</h3><p>传入两个参数，第一个是需要进行转换的参数，第二是转换的进制，最终返回十进制数字或NaN</p><h4 id="1-2-1-第一个参数是字符串："><a href="#1-2-1-第一个参数是字符串：" class="headerlink" title="1.2.1 第一个参数是字符串："></a>1.2.1 第一个参数是字符串：</h4><ol><li>忽略字符串前面的空格，从非空字符开始计算</li><li>空字符串返回 NaN</li><li>第一个字符超过进制，返回 NaN，进制从0-9a-z开始计算，最大进制为 36</li><li>如果第一个字符在进制内，则解析到第一个超出进制的符号为止</li></ol><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">"  0111"</span>)      <span class="comment">// 111</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">""</span>)            <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"1c"</span>, <span class="number">13</span>)      <span class="comment">// 25  13+12</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"1cd"</span>, <span class="number">13</span>)     <span class="comment">// 25  13+12</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"dc1"</span>, <span class="number">13</span>)     <span class="comment">// NaN d进制超过13</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"-1cd"</span>, <span class="number">13</span>)    <span class="comment">// -25</span></span><br></pre></td></tr></table></figure><h4 id="1-2-2-第一个参数是数字："><a href="#1-2-2-第一个参数是数字：" class="headerlink" title="1.2.2 第一个参数是数字："></a>1.2.2 第一个参数是数字：</h4><ol><li>第一个参数不是以 0 开头的，以第二个参数作为进制进行转换</li><li>第一个参数是以 0 开头的，先进行八进制转换，再以第二个参数作为进制进行转换</li><li>第一个参数是以 <code>0X/0x</code> 开头的，先进行十六进制转换，在以第二个参数作为进制进行转换</li></ol><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="number">111</span>)       <span class="comment">// 111</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">13</span>, <span class="number">16</span>)    <span class="comment">// 19   16+3</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">013</span>, <span class="number">16</span>)   <span class="comment">// 17   013-&gt;8+3=11  11-&gt;16+1=17</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">0X13</span>, <span class="number">16</span>)  <span class="comment">// 25   0X13-&gt;16+3=19  19-&gt;16+9=25</span></span><br></pre></td></tr></table></figure><h4 id="1-2-3-第一个参数是-null-或-undefined"><a href="#1-2-3-第一个参数是-null-或-undefined" class="headerlink" title="1.2.3 第一个参数是 null 或 undefined"></a>1.2.3 第一个参数是 <code>null</code> 或 <code>undefined</code></h4><p>返回 <code>NaN</code></p><h4 id="1-2-4-第一个元素是数组"><a href="#1-2-4-第一个元素是数组" class="headerlink" title="1.2.4 第一个元素是数组"></a>1.2.4 第一个元素是数组</h4><p>取数组的第一个元素作为第一个参数，再进行进制转换</p><p>空数组返回 <code>NaN</code></p><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>([<span class="number">11</span>], <span class="number">16</span>)  <span class="comment">// 17  16+1=17</span></span><br><span class="line"><span class="built_in">parseInt</span>([<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">23</span>], <span class="number">16</span>)  <span class="comment">// 17</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>([])  <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><h4 id="1-2-5-第一个参数是-Symbol-类型"><a href="#1-2-5-第一个参数是-Symbol-类型" class="headerlink" title="1.2.5 第一个参数是 Symbol 类型"></a>1.2.5 第一个参数是 Symbol 类型</h4><p>抛出错误</p><h3 id="1-3-parseFloat-string-string"><a href="#1-3-parseFloat-string-string" class="headerlink" title="1.3 parseFloat( string: string )"></a>1.3 parseFloat( string: string )</h3><p>将参数转为浮点型数字，没有进制转换，转换规则与 <code>parseInt</code> 基本相同</p><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseFloat</span>( <span class="string">"123.45abc"</span> )   <span class="comment">// 123.45</span></span><br><span class="line"><span class="built_in">parseFloat</span>( [<span class="string">"123.45abc"</span>, <span class="string">"78"</span>, <span class="string">"9"</span>] )   <span class="comment">// 123.45</span></span><br></pre></td></tr></table></figure><h3 id="1-4-toString-方法"><a href="#1-4-toString-方法" class="headerlink" title="1.4 toString() 方法"></a>1.4 toString() 方法</h3><p>转换规则如下：</p><ol><li>Number类型：输出数字字符串，函数可以填入转换进制</li><li><code>null</code> 或 <code>undefined</code>：抛错</li><li>数组：将数组展开，空数组返回 <code>&quot;&quot;</code></li><li>对象：返回 <code>[object Object]</code></li><li>Date：返回日期的文字表示法</li><li>函数：函数的字符串</li><li>Symbol：输出 Symbol 字符串</li><li>Boolean：返回字符串</li></ol><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">29</span></span><br><span class="line">num.toString()      <span class="comment">// 29</span></span><br><span class="line">num.toString(<span class="number">15</span>)    <span class="comment">// 1e    15+14   14-&gt;e</span></span><br><span class="line"><span class="number">29.5</span> .toString(<span class="number">15</span>)  <span class="comment">// 1e.7777777777778</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nul = <span class="literal">null</span></span><br><span class="line">nul.toString()      <span class="comment">// 抛错</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].toString()  <span class="comment">// 1,2,3</span></span><br><span class="line">[&#123;<span class="attr">name</span>:<span class="string">"tan"</span>&#125;,<span class="number">1</span>,<span class="number">3</span>].toString()   <span class="comment">// [object Object],1,3</span></span><br><span class="line">[].toString()   <span class="comment">// ''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>:<span class="string">"tan"</span>&#125;</span><br><span class="line">obj.toString()  <span class="comment">// [object Object]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">date.toString() <span class="comment">// Tue Sep 29 2020 18:20:50 GMT+0800 (中国标准时间)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="string">"tan"</span>) &#125;</span><br><span class="line">fn.toString()   <span class="comment">// function fn()&#123; console.log("tan") &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tan = <span class="built_in">Symbol</span>(<span class="string">"tan"</span>)</span><br><span class="line">tan.toString()  <span class="comment">// Symbol(tan)</span></span><br><span class="line"></span><br><span class="line"><span class="literal">true</span>.toString() <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="1-5-String-value-any"><a href="#1-5-String-value-any" class="headerlink" title="1.5 String( value?: any )"></a>1.5 String( value?: any )</h3><p>将参数转为字符串，与 <code>toString</code> 转换规则基本类似，只能传一个参数</p><p>与 <code>toString()</code> 不同，<code>String()</code> 可以转换 <code>null</code> 和 <code>undefined</code></p><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>(<span class="number">123</span>)     <span class="comment">// 123</span></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">true</span>)    <span class="comment">// true</span></span><br><span class="line"><span class="built_in">String</span>(&#123;&#125;)      <span class="comment">// [object Object]</span></span><br><span class="line"><span class="built_in">String</span>([])      <span class="comment">// ""</span></span><br><span class="line"><span class="built_in">String</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) <span class="comment">// 1,2,3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">null</span>)    <span class="comment">// null </span></span><br><span class="line"><span class="built_in">String</span>( <span class="literal">undefined</span> ) <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="string">"tan"</span>) &#125;</span><br><span class="line"><span class="built_in">String</span>(fn)     <span class="comment">// function fn()&#123; console.log("tan") &#125;</span></span><br></pre></td></tr></table></figure><h3 id="1-6-Boolean-value-any"><a href="#1-6-Boolean-value-any" class="headerlink" title="1.6 Boolean( value?: any )"></a>1.6 Boolean( value?: any )</h3><p><code>undefined</code>、<code>null</code>、<code>false</code>、<code>&#39;&#39;</code>、<code>0</code>，<code>+-0</code>、<code>NaN</code> 转换为 <code>false</code></p><p>其余都是 <code>true</code>，负数转为 <code>true</code></p><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Boolean</span>(<span class="literal">undefined</span>)  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">null</span>)       <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="number">0</span>)          <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="number">-0</span>)         <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">NaN</span>)        <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="number">-34</span>)        <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Boolean</span>([])         <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="二、隐式类型转换"><a href="#二、隐式类型转换" class="headerlink" title="二、隐式类型转换"></a>二、隐式类型转换</h2><blockquote><p>逻辑运算符（ &amp;&amp;、||、！ ）、运算符（+、-、*、/）、关系运算符（&gt;、&lt;、&lt;=、&gt;=）、相等运算符（==）、if/while 条件运算</p></blockquote><h3 id="2-1-条件判断"><a href="#2-1-条件判断" class="headerlink" title="2.1 条件判断"></a>2.1 条件判断</h3><blockquote><p>&amp;&amp;、||、!、if/while 条件判断</p></blockquote><p>会将数据转换成 Boolean 类型，转换规则同 Boolean 强制类型转换</p><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( [] )      <span class="comment">// true</span></span><br><span class="line"><span class="keyword">if</span>( ![] )     <span class="comment">// false</span></span><br><span class="line"><span class="keyword">if</span>( <span class="number">-1</span> )      <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="2-2-运算符"><a href="#2-2-运算符" class="headerlink" title="2.2 运算符"></a>2.2 运算符</h3><blockquote><p>运算符：+ - * /</p></blockquote><h4 id="2-2-1-运算符"><a href="#2-2-1-运算符" class="headerlink" title="2.2.1 + 运算符"></a>2.2.1 + 运算符</h4><p>用于数字相加和字符串拼接</p><ol><li>当一侧为 <code>String</code> 类型时，被识别为字符串拼接，优先将另一侧调用 <code>String()</code> 转换为字符串</li><li>当一侧为 <code>Number</code> 类型时，另一侧为原始类型时，将原始类型调用 <code>Number()</code> 转化为数字类型</li><li>当一侧为 <code>Number</code> 类型时，另一侧为引用类型时，将引用类型作为参数调用 <code>String()</code> 和 <code>Number</code> 类型转换为字符串后拼接</li></ol><p>以上三点，优先级从高到低</p><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span> + <span class="string">"123"</span>   <span class="comment">// 123123</span></span><br><span class="line"><span class="number">123</span> + <span class="literal">true</span>    <span class="comment">// 124</span></span><br><span class="line"><span class="number">123</span> + <span class="literal">null</span>    <span class="comment">// 123</span></span><br><span class="line"><span class="string">"1"</span> + <span class="number">4</span> + <span class="number">5</span> + <span class="string">"6"</span> <span class="comment">// 1456</span></span><br><span class="line"></span><br><span class="line"><span class="number">123</span> + &#123;&#125;      <span class="comment">// 123[object Object]   &#123;&#125; -&gt; String(&#123;&#125;) -&gt; [object Object]</span></span><br><span class="line"><span class="number">123</span> + <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;&#125;  <span class="comment">// 123function fn()&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nul = <span class="literal">null</span></span><br><span class="line"><span class="string">"tan"</span> + nul     <span class="comment">// tannull    null -&gt; String(null) -&gt; null</span></span><br><span class="line"></span><br><span class="line"><span class="number">12</span> + [ <span class="number">5</span>, <span class="number">4</span> ]   <span class="comment">// 125,4    [5, 4] -&gt; String([5,4]) =&gt; 5,4</span></span><br></pre></td></tr></table></figure><h4 id="2-2-1-运算符-1"><a href="#2-2-1-运算符-1" class="headerlink" title="2.2.1 - * / 运算符"></a>2.2.1 - * / 运算符</h4><p>将各种非 <code>Number</code> 类型隐式调用 <code>Number()</code> 函数将值转换为数值类型，如果其中一个转换为 <code>NaN</code>，结果为 <code>NaN</code></p><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span> + <span class="literal">true</span> <span class="comment">// 2</span></span><br><span class="line"><span class="number">2</span> - <span class="literal">true</span>    <span class="comment">// 3</span></span><br><span class="line"><span class="number">5</span> - <span class="number">012</span>     <span class="comment">// -5    012 -&gt; Number(012) -&gt; 8+2=10</span></span><br><span class="line"><span class="number">5</span> - <span class="number">0x12</span>    <span class="comment">// -13   0x12 -&gt; Number(0x12) -&gt; 16+2=18</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span> - [ <span class="number">2</span> ]    <span class="comment">// 3  [2] -&gt; Number([2]) -&gt; 2</span></span><br><span class="line"><span class="number">5</span> - [ <span class="number">2</span>, <span class="number">3</span> ] <span class="comment">// NaN [2, 3] -&gt; Number([2, 3]) -&gt; NaN</span></span><br><span class="line"><span class="number">5</span> - &#123;&#125;       <span class="comment">// NaN  &#123;&#125; -&gt; Number(&#123;&#125;) -&gt; NaN</span></span><br></pre></td></tr></table></figure><h3 id="2-3-关系操作符"><a href="#2-3-关系操作符" class="headerlink" title="2.3 关系操作符"></a>2.3 关系操作符</h3><blockquote><p>关系操作符：==、&lt;、&gt;、&lt;=、&lt;= </p></blockquote><h4 id="2-3-1-lt-、-gt-、-lt-、-lt-操作符"><a href="#2-3-1-lt-、-gt-、-lt-、-lt-操作符" class="headerlink" title="2.3.1 &lt;、&gt;、&lt;=、&lt;= 操作符"></a>2.3.1 &lt;、&gt;、&lt;=、&lt;= 操作符</h4><ol><li>两个操作值都是数值，进行数值比较</li><li>都是字符串，比较字符对应的字符编码值</li><li>一方是 Symbol，抛错</li><li>除了上述情况，都使用 <code>Number()</code> 函数进行隐式转换，再进行比较</li></ol><p><strong>注意：</strong></p><blockquote><p>NaN 与任何数值比较都不相等，都返回 false</p></blockquote><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">26</span>] &gt; [<span class="number">12</span>]     <span class="comment">// true     [26] -&gt; Number([26]) -&gt; 26    [24] -&gt; 24 </span></span><br><span class="line"><span class="string">"abc"</span> &lt; <span class="string">"acb"</span>   <span class="comment">// true     b &lt; c</span></span><br><span class="line"><span class="number">77</span> &gt; <span class="string">"76"</span>       <span class="comment">// true</span></span><br><span class="line"><span class="number">77</span> &gt; <span class="string">"76a"</span>      <span class="comment">// false    76a -&gt; Number("76a") -&gt; NaN</span></span><br><span class="line"><span class="number">77</span> &gt; []         <span class="comment">// true     Number([])  -&gt; 0</span></span><br><span class="line"></span><br><span class="line"><span class="number">18</span> &gt; <span class="string">"0x11"</span>     <span class="comment">// true    0x11 -&gt; Number(0x11) -&gt; 16+1=17</span></span><br><span class="line"><span class="number">17</span> &gt; <span class="string">"0x11"</span>     <span class="comment">// false   0x11 -&gt; Number(0x11) -&gt; 16+1=17</span></span><br></pre></td></tr></table></figure><h4 id="2-3-1-操作符"><a href="#2-3-1-操作符" class="headerlink" title="2.3.1 == 操作符"></a>2.3.1 == 操作符</h4><ol><li><code>NaN</code> 不与其他任何值相等</li><li><code>null</code> 与 <code>undefined</code> 进行比较为 <code>true</code></li><li><code>null</code>、<code>undefined</code> 与其他任何值比较结果都为 <code>false</code></li></ol><ol><li><code>Boolean</code> 与其他类型比较，<code>Boolean</code> 先转换为 <code>Number</code></li><li><code>String</code> 与 <code>Number</code> 进行比较，<code>String</code> 转换为 <code>Number</code></li><li>引用类型与基础类型进行比较，引用类型先转换为基础类型（调用 ToPrimitive）</li><li>引用类型与引用类型，直接判断是否指向同一对象</li></ol><p><strong>注意：</strong></p><blockquote><p>如果没有部署 [Symbol.toPrimitive] 接口，则先返回 <code>valudeOf()</code> 的值，若返回的不是基础类型，再返回 <code>toString()</code> 的值，若返回的不是基础类型的值，则抛出错误</p></blockquote><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[] == ![]    <span class="comment">// true</span></span><br><span class="line"><span class="comment">// ![] -&gt; false</span></span><br><span class="line"><span class="comment">// 再运用规则一：false -&gt; 0</span></span><br><span class="line"><span class="comment">// 再运用规则三：[] 调用 toPrimitive 返回 0</span></span><br><span class="line"><span class="comment">// 0 == 0   返回 true</span></span><br><span class="line"></span><br><span class="line"><span class="string">"[object Object]"</span> = &#123;&#125;  <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 引用类型与基础类型进行比较，引用类型先调用 ToPrimitive 函数，</span></span><br><span class="line"><span class="comment">// 没有 ToPrimitive 函数，则调用 &#123;&#125;.valueOf() 返回引用类型的值</span></span><br><span class="line"><span class="comment">// 返回值不是基础类型，继续调用 &#123;&#125;.toString() 返回 [object Object]</span></span><br></pre></td></tr></table></figure><h2 id="附加知识点–对象转换成原始数据类型"><a href="#附加知识点–对象转换成原始数据类型" class="headerlink" title="附加知识点–对象转换成原始数据类型"></a>附加知识点–对象转换成原始数据类型</h2><p>如果部署了 [Symbol.toPrimitive] 接口，那么调用此接口，若返回的不是基础数据类型，抛出错误。</p><p>如果没有部署 [Symbol.toPrimitive] 接口，那么先返回 valueOf() 的值，若返回的不是基础类型的值，再返回 toString() 的值，若返回的不是基础类型的值， 则抛出异常。</p><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先调用 valueOf, 后调用 toString</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    [<span class="built_in">Symbol</span>.toPrimitive]() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">200</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    valueOf() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">300</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    toString() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Hello'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果 valueOf 返回的不是基本数据类型，则会调用 toString， </span></span><br><span class="line"><span class="comment">//如果 toString 返回的也不是基本数据类型，会抛出错误</span></span><br><span class="line"><span class="built_in">console</span>.log(obj + <span class="number">200</span>); <span class="comment">//400</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>js 类型转换分为显式转换和隐式转换</p><p>通过本文可知，隐式转换也是间接的调用显式转换的方法来进行转换的，但是我们需要记住隐式转换的规则</p><h3 id="在显式转换的方法中，需要注意的以下几点："><a href="#在显式转换的方法中，需要注意的以下几点：" class="headerlink" title="在显式转换的方法中，需要注意的以下几点："></a>在显式转换的方法中，需要注意的以下几点：</h3><ol><li>Number( value: any ): 参数以 <code>0</code> 开头会进行八进制转换，以 <code>0x/0X</code> 开头会进行十六进制转换</li><li>parseInt( value, radix )：参数是数组时，取第一个元素转换，与 <code>Number()</code> 处理数组的方式不同，传空数组时，会返回 <code>NaN</code>,而 <code>Number([])</code> 会返回 <code>0</code></li><li>toString(): <code>toString</code> 方法可以将数字转为特定进制的字符串</li></ol><h3 id="显式转换的使用："><a href="#显式转换的使用：" class="headerlink" title="显式转换的使用："></a>显式转换的使用：</h3><ol><li>实现进制互相转换</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">29</span></span><br><span class="line"><span class="keyword">let</span> str = num.toString( <span class="number">16</span> )    <span class="comment">// 1d  16+13=29  13-&gt;d</span></span><br><span class="line"><span class="keyword">let</span> strToNum = <span class="built_in">parseInt</span>( str, <span class="number">16</span> )</span><br><span class="line"><span class="built_in">console</span>.log( str, strToNum )    <span class="comment">// 1d 29</span></span><br></pre></td></tr></table></figure><ol start="2"><li>生成随机字符串</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> randomStr = <span class="built_in">Math</span>.random().toString(<span class="number">26</span>).slice(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log( randomStr )    <span class="comment">// j40a2j457ojg   26进制可以包含所有字母</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>数组去重</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [ <span class="number">123</span>, <span class="number">123</span>, &#123; <span class="attr">name</span>: <span class="string">"tan"</span> &#125;, [ <span class="number">123</span> ], [ <span class="number">1</span>,<span class="number">2</span> ], &#123; <span class="attr">name</span>: <span class="string">"tan"</span> &#125;, [ <span class="number">1</span>,<span class="number">2</span> ] ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> copyArr = arr.map( <span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">JSON</span>.stringify( item ) )</span><br><span class="line"><span class="keyword">let</span> flatArr = [ ...new <span class="built_in">Set</span>( copyArr ) ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newArr = flatArr.map( <span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">JSON</span>.parse( item ) )</span><br><span class="line"></span><br><span class="line"><span class="comment">// ["123", "123", "&#123;"name":"tan"&#125;", "[123]", "[1,2]", "&#123;"name":"tan"&#125;", "[1,2]"]</span></span><br><span class="line"><span class="built_in">console</span>.log( copyArr )</span><br><span class="line"></span><br><span class="line"><span class="comment">// ["123", "&#123;"name":"tan"&#125;", "[123]", "[1,2]"]</span></span><br><span class="line"><span class="built_in">console</span>.log( flatArr )</span><br></pre></td></tr></table></figure></li><li><p>函数深拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"hello"</span> )</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"hello1111"</span> )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> bodyStr = <span class="string">""</span></span><br><span class="line">fn.toString().replace( <span class="regexp">/\&#123;(.*)\&#125;/</span>sm, <span class="function"><span class="keyword">function</span>(<span class="params"> all, one </span>)</span>&#123;</span><br><span class="line">    bodyStr = <span class="built_in">arguments</span>[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> newFn = <span class="keyword">new</span> <span class="built_in">Function</span>( bodyStr )</span><br><span class="line"></span><br><span class="line"><span class="comment">// hello</span></span><br><span class="line"><span class="comment">// hello1111</span></span><br><span class="line">newFn()</span><br></pre></td></tr></table></figure></li></ol><p><strong>写下这篇文章希望对你有帮助，共勉-</strong></p><h2 id="参考材料"><a href="#参考材料" class="headerlink" title="参考材料"></a>参考材料</h2><p><a href="https://juejin.im/post/6844903828093927431#heading-6" target="_blank" rel="noopener">刘小夕–JS 类型转换的规则是什么？</a></p><p><a href="https://juejin.im/post/6869699873407500295" target="_blank" rel="noopener">粥里有勺糖–offer收割机–js的隐式类型转换规则整理</a></p><p><a href="https://chinese.freecodecamp.org/news/javascript-implicit-type-conversion/" target="_blank" rel="noopener">freeCodeCamp–Javascript 隐式类型转换，一篇就够了！</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;js 中类型转换分为显式类型转换和隐式类型转换&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;显式类型转换方法：&lt;code&gt;Number()&lt;/code&gt;、&lt;code&gt;parseInt()&lt;/code&gt;、&lt;code&gt;parseFloat()&lt;/code&gt;、&lt;code&gt;toString()&lt;/c
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://blog.curtaintan.club/categories/JavaScript/"/>
    
    
      <category term="js基础" scheme="http://blog.curtaintan.club/tags/js%E5%9F%BA%E7%A1%80/"/>
    
      <category term="科普" scheme="http://blog.curtaintan.club/tags/%E7%A7%91%E6%99%AE/"/>
    
  </entry>
  
  <entry>
    <title>红宝书第二章-HTML中的js</title>
    <link href="http://blog.curtaintan.club/2020/09/28/%E7%BA%A2%E5%AE%9D%E4%B9%A6%E7%AC%AC%E4%BA%8C%E7%AB%A0-HTML%E4%B8%AD%E7%9A%84js/"/>
    <id>http://blog.curtaintan.club/2020/09/28/%E7%BA%A2%E5%AE%9D%E4%B9%A6%E7%AC%AC%E4%BA%8C%E7%AB%A0-HTML%E4%B8%AD%E7%9A%84js/</id>
    <published>2020-09-28T00:51:11.000Z</published>
    <updated>2020-09-28T08:33:24.832Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、-lt-script-gt-元素"><a href="#一、-lt-script-gt-元素" class="headerlink" title="一、&lt;script&gt; 元素"></a>一、&lt;script&gt; 元素</h2><p><code>&lt;script&gt;</code> 元素由网景公司创造出来，并在网景浏览器2中实现，<code>&lt;script&gt;</code> 元素有以下 8 个属性</p><style>table th:first-of-type {    width: 130px;}table th:nth-of-type(2) {    width: 100px;}</style><table><thead><tr><th>属性名</th><th>填写</th><th>说明</th></tr></thead><tbody><tr><td>async</td><td>选填</td><td>表示立即下载该脚本，但不阻止其他页面操作，比如下载资源或等待掐他脚本加载</td></tr><tr><td>charset</td><td>可选</td><td>使用 src 属性指定的代码字符集，很少使用</td></tr><tr><td>corssorigin</td><td>可选</td><td>配置相关请求的CORS设置，默认不使用 CORS</td></tr><tr><td>defer</td><td>可选</td><td>立即下载脚本，不阻止页面其他操作，在文档解析完成后再执行脚本</td></tr><tr><td>integrity</td><td>可选</td><td>允许对比接收到的资源和指定的加密签名以验证资源的完整性，如果接收到的资源的签名与这个属性指定的签名不匹配，页面会报错，脚本不执行</td></tr><tr><td>language</td><td>废弃</td><td>用来标识代码块中的脚本语言，如 <code>VB</code>、<code>JS</code></td></tr><tr><td>src</td><td>可选</td><td>包含要执行代码的外部文件</td></tr><tr><td>type</td><td>可选</td><td>代替<code>language</code>，表示代码块中脚本语言的内容类型，一般是<code>text/javascript</code>，如果这个值是 <code>module</code> ，则代码会被当成 ES6 模块，而且只有这时候代码中才能出现 <code>import</code> 和 <code>export</code> 关键字</td></tr></tbody></table><p><strong>注意：</strong> 使用了 src 属性的 <code>&lt;script&gt;</code> 元素不应该再在元素中包含其他 javascript 代码，如果两者都提供的话，则浏览器只会下载并执行脚本，从而忽略行内代码</p><h3 id="lt-script-gt-标签位置"><a href="#lt-script-gt-标签位置" class="headerlink" title="&lt;script&gt; 标签位置"></a><code>&lt;script&gt;</code> 标签位置</h3><p>由于 script 标签会打断 DOM 的解析，所以将脚本放置在文档首部会阻塞 DOM 的解析，导致页面加载变慢，所以一般将 script 标签放在 body 元素中的内容后面，页面会在处理 js 代码之前完成渲染页面</p><h3 id="推迟脚本执行"><a href="#推迟脚本执行" class="headerlink" title="推迟脚本执行"></a>推迟脚本执行</h3><p>HTML4.0.1 为 script 标签定义了 defer 属性，这个属性表示脚本在整个页面解析完成之后再运行，HTML5 规范要求脚本要求脚本按照他们出现的顺序执行，因此第一个推迟的脚本会在第二个推迟的脚本之前运行（defer脚本按顺序执行），并且两者都会在 <code>DOMContentLoaded</code> 事件之前执行</p><h3 id="异步执行脚本"><a href="#异步执行脚本" class="headerlink" title="异步执行脚本"></a>异步执行脚本</h3><p>HTML5 为 script 元素定义了 async 属性，async 与 defer 类似，脚本的加载不会阻塞 DOM 的解析，但是 async 脚本加载完成会立即执行，如果此时还在进行 ODM 的解析，会打断 DOM 解析，被标记为 async 的脚本不能保证按照他们出现的顺序执行，异步脚本会在页面的 <code>load</code> 事件前执行</p><h3 id="动态加载脚本"><a href="#动态加载脚本" class="headerlink" title="动态加载脚本"></a>动态加载脚本</h3><p>除了 script 标签，还有其他方式加载脚本，</p><ol><li>使用 js 创建 script 标签</li><li>在文档头部预加载：<code>&lt;link rel=&quot;preload&quot; href=&quot;a.js&quot;&gt;</code></li></ol><h4 id="lt-noscript-gt-元素"><a href="#lt-noscript-gt-元素" class="headerlink" title="&lt;noscript&gt; 元素"></a><code>&lt;noscript&gt; 元素</code></h4><p>针对早期浏览器不支持 javascript 的问题，需要一个页面优雅降级的处理方案，<code>&lt;noscript&gt;</code> 元素出现，对不支持 javascript 的浏览器提供替代内容，与 <code>&lt;canvas&gt;</code> 元素中添加内容的目的一样，用于提示用户不支持相关操作</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li>使用外部 javascript 文件时，必须将 src 属性设置为包含文件的 URL</li><li>对于不推迟执行的脚本，通常会把 <code>&lt;script&gt;</code> 元素放到页面尾部，介于主内容尾部和<code>&lt;/body&gt;</code>标签之前</li><li>使用 defer 属性会把脚本推迟到文档渲染完毕之后执行，推迟的脚本总是按照他们被列出的次序执行</li><li>使用 async 属性异步加载脚本，让脚本加载完成立马执行</li><li>通过使用 <code>&lt;noscript&gt;</code> 元素指定浏览器不支持脚本时显示的内容</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、-lt-script-gt-元素&quot;&gt;&lt;a href=&quot;#一、-lt-script-gt-元素&quot; class=&quot;headerlink&quot; title=&quot;一、&amp;lt;script&amp;gt; 元素&quot;&gt;&lt;/a&gt;一、&amp;lt;script&amp;gt; 元素&lt;/h2&gt;&lt;p&gt;&lt;cod
      
    
    </summary>
    
    
      <category term="红宝书" scheme="http://blog.curtaintan.club/categories/%E7%BA%A2%E5%AE%9D%E4%B9%A6/"/>
    
    
      <category term="科普" scheme="http://blog.curtaintan.club/tags/%E7%A7%91%E6%99%AE/"/>
    
  </entry>
  
  <entry>
    <title>9.28-每日一题-填充节点的next指针</title>
    <link href="http://blog.curtaintan.club/2020/09/28/9-28-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    <id>http://blog.curtaintan.club/2020/09/28/9-28-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</id>
    <published>2020-09-28T00:17:23.000Z</published>
    <updated>2020-09-28T00:45:17.033Z</updated>
    
    <content type="html"><![CDATA[<ol start="117"><li>填充每个节点的下一个右侧节点指针 II</li></ol><p><fancybox><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/15/117_sample.png" alt=""></fancybox></p><a id="more"></a><h2 id="117-填充每个节点的下一个右侧节点指针-II"><a href="#117-填充每个节点的下一个右侧节点指针-II" class="headerlink" title="117. 填充每个节点的下一个右侧节点指针 II"></a><a href="https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node-ii/" target="_blank" rel="noopener">117. 填充每个节点的下一个右侧节点指针 II</a></h2><p>给定一个二叉树</p><blockquote><p>struct Node {<br>   int val;<br>   Node *left;<br>   Node *right;<br>   Node *next;<br>}</p></blockquote><p>填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 NULL。</p><p>初始状态下，所有 next 指针都被设置为 NULL。</p><p><fancybox><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/15/117_sample.png" alt=""></fancybox></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li>层序遍历，将节点一层一层的放到数组内</li><li>使用一个变量记录数组的长度</li><li>遍历这个长度的元素（一层的元素）， 将前一个元素的 next 指向下一个元素即可</li></ol><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * // Definition for a Node.</span></span><br><span class="line"><span class="comment"> * function Node(val, left, right, next) &#123;</span></span><br><span class="line"><span class="comment"> *    this.val = val === undefined ? null : val;</span></span><br><span class="line"><span class="comment"> *    this.left = left === undefined ? null : left;</span></span><br><span class="line"><span class="comment"> *    this.right = right === undefined ? null : right;</span></span><br><span class="line"><span class="comment"> *    this.next = next === undefined ? null : next;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;Node&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;Node&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> connect = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( !root ) <span class="keyword">return</span> root</span><br><span class="line">    <span class="comment">// 将首节点存入数组</span></span><br><span class="line">    <span class="keyword">let</span> arr = [ root ]</span><br><span class="line">    <span class="keyword">while</span>( arr.length )&#123;</span><br><span class="line">        <span class="comment">// 按层遍历元素</span></span><br><span class="line">        <span class="keyword">let</span> size = arr.length</span><br><span class="line">        <span class="keyword">while</span>( size-- )&#123;</span><br><span class="line">            <span class="keyword">let</span> item = arr.shift()</span><br><span class="line">            <span class="keyword">if</span>( size )&#123;</span><br><span class="line">                item.next = arr[<span class="number">0</span>]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将子节点存入数组</span></span><br><span class="line">            item.left &amp;&amp; arr.push( item.left )</span><br><span class="line">            item.right &amp;&amp; arr.push( item.right )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ol start=&quot;117&quot;&gt;
&lt;li&gt;填充每个节点的下一个右侧节点指针 II&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;fancybox&gt;&lt;img src=&quot;https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/15/117_sample.png&quot; alt=&quot;&quot;&gt;&lt;/fancybox&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://blog.curtaintan.club/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://blog.curtaintan.club/tags/leetcode/"/>
    
      <category term="二叉树" scheme="http://blog.curtaintan.club/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>红宝书第一章--什么是js</title>
    <link href="http://blog.curtaintan.club/2020/09/27/%E7%BA%A2%E5%AE%9D%E4%B9%A6%E7%AC%AC%E4%B8%80%E7%AB%A0-%E4%BB%80%E4%B9%88%E6%98%AFjs/"/>
    <id>http://blog.curtaintan.club/2020/09/27/%E7%BA%A2%E5%AE%9D%E4%B9%A6%E7%AC%AC%E4%B8%80%E7%AB%A0-%E4%BB%80%E4%B9%88%E6%98%AFjs/</id>
    <published>2020-09-27T06:41:42.000Z</published>
    <updated>2020-09-27T08:50:00.671Z</updated>
    
    <content type="html"><![CDATA[<h3 id="js-历史回顾"><a href="#js-历史回顾" class="headerlink" title="js 历史回顾"></a>js 历史回顾</h3><ol><li>问世缘由</li></ol><blockquote><p>1995年，javascript 问世。在此之前，要验证某个必填字段是否已填写，或某个输入值是否有效，需要与服务端进行一次往返通信，js 的用途就是代替服务端语言处理输入验证。</p></blockquote><ol start="2"><li>ECMAScript 与 javascript 的关系</li></ol><blockquote><p>1995 年 Brandan Eich 花了 10 天写出 javascript，并把它内置到网景浏览器2中，让 web 大受欢迎，此时，微软决定向 IE 投入更多资源，网景浏览器3发布不久，微软发布了 IE3，其中包含了自己名为 JScript 的 javascript 实现。<br>微软的 javascript 实现意味着出现了两个版本的 javascript：网景的 javascript 和 微软的 JScript，1997 年，javascript1.1 作为题提案被提交给欧洲计算机制造商协会（Ecma），第 39 技术委员会承担了“标准化一门通用、跨平台、厂商中立的脚本语言的语法和语义”的任务，此后，各家浏览器均以 ECMAScript 作为自己 JavaScript 实现的一句，虽然具体实现各不相同</p></blockquote><h3 id="JavaScript-的实现"><a href="#JavaScript-的实现" class="headerlink" title="JavaScript 的实现"></a>JavaScript 的实现</h3><p>虽然 JavaScript 和 ECMAScript 基本上是同义词，但是 js 不限于 ECMAScript，完整的 JavaScript 包含以下三个部分：</p><ol><li>核心（ECMAScript）</li><li>文档对象模型（DOM）</li><li>浏览器对象模型（BOM）</li></ol><h4 id="ECMAScript-概述"><a href="#ECMAScript-概述" class="headerlink" title="ECMAScript 概述"></a>ECMAScript 概述</h4><p>ECMAScript 作为一门语言的基准定义，目的是在它之上再构建更稳定的脚本语言</p><p>web 浏览器只是 ECMAScript 实现的一种宿主环境，宿主环境提供 ECMAScript 的基准实现和自身交互必须的扩展。扩展（比如 DOM 和 BOM）使用 ECMAScript 核心类型和语法，提供特定环境的额外功能</p><p><strong>ECMAScript 版本概述</strong></p><ol><li>ES1：本质上与网景的JavaScript1.1相同，删除所有浏览器特定的代码</li><li>ES2：只做了一些编校工作</li><li>ES3：第一次对标准进行更新，新增字符串处理、错误定义和数值输出，添加了正则、新的控制语句、try/catch的支持</li><li>ES4：进行彻底修订，包括强类型变量、新语句和数据结构、真正的类和经典的继承，以及操作数据的新手段，为了避免改动太大，又制定了 ES3.1</li><li>ES5：ES3.1 变成了 ES5，于2009年12月发布，添加了序列化和解析 JSON 数据的 JSON 对象、继承、增强 ES 引擎解释和执行代码能力的严格模式</li><li>ES6：于2015年6月发布，这一版包含了有史以来最重要的一批增强特性，正式支持了类、模块、迭代器、生成器、箭头函数、期约、反射、代理和众多新的数据类型</li><li>ES7：于2016年6月发布，新增少量api，如 <code>Array.prototype.includes</code> 和指数操作</li><li>ES8：完成于2017年6月，添加异步函数（async/await）、<code>SharedArrayBuffer</code> 等</li><li>ES9：发布于2018年6月，对原始对象添加方法，如正则和promise</li><li>ES10：发布于2019年6月，对原始对象添加方法，如数组，并添加新的语法如：<code>obj?.name?.first</code></li></ol><h4 id="DOM-简介"><a href="#DOM-简介" class="headerlink" title="DOM 简介"></a>DOM 简介</h4><p>DOM 通过创建表示文档的树，让开发者可以随心所欲的控制网页中的内容和结构。使用 DOM API，可以轻松的删除、添加、替换、修改节点</p><h4 id="BOM简介"><a href="#BOM简介" class="headerlink" title="BOM简介"></a>BOM简介</h4><p>IE3 和 网景浏览器3 提供了浏览器对象模型 API，用于支持访问和操作浏览器的窗口，它是唯一一个没有相关标准的 JavaScript 实现。但是 HTML5 正在规范尽可能多的 BOM 特性</p><p><strong>BOM的能力</strong></p><ol><li>弹出新浏览器窗口</li><li>移动、缩放和关闭浏览器窗口</li><li>navigator 对象，获取浏览器相关信息</li><li>location 对象，网页信息</li><li>screen 对象，屏幕信息</li><li>performance 对象，提供浏览器占用内存、导航行为等信息</li><li>cookie </li><li>其他自定义对象：<code>XMLHttpRequest</code> 和 <code>ActiveXObject</code></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;js-历史回顾&quot;&gt;&lt;a href=&quot;#js-历史回顾&quot; class=&quot;headerlink&quot; title=&quot;js 历史回顾&quot;&gt;&lt;/a&gt;js 历史回顾&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;问世缘由&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;1995年，javasc
      
    
    </summary>
    
    
      <category term="红宝书" scheme="http://blog.curtaintan.club/categories/%E7%BA%A2%E5%AE%9D%E4%B9%A6/"/>
    
    
      <category term="科普" scheme="http://blog.curtaintan.club/tags/%E7%A7%91%E6%99%AE/"/>
    
  </entry>
  
  <entry>
    <title>9.27-每日一题-二叉搜索树的最近公共祖先</title>
    <link href="http://blog.curtaintan.club/2020/09/27/9.27-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    <id>http://blog.curtaintan.club/2020/09/27/9.27-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</id>
    <published>2020-09-27T02:33:54.000Z</published>
    <updated>2020-09-27T06:27:02.312Z</updated>
    
    <content type="html"><![CDATA[<ol start="235"><li>二叉搜索树的最近公共祖先</li></ol><a id="more"></a><h2 id="235-二叉搜索树的最近公共祖先"><a href="#235-二叉搜索树的最近公共祖先" class="headerlink" title="235. 二叉搜索树的最近公共祖先"></a><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree/" target="_blank" rel="noopener">235. 二叉搜索树的最近公共祖先</a></h2><p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</p><p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p><p>例如，给定如下二叉搜索树:  root = [6,2,8,0,4,7,9,null,null,3,5]</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/binarysearchtree_improved.png" alt=""></p><p><strong>示例 1:</strong></p><blockquote><p>输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8<br>输出: 6<br>解释: 节点 2 和节点 8 的最近公共祖先是 6。</p></blockquote><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>主要分为两步：</p><ol><li>遍历一次二叉树，节点的值与两个目标值对比，对比成功，将路径存到两个数组内</li><li>以较短的数组作为标准，再比对两个数组，当两个节点的值不一样时，取数组的前一个节点返回，当遍历结束依然没有找到不相等的节点，返回短数组的尾节点</li></ol><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lowestCommonAncestor = <span class="function"><span class="keyword">function</span>(<span class="params">root, p, q</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> dfs = <span class="function">(<span class="params"> node, path=[], target, target2, res=[], res2=[] </span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>( !node ) <span class="keyword">return</span> path</span><br><span class="line">        path = [ ...path, node ]</span><br><span class="line">        <span class="keyword">if</span>( target === node.val )&#123;</span><br><span class="line">            res.push( ...path )</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( target2 === node.val )&#123;</span><br><span class="line">            res2.push( ...path )</span><br><span class="line">        &#125;</span><br><span class="line">        node.left &amp;&amp; dfs( node.left, [...path], target, target2, res, res2 )</span><br><span class="line">        node.right &amp;&amp; dfs( node.right, [...path], target, target2, res, res2 )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="keyword">let</span> res2 = []</span><br><span class="line">    <span class="keyword">let</span> ret = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 找两个路径，放入数组</span></span><br><span class="line">    dfs( root, [], p.val, q.val, res, res2 )</span><br><span class="line">    <span class="comment">// 进行对比，获取公共节点</span></span><br><span class="line">    <span class="keyword">let</span> map = res.length &lt; res2.length ? res : res2</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">let</span> i = <span class="number">0</span>; i &lt; map.length; i ++ )&#123;</span><br><span class="line">        <span class="keyword">if</span>( res[i].val !== res2[i].val )&#123;</span><br><span class="line">            ret = res[ i<span class="number">-1</span> ]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret ? ret : map[ map.length - <span class="number">1</span> ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ol start=&quot;235&quot;&gt;
&lt;li&gt;二叉搜索树的最近公共祖先&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://blog.curtaintan.club/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://blog.curtaintan.club/tags/leetcode/"/>
    
      <category term="二叉树" scheme="http://blog.curtaintan.club/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="二叉搜索树" scheme="http://blog.curtaintan.club/tags/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>拖拽 DOM 碰撞检测</title>
    <link href="http://blog.curtaintan.club/2020/05/07/%E7%A2%B0%E6%92%9E%E6%A3%80%E6%B5%8B/"/>
    <id>http://blog.curtaintan.club/2020/05/07/%E7%A2%B0%E6%92%9E%E6%A3%80%E6%B5%8B/</id>
    <published>2020-05-07T01:56:28.000Z</published>
    <updated>2020-09-27T06:33:28.750Z</updated>
    
    <content type="html"><![CDATA[<p>拖拽 DOM 碰撞检测</p><p><fancybox><img src="https://s1.ax1x.com/2020/05/07/YZuNeH.png" alt=""></fancybox></p><a id="more"></a><h2 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h2><p>总共分为两步：</p><ol><li>实现拖拽</li><li>碰撞检测</li></ol><h2 id="实现拖拽"><a href="#实现拖拽" class="headerlink" title="实现拖拽"></a>实现拖拽</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> red = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"red"</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">red.addEventListener( <span class="string">"mousedown"</span>, (event) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 事先记录下与元素左上角的偏移</span></span><br><span class="line">    <span class="keyword">let</span> left = event.clientX - red.offsetLeft;</span><br><span class="line">    <span class="keyword">let</span> top = event.clientY - red.offsetTop;</span><br><span class="line">    <span class="comment">// 使用 addEventListener 方式添加事件监听，后期不好移除，故使用 onmousemove</span></span><br><span class="line">    <span class="built_in">document</span>.onmousemove = move.bind( <span class="keyword">this</span>, left, top )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听抬起事件</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"mouseup"</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">document</span>.onmousemove = <span class="string">""</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params"> left, top </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> event = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>)[<span class="number">2</span>];</span><br><span class="line">    <span class="comment">// 先固定左上角的偏移量 - 偏移量，让元素跟随鼠标移动</span></span><br><span class="line">    red.style.left = event.clientX - left + <span class="string">"px"</span>;</span><br><span class="line">    red.style.top = event.clientY - top + <span class="string">"px"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DOM-碰撞检测"><a href="#DOM-碰撞检测" class="headerlink" title="DOM 碰撞检测"></a>DOM 碰撞检测</h2><p><fancybox><img src="https://s1.ax1x.com/2020/05/07/YZuNeH.png" alt=""></fancybox></p><ol><li>当div1在div2的上边线(t2)以上的区域活动时，始终碰不上</li><li>当div1在div2的右边线(r2)以右的区域活动时,始终碰不上</li><li>当div1在div2的下边线(b2)以下的区域活动时,始终碰不上</li><li>当div1在div2的左边线(r2)以左的区域活动时,始终碰不上</li></ol><p>除了以上四种情况，其他情况表示div1和div2碰上了，下面试完整测试代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"green"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.red</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            background-color: red;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.green</span>&#123;</span></span><br><span class="line">            background-color: green;</span><br><span class="line">            position: relative;</span><br><span class="line">            top: 300px;</span><br><span class="line">            left: 300px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.blue</span> &#123;</span></span><br><span class="line">            background-color: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    /**</span><br><span class="line">     * 题目描述：在页面中写一个红色正方形，实现红色正方形拖拽到页面的任意位置，随鼠标一起动，</span><br><span class="line">     * 页面中有另一个绿色正方形，当鼠标拖动红色正方形移动到绿色正方形时，绿色正方形变蓝色</span><br><span class="line">     * </span><br><span class="line">     * 实现思路：1.实现随鼠标拖拽，2.拖拽的过程中判定是否碰撞</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> red = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"red"</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> green = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"green"</span>)[<span class="number">0</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">move</span><span class="params">( left, top )</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> event = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>)[<span class="number">2</span>];</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 先固定左上角的偏移量 - 偏移量，让元素跟随鼠标移动</span></span></span><br><span class="line"><span class="actionscript">        red.style.left = event.clientX - left + <span class="string">"px"</span>;</span></span><br><span class="line"><span class="actionscript">        red.style.top = event.clientY - top + <span class="string">"px"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 获取目标元素四个边框的偏移</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> greenleft = green.offsetLeft</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> greenTop = green.offsetTop</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> greenRight = green.offsetLeft + green.offsetWidth</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> greenbottom = green.offsetTop + green.offsetHeight</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 拖拽元素的左边框偏移 大于 目标元素的右边框偏移</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 拖拽元素的顶部边框偏移 大于 目标元素的底部偏移</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 拖拽元素的右边框偏移 小于 目标元素的左边框偏移</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 拖拽元素的底部边框偏移 大于 目标元素的顶部边框偏移</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 其中一个成立，就代表没有碰撞，反之则表示已经碰撞</span></span></span><br><span class="line">        if( red.offsetLeft &gt; greenRight || </span><br><span class="line">        red.offsetTop &gt; greenbottom|| </span><br><span class="line">        red.offsetLeft + red.offsetWidth &lt; greenleft || </span><br><span class="line">        red.offsetTop + red.offsetHeight &lt; greenTop)&#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 移除 css 类</span></span></span><br><span class="line"><span class="actionscript">            green.classList.remove(<span class="string">"blue"</span>)</span></span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">            green.classList.add(<span class="string">"blue"</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    red.addEventListener( <span class="string">"mousedown"</span>, (event) =&gt; &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 事先记录下与元素左上角的偏移</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> left = event.clientX - red.offsetLeft;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> top = event.clientY - red.offsetTop;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 使用 addEventListener 方式添加事件监听，后期不好移除，故使用 onmousemove</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.onmousemove = move.bind( <span class="keyword">this</span>, left, top )</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 监听抬起事件</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.addEventListener(<span class="string">"mouseup"</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.onmousemove = <span class="string">""</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="参考材料"><a href="#参考材料" class="headerlink" title="参考材料"></a>参考材料</h2><p><a href="https://www.jb51.net/article/133260.htm" target="_blank" rel="noopener">JS实现碰撞检测的方法分析</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;拖拽 DOM 碰撞检测&lt;/p&gt;
&lt;p&gt;&lt;fancybox&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/05/07/YZuNeH.png&quot; alt=&quot;&quot;&gt;&lt;/fancybox&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://blog.curtaintan.club/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>从 0 写一个简单的 React.js</title>
    <link href="http://blog.curtaintan.club/2020/02/23/%E4%BB%8E0%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84React.js/"/>
    <id>http://blog.curtaintan.club/2020/02/23/%E4%BB%8E0%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84React.js/</id>
    <published>2020-02-22T17:11:26.000Z</published>
    <updated>2020-02-24T03:55:56.398Z</updated>
    
    <content type="html"><![CDATA[<p>从 0 写一个简单的 React.js</p><a id="more"></a><h1 id="从-0-写一个简单的-React-js"><a href="#从-0-写一个简单的-React-js" class="headerlink" title="从 0 写一个简单的 React.js"></a>从 0 写一个简单的 React.js</h1><p>预览：<a href="https://curtaintan.github.io/create-simple-react/dist/index.html" target="_blank" rel="noopener">点击直达</a><br>源码地址：<a href="https://github.com/curtainTan/create-simple-react" target="_blank" rel="noopener">github</a><br>文章地址：<a href="http://blog.curtaintan.club/2020/02/23/%E4%BB%8E0%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84React.js/">博客-从 0 写一个简单的 React.js</a></p><p>简单的实现如下功能：</p><ol><li>将 jsx 使用 babel 转换成 vnode</li><li>组件是实现</li><li>生命周期的实现</li><li>diff 算法（这里没懂）</li><li>异步的setState</li></ol><p>下面，我将总结一下整体的实现过程。</p><h2 id="1-React-createElement-的实现"><a href="#1-React-createElement-的实现" class="headerlink" title="1. React.createElement() 的实现"></a>1. React.createElement() 的实现</h2><p>当我们在写 React 组件的时候，你是否有疑惑我们为什么要引入 React ，但是从来没用到呢？？</p><p>其实我们用到了，因为我们用到了 <code>React.createElement()</code> 函数，此方法搭配 babel 插件将 jsx 转化成 vnode。</p><h2 id="2-将-jsx-使用-babel-转换成-vnode"><a href="#2-将-jsx-使用-babel-转换成-vnode" class="headerlink" title="2. 将 jsx 使用 babel 转换成 vnode"></a>2. 将 jsx 使用 babel 转换成 vnode</h2><p>使用 babel 插件 @babel/plugin-transform-react-jsx 将 jsx 转换成 vnode 对象。</p><figure class="highlight js"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ele = (</span><br><span class="line">    &lt;div className=<span class="string">"active"</span> title=<span class="string">"tan"</span>&gt;</span><br><span class="line">        hello,&lt;span&gt;react&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">)</span><br><span class="line"><span class="built_in">console</span>.log( ele )</span><br></pre></td></tr></table></figure><p><fancybox><img src=https://image.gslb.dawnlab.me/a5f402a0b0b9d8d105d1993394bb8bb7.png alt="图片显示失败" /></fancybox></p><h2 id="3-react-dom-将-vnode-转换成真正的-DOM-此时没有实现组件"><a href="#3-react-dom-将-vnode-转换成真正的-DOM-此时没有实现组件" class="headerlink" title="3. react-dom 将 vnode 转换成真正的 DOM (此时没有实现组件)"></a>3. react-dom 将 vnode 转换成真正的 DOM (此时没有实现组件)</h2><p>react-dom 上有一个 render 函数，将获得到的 vnode 转换成真实的 dom，并把它挂在到dom节点（第二个参数）上。</p><p>根据 vnode 的结果可以得到，vnode 有两种情况：</p><ol><li>vnode 是直接渲染的内容（文字）</li><li>vnode 是一个对象，代表一个 dom 元素（拥有 tag 属性）</li></ol><p>此时，我们只需递归创建元素，最后依次挂载到父元素上即可：</p><figure class="highlight js"><figcaption><span>render函数</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_render</span>(<span class="params"> vnode, container </span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 第一种情况</span></span><br><span class="line">    <span class="keyword">if</span>( vnode === <span class="literal">undefined</span> || vnode === <span class="literal">null</span> || <span class="keyword">typeof</span> vnode === <span class="string">"boolean"</span> ) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// 数字转换成 字符串</span></span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">typeof</span> vnode === <span class="string">"number"</span> ) vnode = <span class="built_in">String</span>( vnode )</span><br><span class="line">    <span class="comment">// 如果 vnode 是字符串，直接渲染</span></span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">typeof</span> vnode === <span class="string">"string"</span> )&#123;</span><br><span class="line">        <span class="comment">// 创建文本节点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">document</span>.createTextNode( vnode )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二种情况</span></span><br><span class="line">    <span class="comment">// vnode 是虚拟 DOM 对象</span></span><br><span class="line">    <span class="keyword">const</span> &#123; tag, attrs &#125; = vnode</span><br><span class="line">    <span class="comment">// 创建节点对象</span></span><br><span class="line">    <span class="keyword">const</span> dom = <span class="built_in">document</span>.createElement( tag )</span><br><span class="line">    <span class="comment">// 绑定属性</span></span><br><span class="line">    <span class="keyword">if</span>( attrs )&#123;</span><br><span class="line">        <span class="built_in">Object</span>.keys( attrs ).forEach( <span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> value = attrs[key]</span><br><span class="line">            setAttribute( dom,  key, value )</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 递归 渲染子节点</span></span><br><span class="line">    vnode.childrens &amp;&amp; vnode.childrens.forEach( <span class="function"><span class="params">child</span> =&gt;</span> render( child, dom ) )</span><br><span class="line">    <span class="comment">// 返回节点 并挂载子节点</span></span><br><span class="line">    <span class="keyword">return</span> container.appendChild( dom )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-实现函数组件和类组件"><a href="#4-实现函数组件和类组件" class="headerlink" title="4. 实现函数组件和类组件"></a>4. 实现函数组件和类组件</h2><p>实现思路：将函数组件封装成类组件，通过执行类组件的 render 函数得到 vnode</p><p>先看 vnode 结构：</p><figure class="highlight js"><figcaption><span>组件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"../react/index.js"</span></span><br><span class="line"><span class="keyword">const</span> ele = (</span><br><span class="line">    &lt;div className=<span class="string">"active"</span> title=<span class="string">"tan"</span>&gt;</span><br><span class="line">        hello,&lt;span&gt;react&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Home name="arr name" /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 函数组件</span></span><br><span class="line"><span class="regexp">function Home()&#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">        &lt;div className="active" title="tan"&gt;</span></span><br><span class="line"><span class="regexp">            hello,&lt;span&gt;react&lt;/</span>span&gt;</span><br><span class="line">            &#123;<span class="comment">/* &lt;Tan tan="我是传进来的参数" /&gt; */</span>&#125;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">console.log( ele )</span></span><br></pre></td></tr></table></figure><p><fancybox><img src=https://image.gslb.dawnlab.me/63dc847ab7cf8eb4764eb45a4136af2d.png alt="图片显示失败" /></fancybox></p><p>可见，<code>&lt;Home /&gt;</code> 被转换成了一个函数，此时，在 render 函数中，我们要多一个判断，并且我们将函数组件封装成类组件，方便统一管理、注入生命周期等，执行过程：</p><ol><li>判定是函数，调用 createComponent() 函数</li><li>使用 createComponent() 函数，将函数封装成类组件，返回类实例</li><li>使用 setComponentProps() 函数，设置组件的 props</li><li>调用 renderComponent() 函数，获取 vnode</li><li>使用 vnode 生成 dom 并返回渲染</li></ol><p><strong>实现代码请参考：</strong>react-dom/index.js</p><p><fancybox><img src=https://image.gslb.dawnlab.me/9d9cc84c24a612978e42a33c59e1ca1c.png alt="图片显示失败" /></fancybox></p><h2 id="5-实现生命周期"><a href="#5-实现生命周期" class="headerlink" title="5. 实现生命周期"></a>5. 实现生命周期</h2><p>在上述执行的过程中，插入生命周期。</p><p><strong>实现代码请参考：</strong>react-dom/index.js</p><h2 id="6-实现-diff-算法"><a href="#6-实现-diff-算法" class="headerlink" title="6. 实现 diff 算法"></a>6. 实现 diff 算法</h2><p>实质：与 dom 节点的 attribute 进行对比，替换数据已经变化的 DOM 节点，是 DOM 节点</p><p>实现思路：获取当前 dom 下<strong>一层</strong>的子节点，分出 vnode 下有 key 属性的节点（这里没懂）（ diffChildren 函数），遍历虚拟节点，对比是否改变，移除原组件，并在原位置插入新 dom（使用兄弟组件实现插入到原位置）</p><p><strong>实现代码请参考：</strong>react-dom/index.js，react-dom/diff.js</p><h2 id="7-实现异步-setState"><a href="#7-实现异步-setState" class="headerlink" title="7. 实现异步 setState"></a>7. 实现异步 setState</h2><p>异步 setState 可以优化整体的性能，避免不必要的渲染。</p><p>实质：使用 Object.assign() 合并多次 setState 的结果，只返回最终的结果。</p><p>实现思路：使用两个队列，一个保存 setState， 一个保存当前组件，一个组件一个组件的完成 setState，当完成 setState 后，执行 renderComponent() 函数，渲染组件</p><h2 id="8-总结"><a href="#8-总结" class="headerlink" title="8. 总结"></a>8. 总结</h2><p>跟着教程<strong><a href="https://www.bilibili.com/video/av68588169" target="_blank" rel="noopener">从0撸一个丐版React.js</a></strong>一步一步搭建而成，虽有不懂，但是收获良多。</p><p>首先，感谢视频的分享，让我有机会一步一步的学习并实践。</p><p>通过一步一步的实际操作，对 react 整体的执行流程有了一定的认识，</p><p>加油！</p><p>2020.2.23 1.03</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从 0 写一个简单的 React.js&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://blog.curtaintan.club/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>javascript之DOM事件</title>
    <link href="http://blog.curtaintan.club/2020/02/22/javascript%E4%B9%8BDOM%E4%BA%8B%E4%BB%B6/"/>
    <id>http://blog.curtaintan.club/2020/02/22/javascript%E4%B9%8BDOM%E4%BA%8B%E4%BB%B6/</id>
    <published>2020-02-22T06:34:43.000Z</published>
    <updated>2020-02-24T03:56:07.771Z</updated>
    
    <content type="html"><![CDATA[<p><fancybox><img src="https://image.gslb.dawnlab.me/a3a95260bca8115d010a419ee021f85a.png" alt=""></fancybox></p><p>本文主要介绍 DOM 事件级别、DOM 事件模型、事件流、Event 对象常见的应用和自定义 DOM 事件。</p><a id="more"></a><h1 id="1-DOM-事件级别"><a href="#1-DOM-事件级别" class="headerlink" title="1. DOM 事件级别"></a>1. DOM 事件级别</h1><p>DOM 事件分为3个级别：DOM 0级事件处理，DOM 2级事件处理和DOM 3级事件处理。</p><h2 id="1-1-DOM-0级事件"><a href="#1-1-DOM-0级事件" class="headerlink" title="1.1 DOM 0级事件"></a>1.1 DOM 0级事件</h2><p><strong>el.onclick=function(){}</strong></p><figure class="highlight js"><figcaption><span>DOM 0级事件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span><br><span class="line"> btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     alert(<span class="keyword">this</span>.innerHTML);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>为元素的一种事件绑定一个方法，这些方法都在冒泡阶段执行。</p><h2 id="1-2-DOM-2级事件"><a href="#1-2-DOM-2级事件" class="headerlink" title="1.2 DOM 2级事件"></a>1.2 DOM 2级事件</h2><p><strong>el.addEventListener(event-name, callback, useCapture)</strong></p><ul><li>event-name: 事件名称，可以是标准的DOM事件</li><li>callback: 回调函数，当事件触发时，函数会被注入一个参数为当前的事件对象 event</li><li>useCapture: 默认是false，代表事件句柄在冒泡阶段执行</li></ul><figure class="highlight js"><figcaption><span>DOM 2级事件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, test, <span class="literal">false</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">e = e || <span class="built_in">window</span>.event;</span><br><span class="line">    alert((e.target || e.srcElement).innerHTML);</span><br><span class="line">    btn.removeEventListener(<span class="string">"click"</span>, test)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//IE9-:attachEvent()与detachEvent()。</span></span><br><span class="line"><span class="comment">//IE9+/chrom/FF:addEventListener()和removeEventListener()</span></span><br></pre></td></tr></table></figure><p>IE9以下的IE浏览器不支持 addEventListener()和removeEventListener()，使用 attachEvent()与detachEvent() 代替，因为IE9以下是不支持事件捕获的，所以也没有第三个参数，第一个事件名称前要加on。</p><h1 id="1-3-DOM-3级事件"><a href="#1-3-DOM-3级事件" class="headerlink" title="1.3 DOM 3级事件"></a>1.3 DOM 3级事件</h1><p>在DOM 2级事件的基础上添加了更多的事件类型。</p><ul><li>UI事件，当用户与页面上的元素交互时触发，如：load、scroll</li><li>焦点事件，当元素获得或失去焦点时触发，如：blur、focus</li><li>鼠标事件，当用户通过鼠标在页面执行操作时触发如：dblclick、mouseup</li><li>滚轮事件，当使用鼠标滚轮或类似设备时触发，如：mousewheel</li><li>文本事件，当在文档中输入文本时触发，如：textInput</li><li>键盘事件，当用户通过键盘在页面上执行操作时触发，如：keydown、keypress</li><li>合成事件，当为IME（输入法编辑器）输入字符时触发，如：compositionstart</li><li>变动事件，当底层DOM结构发生变化时触发，如：DOMsubtreeModified</li><li>动画事件，当css3 animation动画执行开始和结束时触发，如：webkitAnimationEnd mozAnimationEnd</li><li>同时DOM3级事件也允许使用者自定义一些事件。</li></ul><p><strong>说明：</strong></p><p>动画事件中不同浏览器的AnimationEnd写法：</p><ul><li>谷歌浏览器：webkitAnimationEnd</li><li>火狐浏览器：mozAnimationEnd</li><li>IE系浏览器：MSAnimationEnd</li><li>欧朋浏览器：oanimationend</li><li>通用浏览器：animationend</li></ul><h1 id="2、DOM事件模型和事件流"><a href="#2、DOM事件模型和事件流" class="headerlink" title="2、DOM事件模型和事件流"></a>2、DOM事件模型和事件流</h1><p><strong>DOM事件模型分为捕获和冒泡。</strong>一个事件发生后，会在子元素和父元素之间传播（propagation）。这种传播分成三个阶段。</p><p>（1）捕获阶段：事件从window对象自上而下向目标节点传播的阶段；<br>（2）目标阶段：真正的目标节点正在处理事件的阶段；<br>（3）冒泡阶段：事件从目标节点自下而上向window对象传播的阶段。</p><p><strong>DOM事件捕获的具体流程</strong><br><fancybox><img src="https://image.gslb.dawnlab.me/bdfc8b5d16793a07dd301bdf2e3029c5.png" alt=""></fancybox></p><p>捕获是从上到下，事件先从window对象，然后再到document（对象），然后是html标签（通过document.documentElement获取html标签），然后是body标签（通过document.body获取body标签），然后按照普通的html结构一层一层往下传，最后到达目标元素。</p><p>这一系列的事件，就构成了事件流..</p><h1 id="3、Event对象常见的应用"><a href="#3、Event对象常见的应用" class="headerlink" title="3、Event对象常见的应用"></a>3、Event对象常见的应用</h1><h2 id="3-1-阻止默认事件"><a href="#3-1-阻止默认事件" class="headerlink" title="3.1 阻止默认事件"></a>3.1 阻止默认事件</h2><p><strong>event. preventDefault()</strong></p><p>调用此方法，将阻止默认事件的触发，例如：a 标签的跳转</p><p>阻止默认事件触发的方法：</p><figure class="highlight js"><figcaption><span>阻止默认事件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 使用空的 js </span></span><br><span class="line">&lt;a href=<span class="string">"javascript:;"</span>&gt;链接&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 2. 返回 false</span></span><br><span class="line"><span class="regexp">&lt;a id="test" href="http:/</span><span class="regexp">/www.cnblogs.com"&gt;链接&lt;/</span>a&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">test.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    e = e || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 3. 使用 preventDefault</span></span><br><span class="line"><span class="regexp">&lt;a id="test" href="http:/</span><span class="regexp">/www.cnblogs.com"&gt;链接&lt;/</span>a&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">test.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    e = e || <span class="built_in">window</span>.event;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-2-阻止事件冒泡"><a href="#3-2-阻止事件冒泡" class="headerlink" title="3.2 阻止事件冒泡"></a>3.2 阻止事件冒泡</h2><p><strong>event.stopPropagation()</strong></p><p>调用此方法，事件将停止冒泡。</p><h2 id="3-3-停止事件传播"><a href="#3-3-停止事件传播" class="headerlink" title="3.3 停止事件传播"></a>3.3 停止事件传播</h2><p><strong>event.stopImmediatePropagation()</strong></p><p>调用此方法，将阻止此方法后面的方法执行。例如：一个事件绑定多个方法，方法依次调用，调用此方法后面的方法将不会执行，且阻止事件冒泡。</p><figure class="highlight js"><figcaption><span>停止事件传播 stopImmediatePropagation</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">".btn"</span>)</span><br><span class="line"><span class="comment">// 第一个事件</span></span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> e </span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"我是第一个注册的事件"</span> )</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 注册第二个事件</span></span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> e </span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"我是第二个注册的事件，我要调用 event.stopImmediatePropagation()方法"</span> )</span><br><span class="line">    e.stopImmediatePropagation()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 注册第三个事件</span></span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> e </span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"我是第三个注册的事件"</span> )</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// document 捕获阶段事件</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener( <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"document---我在捕获阶段执行"</span> )</span><br><span class="line">&#125;, <span class="literal">true</span> )</span><br><span class="line"><span class="comment">// document 冒泡阶段事件</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener( <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"document---我在冒泡阶段执行"</span> )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong><br><fancybox><img src="https://image.gslb.dawnlab.me/bc3edc164f68c3acd2a32d51e9beb0b7.png" alt=""></fancybox></p><h2 id="3-4-获取被点击的子元素"><a href="#3-4-获取被点击的子元素" class="headerlink" title="3.4 获取被点击的子元素"></a>3.4 获取被点击的子元素</h2><p><strong>event.target</strong></p><p>将被点击的子元素绑定在此属性上，我们可以用此 <code>event.target</code> + <code>data-** 自定义属性</code> 实现事件代理。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-index</span>=<span class="string">"1"</span> &gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-index</span>=<span class="string">"2"</span> &gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-index</span>=<span class="string">"3"</span> &gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-index</span>=<span class="string">"4"</span> &gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-index</span>=<span class="string">"5"</span> &gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">"ul"</span>)</span></span><br><span class="line"><span class="actionscript">    ul.addEventListener( <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log( <span class="string">"e.target:"</span> )</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.dir( e.target )</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 使用 dataset 获取绑定在元素上的标记属性（例如：元素下标）</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log( <span class="string">"e.target.dataset"</span>, e.target.dataset )</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/49d08a68cf0a0a4804c1d243ccd9deee.png" alt=""></fancybox></p><h2 id="3-5-获取当前注册事件元素"><a href="#3-5-获取当前注册事件元素" class="headerlink" title="3.5 获取当前注册事件元素"></a>3.5 获取当前注册事件元素</h2><p><strong>event.currentTarget</strong></p><p>使用该属性，获取当前注册事件的元素。</p><h1 id="4-自定义事件"><a href="#4-自定义事件" class="headerlink" title="4. 自定义事件"></a>4. 自定义事件</h1><p>可以使用两种方式自定义事件：<code>new Event( eventType )</code> 和 <code>new CustomEvent( eventType, params )</code></p><h2 id="4-1-new-Event"><a href="#4-1-new-Event" class="headerlink" title="4.1 new Event()"></a>4.1 new Event()</h2><p>语法：<code>event = new Event(eventType, eventInit);</code></p><p>一般只传递第一个参数``eventType`，后面为 Event 对象上的参数</p><h2 id="4-2-CustomEvent"><a href="#4-2-CustomEvent" class="headerlink" title="4.2 CustomEvent()"></a>4.2 CustomEvent()</h2><p>语法：<code>event = new CustomEvent(eventType, { detail：params });</code></p><p>eventType：事件名称<br>params：自定义参数</p><h2 id="4-3-合并案例"><a href="#4-3-合并案例" class="headerlink" title="4.3 合并案例"></a>4.3 合并案例</h2><figure class="highlight js"><figcaption><span>自定义事件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">".btn"</span>)</span><br><span class="line"><span class="comment">// Event 自定义事件</span></span><br><span class="line"><span class="keyword">var</span> eve = <span class="keyword">new</span> Event(<span class="string">"go"</span>)</span><br><span class="line">btn.addEventListener( <span class="string">"go"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> e </span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"我是自定义事件："</span>, e )</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// CustomEvent 事件构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCustomEvent</span>(<span class="params"> eventType = <span class="string">"mock-event"</span>, params = &#123;&#125; </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CustomEvent( eventType, &#123; <span class="attr">detail</span>: params &#125; )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// CustomEvent 事件</span></span><br><span class="line"><span class="keyword">var</span> event = createCustomEvent( <span class="string">"customGo"</span>, &#123; <span class="attr">name</span>: <span class="string">"tan"</span> &#125; )</span><br><span class="line">btn.addEventListener( <span class="string">"customGo"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> data </span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"我是传参事件------"</span>, data )</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 触发事件各个</span></span><br><span class="line">btn.addEventListener( <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"我的定义的 Click 事件"</span> )</span><br><span class="line">    btn.dispatchEvent( eve )</span><br><span class="line">    btn.dispatchEvent( event )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/b5f271429ec73092af1077f1dc0f92a8.png" alt=""></fancybox></p><h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h1><p>关于事件，需要记住 </p><ol><li><code>addEventListener()</code> 函数的使用，</li><li><code>e.preventDefault()</code> 禁止默认事件</li><li><code>e.stopPropagation()</code> 阻止冒泡</li><li><code>e.target.dataset</code> 获取 dom 中 <code>data-**</code> 自定义属性</li></ol><p>自定义时间需要了解，并且自定义事件类似观察者模式，需要手动触发事件。</p><h1 id="6-参考材料"><a href="#6-参考材料" class="headerlink" title="6. 参考材料"></a>6. 参考材料</h1><p><a href="https://juejin.im/post/5bd2e5f8e51d4524640e1304" target="_blank" rel="noopener">浪里行舟-DOM事件机制</a></p><p><a href="https://juejin.im/post/5c4bd01fe51d45522b4f6e4e" target="_blank" rel="noopener">DOM 事件详解</a></p><p><a href="https://blog.csdn.net/qappleh/article/details/97778386" target="_blank" rel="noopener">css3判断animation动画是否完成，以及在动画完成后执行事件</a></p><p><a href="https://www.cnblogs.com/xmlys/p/7716134.html" target="_blank" rel="noopener">CSS浏览器前缀兼容写法</a></p><p><a href="https://www.cnblogs.com/cwsb/p/10384219.html" target="_blank" rel="noopener">自定义事件——Event和CustomEvent</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent" target="_blank" rel="noopener">MDN-CustomEvent</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;fancybox&gt;&lt;img src=&quot;https://image.gslb.dawnlab.me/a3a95260bca8115d010a419ee021f85a.png&quot; alt=&quot;&quot;&gt;&lt;/fancybox&gt;&lt;/p&gt;
&lt;p&gt;本文主要介绍 DOM 事件级别、DOM 事件模型、事件流、Event 对象常见的应用和自定义 DOM 事件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://blog.curtaintan.club/categories/JavaScript/"/>
    
    
      <category term="js基础" scheme="http://blog.curtaintan.club/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>思路清晰---一次搞懂几种content-type的区别</title>
    <link href="http://blog.curtaintan.club/2020/02/19/%E6%80%9D%E8%B7%AF%E6%B8%85%E6%99%B0-%E4%B8%80%E6%AC%A1%E6%90%9E%E6%87%82%E5%87%A0%E7%A7%8Dcontent-type%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://blog.curtaintan.club/2020/02/19/%E6%80%9D%E8%B7%AF%E6%B8%85%E6%99%B0-%E4%B8%80%E6%AC%A1%E6%90%9E%E6%87%82%E5%87%A0%E7%A7%8Dcontent-type%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2020-02-19T13:28:03.000Z</published>
    <updated>2020-02-19T14:08:06.724Z</updated>
    
    <content type="html"><![CDATA[<p>当使用 ajax 时，你是否还对 <code>setRequestHeader( &quot;content-type&quot;, &quot;*&quot; )</code> 的几种值傻傻分不清？？</p><p>不要慌，一次性记住他们…..</p><a id="more"></a><h1 id="1、Content-Type-的值类型"><a href="#1、Content-Type-的值类型" class="headerlink" title="1、Content-Type 的值类型"></a>1、Content-Type 的值类型</h1><ol><li>application/json：消息主体是序列化后的 JSON 字符串</li><li>application/x-www-form-urlencoded：数据被编码为名称/值对。这是标准的编码格式</li><li>multipart/form-data： 需要在表单中进行文件上传时，就需要使用该格式。常见的媒体格式是上传文件之时使用的</li><li>text/plain：数据以纯文本形式(text/json/xml/html)进行编码，其中不含任何控件或格式字符</li></ol><h1 id="2、application-json-和-application-x-www-form-urlencoded的区别"><a href="#2、application-json-和-application-x-www-form-urlencoded的区别" class="headerlink" title="2、application/json 和 application/x-www-form-urlencoded的区别"></a>2、application/json 和 application/x-www-form-urlencoded的区别</h1><h2 id="2-1-application-json："><a href="#2-1-application-json：" class="headerlink" title="2.1 application/json："></a>2.1 application/json：</h2><p>作用： 告诉服务器请求的主题内容是json格式的字符串，服务器端会对json字符串进行解析。<br>好处： 前端人员不需要关心数据结构的复杂度，只要是标准的 json 格式就能提交成功。</p><p><strong>使用案例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open( type, url, <span class="literal">true</span> )</span><br><span class="line">xhr.setRequestHeader( <span class="string">"Content-Type"</span> , <span class="string">"application/json"</span> )</span><br><span class="line"><span class="comment">// 传入参数是 JSON 字符串</span></span><br><span class="line">xhr.send( <span class="built_in">JSON</span>.stringify( data ) )</span><br></pre></td></tr></table></figure><h2 id="2-1-application-x-www-form-urlencoded："><a href="#2-1-application-x-www-form-urlencoded：" class="headerlink" title="2.1 application/x-www-form-urlencoded："></a>2.1 application/x-www-form-urlencoded：</h2><p>作用：在请求发送过程中会对数据进行序列化处理，以键值对形式 key1=value1&amp;key2=value2 的方式发送到服务器，<br>好处： 所有浏览器都支持<br>缺点：需要处理传入的参数为 key1=value1&amp;key2=value2 格式</p><h1 id="3、multipart-form-data"><a href="#3、multipart-form-data" class="headerlink" title="3、multipart/form-data"></a>3、multipart/form-data</h1><p>form 表单默认编码格式是：application/x-www-form-urlencoded</p><p>当表单需要发送文件或图片时，需要设置 enctype 为 multipart/form-data</p><p><strong>案例：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://**/uploadImage"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="4-使用-xhr-发送文件和图片"><a href="#4-使用-xhr-发送文件和图片" class="headerlink" title="4. 使用 xhr 发送文件和图片"></a>4. 使用 xhr 发送文件和图片</h1><p>只需将数据和文件放入 FormData 即可.</p><p><strong>案例：</strong></p><figure class="highlight js"><figcaption><span>xhr发送文件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取文件放入 FormData</span></span><br><span class="line"><span class="keyword">var</span> formdata = <span class="keyword">new</span> FormData()</span><br><span class="line"><span class="keyword">var</span> elFile = <span class="built_in">document</span>.getElementById( <span class="string">"myfile"</span> )</span><br><span class="line">elFile.addEventListener( <span class="string">"change"</span>, () =&gt; &#123;</span><br><span class="line">    formdata.append( <span class="string">"file"</span>, elFile.files[<span class="number">0</span>] )</span><br><span class="line">    <span class="comment">// 调用发送文件</span></span><br><span class="line">    sendFile()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 创建 xhr</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open( <span class="string">"post"</span>, <span class="string">"http://***/uploadImage"</span> )</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( xhr.status === <span class="number">200</span> &amp;&amp; xhr.readyState === <span class="number">4</span> )&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"请求成功----"</span> )</span><br><span class="line">    <span class="built_in">console</span>.log( xhr.response )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendFile</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    xhr.send( formdata )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h1><p>这四个属性都能设置在 from 表达上的 enctype 上，</p><p>application/json 和 application/x-www-form-urlencoded 设置在 xhr 上，主要的区别是对上传参数的格式不同</p><p>multipart/form-data 设置在 form 表单上，用于上传文件和图片.</p><h1 id="6-参考材料"><a href="#6-参考材料" class="headerlink" title="6. 参考材料"></a>6. 参考材料</h1><p><a href="https://www.jianshu.com/p/2ac9297e00f9" target="_blank" rel="noopener">关于Content-Type几种值的区别及用法</a></p><p><a href="https://www.jianshu.com/p/24799c0f0008" target="_blank" rel="noopener">http请求content-type包括几种，区别是什么？</a></p><p><a href="https://blog.csdn.net/Raywang80s/article/details/74917693" target="_blank" rel="noopener">XMLHTTP中setRequestHeader方法和参数</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当使用 ajax 时，你是否还对 &lt;code&gt;setRequestHeader( &amp;quot;content-type&amp;quot;, &amp;quot;*&amp;quot; )&lt;/code&gt; 的几种值傻傻分不清？？&lt;/p&gt;
&lt;p&gt;不要慌，一次性记住他们…..&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://blog.curtaintan.club/categories/JavaScript/"/>
    
    
      <category term="js基础" scheme="http://blog.curtaintan.club/tags/js%E5%9F%BA%E7%A1%80/"/>
    
      <category term="ajax" scheme="http://blog.curtaintan.club/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>封装一个ajax</title>
    <link href="http://blog.curtaintan.club/2020/02/19/%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AAajax/"/>
    <id>http://blog.curtaintan.club/2020/02/19/%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AAajax/</id>
    <published>2020-02-19T09:06:53.000Z</published>
    <updated>2020-02-19T14:11:40.280Z</updated>
    
    <content type="html"><![CDATA[<p>简单的封装一个 ajax：</p><ol><li>自动处理参数</li><li>支持 get 和 post</li><li>支持取消操作</li></ol><a id="more"></a><h1 id="1-基于-XMLHttpRequest-封装"><a href="#1-基于-XMLHttpRequest-封装" class="headerlink" title="1. 基于 XMLHttpRequest 封装"></a>1. 基于 XMLHttpRequest 封装</h1><p>XMLHttpRequest 相关信息请参考：<strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener">MDN–XMLHttpRequest</a></strong></p><p><strong>XMLHttpRequest 对象主要的属性：</strong><br><fancybox><img src="https://image.gslb.dawnlab.me/4bdab618bfd707da777479a77d683171.png" alt=""></fancybox></p><h2 id="1-1-原生-XHR-创建步骤"><a href="#1-1-原生-XHR-创建步骤" class="headerlink" title="1.1 原生 XHR 创建步骤"></a>1.1 原生 XHR 创建步骤</h2><p>总共分 5 步：</p><ol><li>第一步：使用 new XMLHttpRequest() 创建 XHR 实例</li><li>第二步：使用 xhr.open() 创建一个请求，并初始化相关 http 请求信息</li><li>设置请求头</li><li>设置响应 http 状态变化的函数</li><li>调用 send 方法，发送 http 请求</li></ol><p><strong>整体结构：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myAjax</span>(<span class="params"> obj </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.url = obj.url || <span class="string">""</span></span><br><span class="line">    <span class="keyword">this</span>.type = obj.type || <span class="string">"GET"</span></span><br><span class="line">    <span class="keyword">this</span>.data = obj.data ||&#123;&#125;</span><br><span class="line">    <span class="keyword">this</span>.success = obj.success || <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.error = obj.error || <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">&#125;</span><br><span class="line">myAjax.prototype.send = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">myAjax.prototype.abort = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>完成结果：</strong></p><figure class="highlight js"><figcaption><span>ajax ---- XMLHttpRequest</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myAjax</span>(<span class="params"> obj </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.url = obj.url || <span class="string">""</span></span><br><span class="line">    <span class="keyword">this</span>.type = obj.type || <span class="string">"GET"</span></span><br><span class="line">    <span class="keyword">this</span>.data = obj.data ||&#123;&#125;</span><br><span class="line">    <span class="keyword">this</span>.success = obj.success || <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.error = obj.error || <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myAjax.prototype.send = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 将数据取出来 以 key=value 的形式保存到数组中，方便后续操作</span></span><br><span class="line">    <span class="keyword">let</span> dataArr = []</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">let</span> key <span class="keyword">in</span> <span class="keyword">this</span>.data )&#123;</span><br><span class="line">        dataArr.push( key + <span class="string">"="</span> + <span class="keyword">this</span>.data[key] )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">this</span>.type === <span class="string">"GET"</span> || <span class="keyword">this</span>.type === <span class="string">"get"</span> )&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = <span class="keyword">this</span>.url + <span class="string">"?"</span> + dataArr.join(<span class="string">"&amp;"</span>)</span><br><span class="line">        <span class="comment">// 删除尾部的 ?，当 data 为空的时候会多出来 ?</span></span><br><span class="line">        <span class="keyword">this</span>.xhr.open( <span class="keyword">this</span>.type, <span class="keyword">this</span>.url.replace(<span class="regexp">/\?$/g</span>, <span class="string">""</span>), <span class="literal">true</span> )</span><br><span class="line">        <span class="keyword">this</span>.xhr.send()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">this</span>.type === <span class="string">"POST"</span> || <span class="keyword">this</span>.type === <span class="string">"post"</span> )&#123;</span><br><span class="line">        <span class="keyword">this</span>.xhr.open( <span class="keyword">this</span>.type, <span class="keyword">this</span>.url, <span class="literal">true</span> )</span><br><span class="line">        <span class="keyword">this</span>.xhr.setRequestHeader( <span class="string">"content-type"</span>, <span class="string">"application/x-www-form-urlencoded"</span> )</span><br><span class="line">        <span class="keyword">this</span>.xhr.send( dataArr.join( <span class="string">"&amp;"</span> ) )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用箭头函数   将 this 指向当前对象</span></span><br><span class="line">    <span class="keyword">this</span>.xhr.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>( <span class="keyword">this</span>.xhr.readyState === <span class="number">4</span> &amp;&amp; </span><br><span class="line">            <span class="comment">// 200 是请求成功，304 重定向使用缓存资源</span></span><br><span class="line">            ( <span class="keyword">this</span>.xhr.status === <span class="number">200</span> || <span class="keyword">this</span>.xhr.status === <span class="number">304</span> ) )&#123;</span><br><span class="line">                <span class="keyword">if</span>( <span class="keyword">this</span>.success &amp;&amp; <span class="keyword">this</span>.success <span class="keyword">instanceof</span> <span class="built_in">Function</span> )&#123;</span><br><span class="line">                    <span class="keyword">var</span> res = <span class="keyword">this</span>.xhr.responseText</span><br><span class="line">                    <span class="keyword">if</span>( <span class="keyword">typeof</span> res === <span class="string">"string"</span> )&#123;</span><br><span class="line">                        <span class="keyword">this</span>.success( <span class="built_in">JSON</span>.parse( res ) )</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">myAjax.prototype.abort = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"已经取消请求..."</span> )</span><br><span class="line">    <span class="keyword">this</span>.xhr.abort()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-基于-fetch-封装"><a href="#2-基于-fetch-封装" class="headerlink" title="2. 基于 fetch 封装"></a>2. 基于 fetch 封装</h1><p>若果你不知道 fetch 的使用，请参考</p><ol><li><strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WindowOrWorkerGlobalScope/fetch" target="_blank" rel="noopener">MDN-fetch 文档</a></strong></li><li><strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="noopener">MDN-fetch 使用相关</a></strong></li></ol><p><strong>fetch 第二个参数选项：</strong></p><ol><li>method: 请求使用的方法，如 GET、POST。</li><li>headers: 请求的头信息，形式为 Headers 的对象或包含 ByteString 值的对象字面量。</li><li>body: 请求的 body 信息：可能是一个 Blob、BufferSource、FormData、URLSearchParams 或者 USVString 对象。注意 GET 或 HEAD 方法的请求不能包含 body 信息。</li><li>mode: 请求的模式，如 cors、 no-cors 或者 same-origin。</li><li>credentials: 请求的 credentials，如 omit、same-origin 或者 include。为了在当前域名内自动发送 cookie ， 必须提供这个选项， 从 Chrome 50 开始， 这个属性也可以接受 FederatedCredential 实例或是一个 PasswordCredential 实例。</li><li>cache:  请求的 cache 模式: default 、 no-store 、 reload 、 no-cache 、 force-cache 或者 only-if-cached 。</li><li>redirect: 可用的 redirect 模式: follow (自动重定向), error (如果产生重定向将自动终止并且抛出一个错误), 或者 manual (手动处理重定向). 在Chrome中，Chrome 47之前的默认值是 follow，从 Chrome 47开始是 manual。</li><li>referrer: 一个 USVString 可以是 no-referrer、client或一个 URL。默认是 client。</li><li>referrerPolicy: 指定了HTTP头部referer字段的值。可能为以下值之一： no-referrer、 no-referrer-when-downgrade、 origin、 origin-when-cross-origin、 unsafe-url 。</li><li>integrity: 包括请求的  subresource integrity 值</li><li>signal: 用于取消请求</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFetch</span>(<span class="params"> obj </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.url = obj.url || <span class="string">""</span></span><br><span class="line">    <span class="keyword">this</span>.type = obj.type || <span class="string">"GET"</span></span><br><span class="line">    <span class="keyword">this</span>.data = obj.data ||&#123;&#125;</span><br><span class="line">    <span class="keyword">this</span>.success = obj.success || <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.error = obj.error || <span class="literal">null</span></span><br><span class="line">    <span class="comment">// 用于取消 fetch 请求</span></span><br><span class="line">    <span class="keyword">this</span>.controller = <span class="keyword">new</span> AbortController()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myFetch.prototype.send = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 将数据取出来 以 key=value 的形式保存到数组中，方便后续操作</span></span><br><span class="line">    <span class="keyword">let</span> dataArr = []</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">let</span> key <span class="keyword">in</span> <span class="keyword">this</span>.data )&#123;</span><br><span class="line">        dataArr.push( key + <span class="string">"="</span> + <span class="keyword">this</span>.data[key] )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">this</span>.type === <span class="string">"GET"</span> || <span class="keyword">this</span>.type === <span class="string">"get"</span> )&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = <span class="keyword">this</span>.url + <span class="string">"?"</span> + dataArr.join(<span class="string">"&amp;"</span>)</span><br><span class="line">        <span class="comment">// 删除尾部的 ?，当 data 为空的时候会多出来 ?</span></span><br><span class="line">        fetch( <span class="keyword">this</span>.url.replace(<span class="regexp">/\?$/g</span>, <span class="string">""</span>), &#123;</span><br><span class="line">            mode: <span class="string">"cors"</span>,</span><br><span class="line">            method: <span class="string">"GET"</span>,</span><br><span class="line">            signal: <span class="keyword">this</span>.controller.signal</span><br><span class="line">        &#125;).then( <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> res.json()</span><br><span class="line">        &#125;).then( <span class="function"><span class="params">resObj</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.success( resObj )</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">this</span>.type === <span class="string">"POST"</span> || <span class="keyword">this</span>.type === <span class="string">"post"</span> )&#123;</span><br><span class="line">        fetch( <span class="keyword">this</span>.url, &#123;</span><br><span class="line">            mode: <span class="string">"cors"</span>,</span><br><span class="line">            headers: &#123;</span><br><span class="line">                <span class="string">"Content-Type"</span> : <span class="string">"application/x-www-form-urlencoded"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            body: dataArr.join(<span class="string">"&amp;"</span>),</span><br><span class="line">            method: <span class="string">"POST"</span>,</span><br><span class="line">            signal: <span class="keyword">this</span>.controller.signal</span><br><span class="line">        &#125;).then( <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log( <span class="string">"新鲜的数据："</span> ,res )</span><br><span class="line">            <span class="keyword">return</span> res.json()</span><br><span class="line">        &#125;).then( <span class="function"><span class="params">resObj</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.success( resObj )</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myFetch.prototype.abort = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"取消请求--"</span> )</span><br><span class="line">    <span class="keyword">this</span>.controller.abort()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h1><p>XMLHttp<br>使用原生 XMLHttpRequest 创建 ajax 的步骤分 5 步，一定要记住，</p><ol><li>使用 new XMLHttpRequest() 创建 xhr 实例</li><li>调用 open 方法初始化请求信息</li><li>设置 请求头</li><li>设置请求响应函数</li><li>调用 send 方法发送请求</li></ol><h1 id="4-关于发送文件和图片"><a href="#4-关于发送文件和图片" class="headerlink" title="4. 关于发送文件和图片"></a>4. 关于发送文件和图片</h1><p>发送文件和图片，需要搭配 <code>FormData</code></p><p>直接将 FormData 作为参数发送即可。</p><p><strong>案例:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取文件放入 FormData</span></span><br><span class="line"><span class="keyword">var</span> formdata = <span class="keyword">new</span> FormData()</span><br><span class="line"><span class="keyword">var</span> elFile = <span class="built_in">document</span>.getElementById( <span class="string">"myfile"</span> )</span><br><span class="line">elFile.addEventListener( <span class="string">"change"</span>, () =&gt; &#123;</span><br><span class="line">    formdata.append( <span class="string">"file"</span>, elFile.files[<span class="number">0</span>] )</span><br><span class="line">    <span class="comment">// 调用发送文件</span></span><br><span class="line">    sendFile()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 创建 xhr</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open( <span class="string">"post"</span>, <span class="string">"http://***/uploadImage"</span> )</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( xhr.status === <span class="number">200</span> &amp;&amp; xhr.readyState === <span class="number">4</span> )&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"请求成功----"</span> )</span><br><span class="line">    <span class="built_in">console</span>.log( xhr.response )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendFile</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    xhr.send( formdata )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-参考材料"><a href="#5-参考材料" class="headerlink" title="5. 参考材料"></a>5. 参考材料</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener">MDN–XMLHttpRequest</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WindowOrWorkerGlobalScope/fetch" target="_blank" rel="noopener">MDN-fetch 文档</a></p><p><a href="https://blog.csdn.net/hlinghling/article/details/52624757" target="_blank" rel="noopener">创建ajax过程</a></p><p><a href="https://blog.csdn.net/sinat_35767703/article/details/67633058" target="_blank" rel="noopener">AJAX实现步骤,XMLHttpRequest对象的方法</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单的封装一个 ajax：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自动处理参数&lt;/li&gt;
&lt;li&gt;支持 get 和 post&lt;/li&gt;
&lt;li&gt;支持取消操作&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://blog.curtaintan.club/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js基础" scheme="http://blog.curtaintan.club/tags/js%E5%9F%BA%E7%A1%80/"/>
    
      <category term="ajax" scheme="http://blog.curtaintan.club/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>页面布局之居中</title>
    <link href="http://blog.curtaintan.club/2020/02/18/%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80%E4%B9%8B%E5%B1%85%E4%B8%AD/"/>
    <id>http://blog.curtaintan.club/2020/02/18/%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80%E4%B9%8B%E5%B1%85%E4%B8%AD/</id>
    <published>2020-02-18T06:42:19.000Z</published>
    <updated>2020-02-18T16:57:50.954Z</updated>
    
    <content type="html"><![CDATA[<p>水平居中 + 垂直居中 + 水平垂直居中</p><a id="more"></a><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>下文的所有 css 都是基于如下 html 结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"son"</span>&gt;</span>son<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>go–go–go—-</strong></p><h1 id="1-水平居中"><a href="#1-水平居中" class="headerlink" title="1. 水平居中"></a>1. 水平居中</h1><h2 id="1-1-使用-margin-0-auto"><a href="#1-1-使用-margin-0-auto" class="headerlink" title="1.1 使用 margin: 0 auto"></a>1.1 使用 margin: 0 auto</h2><p><strong>形成原理：</strong></p><ol><li>元素为块级元素</li><li>元素需要设置宽度</li><li>margin: 0 auto</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">38px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><fancybox><img src="https://image.gslb.dawnlab.me/0731902bacfad07794514d226c60bc97.png" alt=""></fancybox></p><h2 id="1-2-使用-text-align-center"><a href="#1-2-使用-text-align-center" class="headerlink" title="1.2 使用 text-align:center"></a>1.2 使用 text-align:center</h2><p><strong>形成原理：</strong></p><ol><li>子元素为行内元素（可以使用 display: inline-block 实现转换）</li><li>父元素设置 text-align:center</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">38px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-使用-flex-布局"><a href="#1-3-使用-flex-布局" class="headerlink" title="1.3 使用 flex 布局"></a>1.3 使用 flex 布局</h2><p><strong>形成原理：</strong></p><ol><li>父元素使用 flex 布局</li><li>父元素设置 justify-content: center</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">38px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-使用-absolute-transform"><a href="#1-4-使用-absolute-transform" class="headerlink" title="1.4 使用 absolute + transform"></a>1.4 使用 absolute + transform</h2><p><strong>形成原理：</strong></p><ol><li>子元素绝对定位 position: absolute;</li><li>以父元素宽度为基准向右偏移 50%，设置 left: 50%;</li><li>基于自己的宽度向左偏移 50%，设置：transform: translate( -50%, 0 );</li></ol><p><strong>存在问题：</strong></p><p>因为使用了绝对定位，元素脱离文档流，父元素捕获不到子元素高度导致父元素高度塌陷…</p><p>如果子元素是动态高度，则只能通过 js 获取子元素高度，再设置父元素高度.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">38px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>( -50%, 0 );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/48ff91bfc7d24ef9bb18b6a4ae5c17be.png" alt=""></fancybox></p><h2 id="1-5-使用-absolute-负margin"><a href="#1-5-使用-absolute-负margin" class="headerlink" title="1.5 使用 absolute + 负margin"></a>1.5 使用 absolute + 负margin</h2><p><strong>形成原理：</strong></p><ol><li>子元素绝对定位 position: absolute;</li><li>以父元素宽度为基准向右偏移 50%，设置 left: 50%;</li><li>需要设置固定宽度</li><li>使用负 margin ，基于自己的宽度向左偏移 50% 宽度，margin-left: -0.5 * width;</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">38px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">81px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">150px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-6-使用-absolute-width-margin"><a href="#1-6-使用-absolute-width-margin" class="headerlink" title="1.6 使用 absolute + width + margin"></a>1.6 使用 absolute + width + margin</h2><p><strong>形成原理：</strong></p><ol><li>子元素绝对定位 position: absolute;</li><li>设置子元素宽度</li><li>设置左右偏移为 0，left:0; right:0;</li><li>设置 margin 上下为 0，左右自适应占满整行. margin: 0 auto;</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">38px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">81px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-7-水平居中总结"><a href="#1-7-水平居中总结" class="headerlink" title="1.7 水平居中总结"></a>1.7 水平居中总结</h2><p>总共使用了 6 总方法，还有一种没有使用，就是使用 grid 实现，</p><p>三种使用绝对定位，但是绝对定位会导致父元素高度塌陷，需谨慎使用（其实也不算了…哈哈哈）</p><p>最推荐 flex 实现，兼容性优良，实现简单可靠.</p><h1 id="2-垂直居中"><a href="#2-垂直居中" class="headerlink" title="2. 垂直居中"></a>2. 垂直居中</h1><h2 id="2-1-行内元素的实现"><a href="#2-1-行内元素的实现" class="headerlink" title="2.1 行内元素的实现"></a>2.1 行内元素的实现</h2><p>行内元素 –&gt; 使用 line-height: height 实现</p><p><strong>实现原理：</strong></p><ol><li>父元素固定高度，并设置行高为高度值：line-height: height</li><li>子元素必须是行内元素（可以使用 display: inline-block 实现转换）</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">800px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">800px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-使用-flex-布局"><a href="#2-2-使用-flex-布局" class="headerlink" title="2.2 使用 flex 布局"></a>2.2 使用 flex 布局</h2><p><strong>实现原理：</strong></p><ol><li>父元素使用 flex 布局</li><li>父元素设置 align-items: center;</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-使用-position：absolute"><a href="#2-3-使用-position：absolute" class="headerlink" title="2.3 使用 position：absolute"></a>2.3 使用 position：absolute</h2><p>三种方式，</p><ol><li>absolute + transform</li><li>absolute + -margin</li><li>absolute + margin: auto 0</li></ol><h2 id="2-4-总结"><a href="#2-4-总结" class="headerlink" title="2.4 总结"></a>2.4 总结</h2><p>垂直居中还有表格、grid 和 vertical-align 可以实现。</p><p>推荐使用 flex 布局实现，简单易理解.</p><h1 id="3-水平垂直居中"><a href="#3-水平垂直居中" class="headerlink" title="3. 水平垂直居中"></a>3. 水平垂直居中</h1><h2 id="3-1-使用-absolute-margin"><a href="#3-1-使用-absolute-margin" class="headerlink" title="3.1 使用 absolute + margin"></a>3.1 使用 absolute + margin</h2><p><strong>实现原理：</strong></p><ol><li>父元素使用定位（除了 static 定位都行）</li><li>子元素使用绝对定位</li><li>上下左右偏移为 0</li><li>设置 margin: auto 占满整个父元素，居中</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-使用-absolute-transform"><a href="#3-2-使用-absolute-transform" class="headerlink" title="3.2 使用 absolute + transform"></a>3.2 使用 absolute + transform</h2><ol><li>父元素使用定位（除了 static 定位都行）</li><li>子元素使用绝对定位</li><li>上左各偏移基于父元素的 50%</li><li>使用 transform 再拉回多的偏移 transform: translate( -50%, -50% );</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    padding: <span class="number">0</span>;</span><br><span class="line">    margin: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">.parent&#123;</span><br><span class="line">    background-color: #ccc;</span><br><span class="line">    padding: <span class="number">20</span>px;</span><br><span class="line">    height: <span class="number">600</span>px;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.son&#123;</span><br><span class="line">    font-size: <span class="number">50</span>px;</span><br><span class="line">    line-height: <span class="number">100</span>px;</span><br><span class="line">    color: #ccc;</span><br><span class="line">    background-color: aquamarine;</span><br><span class="line">    text-align: center;</span><br><span class="line">    width: <span class="number">300</span>px;</span><br><span class="line">    height: <span class="number">100</span>px;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: <span class="number">50</span>%;</span><br><span class="line">    left: <span class="number">50</span>%;</span><br><span class="line">    transform: translate( <span class="number">-50</span>%, <span class="number">-50</span>% );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-使用-absolute-margin"><a href="#3-2-使用-absolute-margin" class="headerlink" title="3.2 使用 absolute + -margin"></a>3.2 使用 absolute + -margin</h2><p>原理同上，需要知道子元素的高度，</p><p>负 margin 的值等于高度的一半</p><h2 id="3-3-使用-flex-布局"><a href="#3-3-使用-flex-布局" class="headerlink" title="3.3 使用 flex 布局"></a>3.3 使用 flex 布局</h2><p><strong>实现原理：</strong></p><ol><li>父元素使用 flex 布局</li><li>设置属性水平居中：justify-content: center;</li><li>设置属性垂直居中：align-items: center;</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(117, 117, 117);</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h1><p>个人最喜欢 flex 布局.推荐多使用 flex 布局.</p><p>加油！！</p><h1 id="5-参考材料"><a href="#5-参考材料" class="headerlink" title="5. 参考材料"></a>5. 参考材料</h1><p><a href="https://juejin.im/post/58f818bbb123db006233ab2a" target="_blank" rel="noopener">16种方法实现水平居中垂直居中</a></p><p><a href="https://blog.csdn.net/linayangoo/article/details/88528774" target="_blank" rel="noopener">CSS实现文本，DIV垂直居中</a></p><p><a href="https://juejin.im/post/58e3a5a0a0bb9f0069fc16bb" target="_blank" rel="noopener">一劳永逸的搞定 flex 布局</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;水平居中 + 垂直居中 + 水平垂直居中&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://blog.curtaintan.club/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://blog.curtaintan.club/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>页面布局之三栏布局</title>
    <link href="http://blog.curtaintan.club/2020/02/18/%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80%E4%B9%8B%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80/"/>
    <id>http://blog.curtaintan.club/2020/02/18/%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80%E4%B9%8B%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80/</id>
    <published>2020-02-18T02:38:43.000Z</published>
    <updated>2020-02-18T06:37:18.484Z</updated>
    
    <content type="html"><![CDATA[<p><fancybox><img src="https://image.gslb.dawnlab.me/43c66317465dc346967bc541fc0ca7e8.png" alt=""></fancybox></p><p>实现三栏布局….</p><a id="more"></a><h1 id="三栏布局的定义"><a href="#三栏布局的定义" class="headerlink" title="三栏布局的定义"></a>三栏布局的定义</h1><p>三栏布局，顾名思义就是两边固定，中间自适应。</p><p>开写…..</p><h1 id="1-使用-BFC"><a href="#1-使用-BFC" class="headerlink" title="1. 使用 BFC"></a>1. 使用 BFC</h1><p>实现原理：BFC 元素不会与浮动元素重叠。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">            font-size: 30px;</span><br><span class="line">            color: rgb(224, 224, 224);</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 185px;</span><br><span class="line">        &#125;</span><br><span class="line">        h1&#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 80px;</span><br><span class="line">            color: rgb(38, 52, 99);</span><br><span class="line">            font-size: 28px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>, <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">            width: 180px;</span><br><span class="line">            height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">            background-color: rgb(104, 104, 104);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">            float: right;</span><br><span class="line">            background-color: rgb(133, 133, 133);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span>&#123;</span></span><br><span class="line">            overflow: hidden;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: rgb(112, 112, 112);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>三栏布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 先浮动，再创建 BFC --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-使用-float-margin-实现"><a href="#2-使用-float-margin-实现" class="headerlink" title="2. 使用 float + margin 实现"></a>2. 使用 float + margin 实现</h1><p>实现原理：使用 margin 替代浮动元素占据的位置。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">            font-size: 30px;</span><br><span class="line">            color: rgb(224, 224, 224);</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 185px;</span><br><span class="line">        &#125;</span><br><span class="line">        h1&#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 80px;</span><br><span class="line">            color: rgb(38, 52, 99);</span><br><span class="line">            font-size: 28px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>, <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">            width: 180px;</span><br><span class="line">            height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">            background-color: rgb(104, 104, 104);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">            float: right;</span><br><span class="line">            background-color: rgb(133, 133, 133);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 修改此行代码即可 */</span></span></span><br><span class="line">            margin: 0px 190px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: rgb(112, 112, 112);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>三栏布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3-flex-实现"><a href="#3-flex-实现" class="headerlink" title="3. flex 实现"></a>3. flex 实现</h1><p>实现原理：父元素使用 flex ，子元素定义 flex: 1 或 flex: auto 会自动填充宽度。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">            font-size: 30px;</span><br><span class="line">            color: rgb(224, 224, 224);</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 185px;</span><br><span class="line">        &#125;</span><br><span class="line">        h1&#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 80px;</span><br><span class="line">            color: rgb(38, 52, 99);</span><br><span class="line">            font-size: 28px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>, <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">            width: 180px;</span><br><span class="line">            height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">            background-color: rgb(104, 104, 104);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">            background-color: rgb(133, 133, 133);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span>&#123;</span></span><br><span class="line">            flex: 1;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: rgb(112, 112, 112);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.warp</span> &#123;</span></span><br><span class="line">            display: flex;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>三栏布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="4-使用-absolute-margin-实现"><a href="#4-使用-absolute-margin-实现" class="headerlink" title="4. 使用 absolute + margin 实现"></a>4. 使用 absolute + margin 实现</h1><p>实现原理：同 float + margin 一样。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">            font-size: 30px;</span><br><span class="line">            color: rgb(224, 224, 224);</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 185px;</span><br><span class="line">        &#125;</span><br><span class="line">        h1&#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 80px;</span><br><span class="line">            color: rgb(38, 52, 99);</span><br><span class="line">            font-size: 28px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>, <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">            width: 180px;</span><br><span class="line">            height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">            background-color: rgb(104, 104, 104);</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 0;</span><br><span class="line">            left: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">            background-color: rgb(133, 133, 133);</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 0;</span><br><span class="line">            right: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span>&#123;</span></span><br><span class="line">            height: 200px;</span><br><span class="line">            margin: 0px 200px;</span><br><span class="line">            background-color: rgb(112, 112, 112);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.warp</span> &#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>三栏布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="5-使用-Table-布局实现"><a href="#5-使用-Table-布局实现" class="headerlink" title="5. 使用 Table 布局实现"></a>5. 使用 Table 布局实现</h1><p>实现原理：父元素展示为 table，子元素展示为 table-cell</p><p><strong>注意：</strong>父元素宽度设置为 100% </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">            font-size: 30px;</span><br><span class="line">            color: rgb(224, 224, 224);</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 185px;</span><br><span class="line">        &#125;</span><br><span class="line">        h1&#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 80px;</span><br><span class="line">            color: rgb(38, 52, 99);</span><br><span class="line">            font-size: 28px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>, <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">            width: 180px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            display: table-cell;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">            background-color: rgb(104, 104, 104);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">            background-color: rgb(133, 133, 133);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span>&#123;</span></span><br><span class="line">            display: table-cell;</span><br><span class="line">            background-color: rgb(112, 112, 112);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.warp</span> &#123;</span></span><br><span class="line">            display: table;</span><br><span class="line">            width: 100%;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>三栏布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="6-使用-inner-block-calc-实现"><a href="#6-使用-inner-block-calc-实现" class="headerlink" title="6. 使用 inner-block + calc 实现"></a>6. 使用 inner-block + calc 实现</h1><p>实现原理：当展示为 inner-block 时需要指定宽度，此时就使用 calc 计算宽度</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">            font-size: 30px;</span><br><span class="line">            color: rgb(224, 224, 224);</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 185px;</span><br><span class="line">        &#125;</span><br><span class="line">        h1&#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 80px;</span><br><span class="line">            color: rgb(38, 52, 99);</span><br><span class="line">            font-size: 28px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>, <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">            width: 180px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            display: inline-block;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">            background-color: rgb(104, 104, 104);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">            background-color: rgb(133, 133, 133);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span>&#123;</span></span><br><span class="line">            background-color: rgb(112, 112, 112);</span><br><span class="line">            width: calc( 100% - 400px );</span><br><span class="line">            height: 200px;</span><br><span class="line">            display: inline-block;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>三栏布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="7-使用-grid-布局"><a href="#7-使用-grid-布局" class="headerlink" title="7. 使用 grid 布局"></a>7. 使用 grid 布局</h1><p>实现原理：grid 可以使用 1fr 划分等分和自适应</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">            font-size: 30px;</span><br><span class="line">            color: rgb(224, 224, 224);</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 185px;</span><br><span class="line">        &#125;</span><br><span class="line">        h1&#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 80px;</span><br><span class="line">            color: rgb(38, 52, 99);</span><br><span class="line">            font-size: 28px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>, <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">            height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">            background-color: rgb(104, 104, 104);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">            background-color: rgb(133, 133, 133);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span>&#123;</span></span><br><span class="line">            background-color: rgb(112, 112, 112);</span><br><span class="line">            height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.warp</span> &#123;</span></span><br><span class="line">            display: grid;</span><br><span class="line">            grid-template-columns: 200px 1fr 200px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>三栏布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="8-圣杯布局（难使）"><a href="#8-圣杯布局（难使）" class="headerlink" title="8. 圣杯布局（难使）"></a>8. 圣杯布局（难使）</h1><p>实现原理：使用负 margin 使浮动元素重新定位，结合 position 定位元素….</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">            font-size: 30px;</span><br><span class="line">            color: rgb(224, 224, 224);</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 185px;</span><br><span class="line">        &#125;</span><br><span class="line">        h1&#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 80px;</span><br><span class="line">            color: rgb(38, 52, 99);</span><br><span class="line">            font-size: 28px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>, <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">            height: 200px;</span><br><span class="line">            width: 180px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">            background-color: rgb(122, 122, 122);</span><br><span class="line">            float: left;</span><br><span class="line">            position: relative;</span><br><span class="line">            margin-left: -100%;</span><br><span class="line">            left: -200px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">            background-color: rgb(133, 133, 133);</span><br><span class="line">            position: relative;</span><br><span class="line">            float: left;</span><br><span class="line">            margin-left: -200px;</span><br><span class="line">            right: -220px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span>&#123;</span></span><br><span class="line">            background-color: rgb(112, 112, 112);</span><br><span class="line">            height: 200px;</span><br><span class="line">            width: 100%;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.warp</span> &#123;</span></span><br><span class="line">            margin: 0px 200px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>三栏布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>最后还有一个双飞翼布局实现，但是代码布局写起来不直观，且 css 搭配复杂，不推荐……</p><p>需要知道 margin 为负值时的结果..</p><p>总的来说，还是不难的….</p><h1 id="参考材料"><a href="#参考材料" class="headerlink" title="参考材料"></a>参考材料</h1><p><a href="https://juejin.im/post/5daebfc2518825502a44602a#heading-0" target="_blank" rel="noopener">面试官：请实现三栏布局，尽可能多的方式</a></p><p><a href="https://zhuanlan.zhihu.com/p/25070186?refer=learncoding" target="_blank" rel="noopener">详解 CSS 七种三栏布局技巧</a></p><p><a href="https://blog.csdn.net/twoto3_/article/details/52250602" target="_blank" rel="noopener">margin为负值产生的影响和常见布局应用</a></p><p><a href="https://www.cnblogs.com/Anita-meng/p/7803464.html" target="_blank" rel="noopener">margin负值的作用</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;fancybox&gt;&lt;img src=&quot;https://image.gslb.dawnlab.me/43c66317465dc346967bc541fc0ca7e8.png&quot; alt=&quot;&quot;&gt;&lt;/fancybox&gt;&lt;/p&gt;
&lt;p&gt;实现三栏布局….&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://blog.curtaintan.club/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://blog.curtaintan.club/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>css之BFC</title>
    <link href="http://blog.curtaintan.club/2020/02/17/css%E4%B9%8BBFC/"/>
    <id>http://blog.curtaintan.club/2020/02/17/css%E4%B9%8BBFC/</id>
    <published>2020-02-17T07:10:19.000Z</published>
    <updated>2020-02-17T13:30:03.739Z</updated>
    
    <content type="html"><![CDATA[<p><fancybox><img src="https://image.gslb.dawnlab.me/d51bb30b65a731d78f2344ca8bb237a7.png" alt=""></fancybox></p><p>从 BFC 解决的问题看待 BFC…..</p><a id="more"></a><h1 id="1-BFC是什么？"><a href="#1-BFC是什么？" class="headerlink" title="1. BFC是什么？"></a>1. BFC是什么？</h1><p>查阅了一些资料，觉得这个解释很合理：</p><p><code>Block fomatting context</code> = <code>block-level box</code> + <code>Formatting Context</code></p><p><strong>BFC 定义</strong></p><p>BFC(Block formatting context)直译为”块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。 </p><h1 id="2-BFC的作用"><a href="#2-BFC的作用" class="headerlink" title="2. BFC的作用"></a>2. BFC的作用</h1><ol><li>解决 margin 重叠问题（父子重叠、兄弟重叠）</li><li>和浮动元素产生边界</li><li>解决浮动元素的父元素高度塌陷</li></ol><p>总的来说，就是 BFC 布局规则的作用….</p><h1 id="3-BFC布局规则："><a href="#3-BFC布局规则：" class="headerlink" title="3. BFC布局规则："></a>3. BFC布局规则：</h1><ol><li>内部的 Box 会在垂直方向，一个接一个地放置。</li><li>Box垂直方向的距离由 margin 决定。属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠</li><li>每个元素的 margin box 的左边， 与包含块 border box 的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。（这说明BFC中子元素不会超出他的包含块，而 position 为 absolute 的元素可以超出他的包含块边界）</li><li>BFC的区域不会与 float box 重叠。</li><li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li><li>计算 BFC 的高度时，浮动元素也参与计算</li></ol><h1 id="4-哪些元素会生成BFC"><a href="#4-哪些元素会生成BFC" class="headerlink" title="4. 哪些元素会生成BFC?"></a>4. 哪些元素会生成BFC?</h1><ol><li>根元素</li><li>float属性不为none</li><li>position为absolute或fixed</li><li>display为inline-block, table-cell, table-caption, flex, inline-flex</li><li>overflow不为visible</li></ol><h1 id="5-BFC-的使用场景对应布局规则"><a href="#5-BFC-的使用场景对应布局规则" class="headerlink" title="5. BFC 的使用场景对应布局规则"></a>5. BFC 的使用场景对应布局规则</h1><h2 id="5-1-清除-margin-重叠"><a href="#5-1-清除-margin-重叠" class="headerlink" title="5.1 清除 margin 重叠"></a>5.1 清除 margin 重叠</h2><p>由布局规则第二条：</p><blockquote><p>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠</p></blockquote><p><strong>margin 重叠示例</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line">        padding: 0;</span><br><span class="line">        margin: 0;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span>, <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line">        font-size: 30px;</span><br><span class="line">        text-align: center;</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        padding: 20px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        width: 300px;</span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 10<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        background-color: aquamarine;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line">        margin: 50px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line">        margin: 20px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span>box1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span>box2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>运行效果</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/e2d29a13723fd265c05b02759f8fae00.png" alt=""></fancybox></p><p><strong>形成 BFC 解决重叠</strong></p><p>在 box2 外包一个 wrap 元素，并形成 BFC。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line">        padding: 0;</span><br><span class="line">        margin: 0;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span>, <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line">        font-size: 30px;</span><br><span class="line">        text-align: center;</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        padding: 20px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        width: 300px;</span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 10<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        background-color: aquamarine;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line">        margin: 50px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line">        margin: 20px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.warp</span> &#123;</span></span><br><span class="line">        overflow: hidden;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span>box1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span>box2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/c217069127bca09162acdd90b0a81a25.png" alt=""></fancybox></p><h2 id="5-2-和浮动元素产生边界"><a href="#5-2-和浮动元素产生边界" class="headerlink" title="5.2 和浮动元素产生边界"></a>5.2 和浮动元素产生边界</h2><p>由布局规则第四条：</p><blockquote><p>BFC的区域不会与float box重叠。</p></blockquote><p><strong>情况示例</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line">        padding: 0;</span><br><span class="line">        margin: 0;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.warp</span> &#123;</span></span><br><span class="line">        background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.float</span>&#123;</span></span><br><span class="line">        float: left;</span><br><span class="line">        width: 40px;</span><br><span class="line">        height: 40px;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-box"</span>&gt;</span></span><br><span class="line">        我是一些文字，我有很多的文字-------------------------------</span><br><span class="line">        我是一些文字，我有很多的文字-------------------------------</span><br><span class="line">        我是一些文字，我有很多的文字-------------------------------</span><br><span class="line">        我是一些文字，我有很多的文字-------------------------------</span><br><span class="line">        ---------------------------------------------------------</span><br><span class="line">        -----------</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/c30f6d04059be6f2b2692e21976922d8.png" alt=""></fancybox></p><p><strong>形成 BFC 和浮动元素产生边界</strong></p><p>让 text-box 形成 BFC，使他浮动元素产生边界。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    * &#123;</span><br><span class="line">        padding: <span class="number">0</span>;</span><br><span class="line">        margin: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    .warp &#123;</span><br><span class="line">        background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line">    .float&#123;</span><br><span class="line">        float: left;</span><br><span class="line">        width: <span class="number">40</span>px;</span><br><span class="line">        height: <span class="number">40</span>px;</span><br><span class="line">        background-color: #ccc;</span><br><span class="line">    &#125;</span><br><span class="line">    .text-box&#123;</span><br><span class="line">        overflow: auto;</span><br><span class="line">        background-color: paleturquoise;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;div class="warp"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="float"&gt;&lt;/</span>div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"text-box"</span>&gt;</span><br><span class="line">        我是一些文字，我有很多的文字-------------------------------</span><br><span class="line">        我是一些文字，我有很多的文字-------------------------------</span><br><span class="line">        我是一些文字，我有很多的文字-------------------------------</span><br><span class="line">        我是一些文字，我有很多的文字-------------------------------</span><br><span class="line">        ---------------------------------------------------------</span><br><span class="line">        -----------</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/a533764b0fa4c1f11e2cc04c9f11900b.png" alt=""></fancybox></p><h2 id="5-3-解决浮动元素的父元素高度塌陷"><a href="#5-3-解决浮动元素的父元素高度塌陷" class="headerlink" title="5.3 解决浮动元素的父元素高度塌陷"></a>5.3 解决浮动元素的父元素高度塌陷</h2><p>由布局规则第六条：</p><blockquote><p>计算 BFC 的高度时，浮动元素也参与计算</p></blockquote><p><strong>高度塌陷的情况：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line">        padding: 0;</span><br><span class="line">        margin: 0;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.warp</span> &#123;</span></span><br><span class="line">        background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.float</span>&#123;</span></span><br><span class="line">        float: left;</span><br><span class="line">        width: 40px;</span><br><span class="line">        height: 40px;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/cff0f5d101678dfa39b05da53e814c2e.png" alt=""></fancybox></p><p><strong>父元素形成 BFC 解决高度塌陷</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line">        padding: 0;</span><br><span class="line">        margin: 0;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.warp</span> &#123;</span></span><br><span class="line">        background-color: red;</span><br><span class="line">        overflow: auto;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.float</span>&#123;</span></span><br><span class="line">        float: left;</span><br><span class="line">        width: 40px;</span><br><span class="line">        height: 40px;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/7cf82919a6374ee38b10edb6dde709b3.png" alt=""></fancybox></p><h1 id="6-参考材料"><a href="#6-参考材料" class="headerlink" title="6. 参考材料"></a>6. 参考材料</h1><p><a href="https://www.html.cn/qa/css3/13757.html" target="_blank" rel="noopener">CSS什么是BFC？</a></p><p><a href="https://github.com/zuopf769/notebook/blob/master/fe/BFC%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/README.md" target="_blank" rel="noopener">史上最全面、最透彻的BFC原理剖析</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context" target="_blank" rel="noopener">MDN-块格式化上下文</a></p><h1 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h1><figure class="highlight html"><figcaption><span>父元素形成 BFC 解决高度塌陷</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.warp</span> &#123;</span></span><br><span class="line">            background-color: red;</span><br><span class="line">            overflow: auto;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.float</span>&#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">            width: 40px;</span><br><span class="line">            height: 40px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;fancybox&gt;&lt;img src=&quot;https://image.gslb.dawnlab.me/d51bb30b65a731d78f2344ca8bb237a7.png&quot; alt=&quot;&quot;&gt;&lt;/fancybox&gt;&lt;/p&gt;
&lt;p&gt;从 BFC 解决的问题看待 BFC…..&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://blog.curtaintan.club/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://blog.curtaintan.club/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>css之盒模型</title>
    <link href="http://blog.curtaintan.club/2020/02/17/css%E4%B9%8B%E7%9B%92%E6%A8%A1%E5%9E%8B/"/>
    <id>http://blog.curtaintan.club/2020/02/17/css%E4%B9%8B%E7%9B%92%E6%A8%A1%E5%9E%8B/</id>
    <published>2020-02-17T05:16:27.000Z</published>
    <updated>2020-02-17T12:10:23.765Z</updated>
    
    <content type="html"><![CDATA[<p><fancybox><img src="https://image.gslb.dawnlab.me/fc2a80e8075489dd5f57b4c6262a8113.png" alt=""></fancybox></p><p>盒子模型…</p><a id="more"></a><h1 id="1-简单盒模型"><a href="#1-简单盒模型" class="headerlink" title="1. 简单盒模型"></a>1. 简单盒模型</h1><p>我在查资料的时候，看到一篇文章很好的说明了两种模型的关系：</p><blockquote><p>通常情况下，被更多人认知的盒模型就是简单盒模型，简单盒模型在早期IE时期有一种怪异模式下的解析方式，也就是现在的border-box，后来W3C制定的标准以后规定在标准解析模式下使用标准盒模型(content-box)。</p><footer><strong>你真的了解盒模型吗？</strong><cite><a href="https://rainey.space/2016/07/02/Ni_Zhen_De_Liao_Jie_He_Mo_Xing_Ma/" target="_blank" rel="noopener">rainey.space/2016/07/02/Ni_Zhen_De_Liao_Jie_He_Mo_Xing_Ma</a></cite></footer></blockquote><p>文中有这样一个段子：</p><blockquote><p>IE：我觉得盒模型应该是这样的，blahblah。<br>W3C：明显应该是这样的才对，blahblah。<br>结果是 IE 在怪异模式下用了「不标准」的盒模型，标准模式下用了「标准」的盒模型。<br>围观群众：听说 IE 的盒模型不标准。<br>……多年过去……<br>W3C：感觉还是 IE 的那个模型比较好。但我们已经回不去了……算了加个属性支持一下 IE 那种模式吧。<br><code>box-sizing</code> 这货就是用来擦屁股的，我从来没见过有人用 <code>padding-box</code> 的……<br>作者：顾轶灵<br>链接：<a href="https://www.zhihu.com/question/25509268/answer/30949718" target="_blank" rel="noopener">https://www.zhihu.com/question/25509268/answer/30949718</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><h1 id="2-测试代码"><a href="#2-测试代码" class="headerlink" title="2. 测试代码"></a>2. 测试代码</h1><p><fancybox><img src="https://image.gslb.dawnlab.me/55a3a646889a1ae518708c376cc60805.png" alt=""></fancybox></p><p>代码放在文末</p><p><strong>运行结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/415425ebeafaf5ae1cf5a73ec42a31ee.png" alt=""></fancybox></p><h1 id="3-box-sizing-content-box"><a href="#3-box-sizing-content-box" class="headerlink" title="3. box-sizing: content-box"></a>3. box-sizing: content-box</h1><p><fancybox><img src="https://image.gslb.dawnlab.me/4cac638ea37d79552dc885573710f8b1.png" alt=""></fancybox></p><h1 id="4-box-sizing-border-box"><a href="#4-box-sizing-border-box" class="headerlink" title="4. box-sizing: border-box"></a>4. box-sizing: border-box</h1><p><fancybox><img src="https://image.gslb.dawnlab.me/0b50d7702ec405a4f4ab30fd35323861.png" alt=""></fancybox></p><h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h1><p>在浏览器中，box-sizing 默认是 content-box</p><ol><li><p>content-box（标准盒模型）<br>width = 内容的宽度<br>height = 内容的高度</p></li><li><p>border-box（怪异盒模型）<br>width = border + padding + 内容的宽度<br>height = border + padding + 内容的高度</p></li></ol><h1 id="6-参考材料"><a href="#6-参考材料" class="headerlink" title="6. 参考材料"></a>6. 参考材料</h1><p><a href="https://rainey.space/2016/07/02/Ni_Zhen_De_Liao_Jie_He_Mo_Xing_Ma/" target="_blank" rel="noopener">你真的了解盒模型吗？</a></p><h1 id="7-测试代码"><a href="#7-测试代码" class="headerlink" title="7. 测试代码"></a>7. 测试代码</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.content-box</span>, <span class="selector-class">.border-box</span> &#123;</span></span><br><span class="line">            font-size: 30px;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">            display: flex;</span><br><span class="line">            align-items: center;</span><br><span class="line">            justify-content: center;</span><br><span class="line">            padding: 20px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            width: 300px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 10<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">            background-color: aquamarine;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.content-box</span> &#123;</span></span><br><span class="line">            margin: 80px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.border-box</span> &#123;</span></span><br><span class="line">            margin: 30px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content-box"</span>&gt;</span>margin: 80px<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-box"</span>&gt;</span>margin: 30px<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;fancybox&gt;&lt;img src=&quot;https://image.gslb.dawnlab.me/fc2a80e8075489dd5f57b4c6262a8113.png&quot; alt=&quot;&quot;&gt;&lt;/fancybox&gt;&lt;/p&gt;
&lt;p&gt;盒子模型…&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://blog.curtaintan.club/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://blog.curtaintan.club/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>算法之排序</title>
    <link href="http://blog.curtaintan.club/2020/02/15/%E7%AE%97%E6%B3%95%E4%B9%8B%E6%8E%92%E5%BA%8F/"/>
    <id>http://blog.curtaintan.club/2020/02/15/%E7%AE%97%E6%B3%95%E4%B9%8B%E6%8E%92%E5%BA%8F/</id>
    <published>2020-02-15T09:20:59.000Z</published>
    <updated>2020-02-17T04:34:31.763Z</updated>
    
    <content type="html"><![CDATA[<p>总结常用排序算法.</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学数据结构已经是大二上学期的事了，</p><p>写一下常用的排序算法。</p><h1 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1. 冒泡排序"></a>1. 冒泡排序</h1><p><fancybox><img src="https://image.gslb.dawnlab.me/1a58b4df14ae64a31288c7957ea43070.png" alt=""></fancybox></p><h2 id="1-1-编程思路"><a href="#1-1-编程思路" class="headerlink" title="1.1 编程思路"></a>1.1 编程思路</h2><p>使用两层循环，</p><ul><li>外层循环：执行 i 次，每一次排好一个元素。</li><li>内层循环：每执行一次，就挑选出数组中第 i 个位置的元素，并将该元素放到 i 位置。</li></ul><h2 id="1-2-编程要点"><a href="#1-2-编程要点" class="headerlink" title="1.2 编程要点"></a>1.2 编程要点</h2><p>在内层循环，相邻元素依次比较，把最大或最小元素放到最后。</p><h2 id="1-3-代码实现"><a href="#1-3-代码实现" class="headerlink" title="1.3 代码实现"></a>1.3 代码实现</h2><figure class="highlight js"><figcaption><span>冒泡排序</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [ <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">6</span> ]</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param &#123; array &#125; arr 数组</span></span><br><span class="line"><span class="comment"> * @param &#123; boolean &#125; asc 是否升序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bobble</span>(<span class="params"> arr, asc = true </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i ++ )&#123;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr.length; j ++ )&#123;</span><br><span class="line">            <span class="comment">// 升序</span></span><br><span class="line">            <span class="keyword">if</span>( asc )&#123;</span><br><span class="line">                <span class="keyword">if</span>( arr[j] &lt; arr[j + <span class="number">1</span>] )&#123;</span><br><span class="line">                    [ arr[j+<span class="number">1</span>], arr[j] ] = [ arr[j], arr[j+<span class="number">1</span>] ]</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">// 降序</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>( arr[j+<span class="number">1</span>] &lt; arr[j] )&#123;</span><br><span class="line">                    [ arr[j+<span class="number">1</span>], arr[j] ] = [ arr[j], arr[j+<span class="number">1</span>] ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">`外层循环第<span class="subst">$&#123; i &#125;</span>次执行的结果：`</span>,arr )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( bobble( arr, <span class="literal">true</span> ) )</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><fancybox><img src="https://image.gslb.dawnlab.me/a236cf5691694704cd23494516c97198.png" alt=""></fancybox></p><p>根据代码可知，代码有待优化。</p><h2 id="1-4-代码优化"><a href="#1-4-代码优化" class="headerlink" title="1. 4 代码优化"></a>1. 4 代码优化</h2><p>优化点：</p><ol><li>可知，外层循环每执行一次，就有一个元素在尾部排好序，则在内部循环中，可以减少后面 i 次不必要的比较。</li><li>当外层循环执行到最后一次时，只有一个元素，则可以不必再比较，则外层循环可以减 1 </li></ol><figure class="highlight js"><figcaption><span>冒泡排序优化</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bobble</span>(<span class="params"> arr, asc = true </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i ++ )&#123;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j ++ )&#123;</span><br><span class="line">            <span class="comment">// 升序</span></span><br><span class="line">            <span class="keyword">if</span>( asc )&#123;</span><br><span class="line">                <span class="keyword">if</span>( arr[j] &lt; arr[j + <span class="number">1</span>] )&#123;</span><br><span class="line">                    [ arr[j+<span class="number">1</span>], arr[j] ] = [ arr[j], arr[j+<span class="number">1</span>] ]</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">// 降序</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>( arr[j+<span class="number">1</span>] &lt; arr[j] )&#123;</span><br><span class="line">                    [ arr[j+<span class="number">1</span>], arr[j] ] = [ arr[j], arr[j+<span class="number">1</span>] ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">`外层循环第<span class="subst">$&#123; i &#125;</span>次执行的结果：`</span>,arr )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><fancybox><img src="https://image.gslb.dawnlab.me/4eb2f917381073e959cd342fcc5f4454.png" alt=""></fancybox></p><h1 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2. 选择排序"></a>2. 选择排序</h1><p><fancybox><img src="https://image.gslb.dawnlab.me/f37218b2ce6f2f518bb3e438b3082db1.png" alt=""></fancybox></p><h2 id="2-1-编程思路"><a href="#2-1-编程思路" class="headerlink" title="2.1 编程思路"></a>2.1 编程思路</h2><p>从未排序的部分选择最大或最小的值，将其排在有序序列的前或后。</p><ul><li>升序：选择未排序部分的最小值，与排序部分后第一个元素交换</li><li>降序：选择未排序部分的最大值，与排序部分后第一个元素交换</li></ul><p><strong>实现：</strong>使用两层循环</p><ol><li>外层循环：执行 i - 1 次，将内层循环挑选出的元素放到已排序部分的尾部。</li><li>内层循环：挑选出未排序部分最小值或最大值的下标。</li></ol><h2 id="2-2-编程要点"><a href="#2-2-编程要点" class="headerlink" title="2.2 编程要点"></a>2.2 编程要点</h2><ol><li>将数组用外层循环分为两段</li><li>每次外层循环时，使用一个 flagIndex 标记来标记内层循环挑选出来的元素的下标</li><li>外层循环将挑选出来的元素放到排好序的末尾</li></ol><h2 id="2-3-代码实现"><a href="#2-3-代码实现" class="headerlink" title="2.3  代码实现"></a>2.3  代码实现</h2><figure class="highlight js"><figcaption><span>选择排序</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [ <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">6</span> ]</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param &#123; array &#125; arr 数组</span></span><br><span class="line"><span class="comment"> * @param &#123; boolean &#125; asc 是否升序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectSort</span>(<span class="params"> arr, asc = true </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i ++ )&#123;</span><br><span class="line">        <span class="comment">// 记住未排序部分的最小值或最大值的下标</span></span><br><span class="line">        <span class="keyword">let</span> flagIndex = i</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">let</span> j = i; j &lt; arr.length; j ++ )&#123;</span><br><span class="line">            <span class="keyword">if</span>( asc )&#123;</span><br><span class="line">                <span class="keyword">if</span>( arr[flagIndex] &gt; arr[j] )&#123;</span><br><span class="line">                    flagIndex = j</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>( arr[flagIndex] &lt; arr[j] )&#123;</span><br><span class="line">                    flagIndex = j</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        [ arr[flagIndex], arr[i] ] = [ arr[i], arr[flagIndex] ]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( selectSort( arr, <span class="literal">false</span> ) )</span><br></pre></td></tr></table></figure><h1 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3. 插入排序"></a>3. 插入排序</h1><p><fancybox><img src="https://image.gslb.dawnlab.me/f8e978f9c8fceeae5dc707da9e8b342d.png" alt=""></fancybox></p><h2 id="3-1-编程思路"><a href="#3-1-编程思路" class="headerlink" title="3.1 编程思路"></a>3.1 编程思路</h2><p>将数组以外层循环次数为基准分成两段，数组前段：已经排好序；数组后端：未排序</p><p>将未排序部分的第一个元素插入到排好序的部分中。</p><p><strong>实现思路：</strong>使用两层循环</p><ol><li>外层循环：执行 i - 1 次，每一次将后面的一个元素排进前面部分。</li><li>内层循环：将未排序部分的第一个元素插入到排好序的部分中</li></ol><h2 id="3-2-编程要点"><a href="#3-2-编程要点" class="headerlink" title="3.2 编程要点"></a>3.2 编程要点</h2><p>内层循环：已排序部分的后一个元素向前<strong>单向冒泡</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [ <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">6</span> ]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insetSort</span>(<span class="params"> arr </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i ++ )&#123;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">let</span> j = i + <span class="number">1</span>; j &gt;= <span class="number">0</span>; j -- )&#123;</span><br><span class="line">            <span class="comment">// 单向冒泡</span></span><br><span class="line">            <span class="keyword">if</span>( arr[j] &lt; arr[ j - <span class="number">1</span> ] )&#123;</span><br><span class="line">                [ arr[ j - <span class="number">1</span> ], arr[j] ] = [ arr[j], arr[ j - <span class="number">1</span> ] ]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( insetSort( arr ) )</span><br></pre></td></tr></table></figure><h1 id="4-快速排序"><a href="#4-快速排序" class="headerlink" title="4. 快速排序"></a>4. 快速排序</h1><p><fancybox><img src="https://image.gslb.dawnlab.me/cc11726a27ac11a43d2e140a6004f32d.png" alt=""></fancybox></p><h2 id="4-1-编程思路"><a href="#4-1-编程思路" class="headerlink" title="4.1 编程思路"></a>4.1 编程思路</h2><p>寻找一个中点，将原数组分为三部分</p><ol><li>第一部分：元素的值都比中点的值小</li><li>第二部分：当前元素</li><li>第三部分：元素的值都比中点的值大</li></ol><p>依次递归，当分出数组的长度小于等于 1 时，返回数组</p><p>最后把三部分合并到一起。</p><p><strong>实现思路：</strong></p><p>使用三个变量保存三部分的结果，最后合并到一起。</p><h2 id="4-2-编程要点"><a href="#4-2-编程要点" class="headerlink" title="4.2 编程要点"></a>4.2 编程要点</h2><p>将原数组分成三部分保存下来，返回合并的值。</p><h2 id="4-3-代码实现"><a href="#4-3-代码实现" class="headerlink" title="4.3  代码实现"></a>4.3  代码实现</h2><figure class="highlight js"><figcaption><span>快速排序</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [ <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">6</span> ]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quick</span>(<span class="params"> arr </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( arr.length &lt;= <span class="number">1</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> arr </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> pointIndex = <span class="built_in">Math</span>.floor( arr.length / <span class="number">2</span> )</span><br><span class="line">    <span class="keyword">let</span> pointValue = arr.splice( pointIndex, <span class="number">1</span> )[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">let</span> lArr = []</span><br><span class="line">    <span class="keyword">let</span> rArr = []</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i ++ )&#123;</span><br><span class="line">        arr[i] &gt; pointValue ? rArr.push( arr[i] ) : lArr.push( arr[i] )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [ ...quick(lArr), pointValue, ...quick(rArr) ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( quick( arr ) )</span><br></pre></td></tr></table></figure><h1 id="5-快速排序（原数组操作方式）"><a href="#5-快速排序（原数组操作方式）" class="headerlink" title="5. 快速排序（原数组操作方式）"></a>5. 快速排序（原数组操作方式）</h1><p><fancybox><img src="https://image.gslb.dawnlab.me/a29a951f083c80f8506d235edbc0f7a4.png" alt=""></fancybox></p><h2 id="5-1-编程思路"><a href="#5-1-编程思路" class="headerlink" title="5.1 编程思路"></a>5.1 编程思路</h2><p>在原数组上操作，取一个中值，操作原素组，将原数组以该中值为基点分成两部分，记录下标，重复进行此操作，当开始的下标和结束的下标相等时结束递归，最后，整个数组就排序成功。</p><h2 id="5-2-编程要点"><a href="#5-2-编程要点" class="headerlink" title="5.2 编程要点"></a>5.2 编程要点</h2><ol><li>将原数组以中值为基点分成三部分。</li><li>每次递归，传入正确的下标</li><li>获取中值下标函数的编写</li></ol><p><strong>获取中值下标函数</strong></p><p>作用：将数组段以左起点为中点，将此段数组分成三段，返回中值的下标。</p><p>思路：</p><ol><li>取出起点的值作为中点</li><li>使用变量 j 为起始值的下标</li><li>使用一个循环，循环将此段数组分为三段（满足条件–&gt;交换位置–&gt;j++）</li><li>返回中值下标 j</li></ol><h2 id="5-3-代码实现"><a href="#5-3-代码实现" class="headerlink" title="5.3  代码实现"></a>5.3  代码实现</h2><figure class="highlight js"><figcaption><span>快速排序（操作原数组方式）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [ <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">6</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函数的作用：获取中值下标</span></span><br><span class="line"><span class="comment"> * 以该段数组尾部的值作为基准，将数组分为两半，返回基准值的下标</span></span><br><span class="line"><span class="comment"> * @param &#123; Array &#125; arr  原素组</span></span><br><span class="line"><span class="comment"> * @param &#123; number &#125; start 操作开始的地方</span></span><br><span class="line"><span class="comment"> * @param &#123; number &#125; end 操作结束的地方</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCenterIndex</span>(<span class="params"> arr, start, end </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> j = start</span><br><span class="line">    <span class="keyword">let</span> pValue = arr[end]</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">let</span> i = start; i &lt;= end; i ++ )&#123;</span><br><span class="line">        <span class="keyword">if</span>( arr[i] &lt;= pValue )&#123;</span><br><span class="line">            [ arr[i], arr[j] ] = [ arr[j], arr[i] ]</span><br><span class="line">            j ++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> j - <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params"> arr, start = <span class="number">0</span>, end = arr.length <span class="number">-1</span> </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( end - start &lt; <span class="number">1</span> ) <span class="keyword">return</span> arr</span><br><span class="line">    <span class="keyword">let</span> centerIndex = getCenterIndex( arr, start, end )</span><br><span class="line">    <span class="comment">// 将左右两边依次排序</span></span><br><span class="line">    quickSort( arr, start, centerIndex - <span class="number">1</span> )</span><br><span class="line">    quickSort( arr, centerIndex + <span class="number">1</span>, end )</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( quickSort( arr ) )</span><br></pre></td></tr></table></figure><h1 id="6-归并排序"><a href="#6-归并排序" class="headerlink" title="6. 归并排序"></a>6. 归并排序</h1><p><fancybox><img src="https://image.gslb.dawnlab.me/6521052efb10fdb70ec72da8bbde203f.png" alt=""></fancybox></p><h2 id="6-1-编程思路"><a href="#6-1-编程思路" class="headerlink" title="6.1 编程思路"></a>6.1 编程思路</h2><ol><li>使用递归将数组递归拆分直至只有一个元素</li><li>将数组依次合并</li></ol><h2 id="6-2-编程要点"><a href="#6-2-编程要点" class="headerlink" title="6.2 编程要点"></a>6.2 编程要点</h2><p>使用两个函数：</p><ol><li>分函数：将数组进行拆分，直到只有一个元素为止</li><li>合函数：使用队列的思想，将两个两个的数组合并成一个数组</li></ol><h2 id="6-3-代码实现"><a href="#6-3-代码实现" class="headerlink" title="6.3  代码实现"></a>6.3  代码实现</h2><figure class="highlight js"><figcaption><span>归并排序</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [ <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">6</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 归并排序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params"> arr </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( arr.length &lt; <span class="number">2</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> middle = <span class="built_in">Math</span>.floor( arr.length / <span class="number">2</span> )</span><br><span class="line">    <span class="keyword">let</span> left = arr.slice( <span class="number">0</span>, middle )</span><br><span class="line">    <span class="keyword">let</span> right = arr.slice( middle )</span><br><span class="line">    <span class="comment">// 先分再和</span></span><br><span class="line">    <span class="keyword">return</span> merge( mergeSort( left ), mergeSort( right ) )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将分开的数组合并</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params"> l, r </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="comment">// 依次用第一个元素对比 小的元素放到</span></span><br><span class="line">    <span class="keyword">while</span>( l.length &amp;&amp; r.length )&#123;</span><br><span class="line">        <span class="keyword">if</span>( l[<span class="number">0</span>] &lt;= r[<span class="number">0</span>] )&#123;</span><br><span class="line">            res.push( l.shift() )</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.push( r.shift() )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将剩下的元素放到 res 中</span></span><br><span class="line">    <span class="keyword">while</span>( l.length ) res.push( l.shift() )</span><br><span class="line">    <span class="keyword">while</span>( r.length ) res.push( r.shift() )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( mergeSort( arr ) )</span><br></pre></td></tr></table></figure><h1 id="7-未完待续……"><a href="#7-未完待续……" class="headerlink" title="7. 未完待续……"></a>7. 未完待续……</h1><h2 id="7-1-桶排序"><a href="#7-1-桶排序" class="headerlink" title="7.1 桶排序"></a>7.1 桶排序</h2><h2 id="7-2-计数排序"><a href="#7-2-计数排序" class="headerlink" title="7.2 计数排序"></a>7.2 计数排序</h2><h2 id="7-3-希尔排序"><a href="#7-3-希尔排序" class="headerlink" title="7.3 希尔排序"></a>7.3 希尔排序</h2><h1 id="8-参考材料"><a href="#8-参考材料" class="headerlink" title="8. 参考材料"></a>8. 参考材料</h1><p><a href="https://juejin.im/post/5d371aa6e51d455d850d3bbe" target="_blank" rel="noopener">JavaScript 数据结构与算法之美 - 归并排序、快速排序、希尔排序、堆排序</a></p><p><a href="https://juejin.im/post/5d75f77e5188253e4b2f0d3d" target="_blank" rel="noopener">手写算法并记住它：快速排序（最易理解版）</a></p><p><a href="https://juejin.im/post/5d75b4d45188250c992d5919" target="_blank" rel="noopener">手写算法并记住它：快速排序（5行代码简单版）</a></p><p><a href="https://juejin.im/post/5d72201df265da03ca11906d" target="_blank" rel="noopener">手写算法并记住它：插入排序</a></p><p><a href="https://juejin.im/post/5d6f14c5e51d4561f17a5130" target="_blank" rel="noopener">手写算法并记住它：选择排序</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结常用排序算法.&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://blog.curtaintan.club/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="排序" scheme="http://blog.curtaintan.club/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>思路清晰--前端性能优化</title>
    <link href="http://blog.curtaintan.club/2020/02/14/%E6%80%9D%E8%B7%AF%E6%B8%85%E6%99%B0-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>http://blog.curtaintan.club/2020/02/14/%E6%80%9D%E8%B7%AF%E6%B8%85%E6%99%B0-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</id>
    <published>2020-02-14T01:25:00.000Z</published>
    <updated>2020-02-14T02:18:57.932Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-原则"><a href="#1-原则" class="headerlink" title="1. 原则"></a>1. 原则</h1><ol><li>多使用内存、缓存或其他方法来存储</li><li>减少 cpu 计算，减少 http 网络请求</li></ol><h1 id="2-从哪里入手"><a href="#2-从哪里入手" class="headerlink" title="2. 从哪里入手"></a>2. 从哪里入手</h1><ol><li>加载页面和静态资源</li><li>页面渲染</li></ol><h2 id="2-1-加载资源优化"><a href="#2-1-加载资源优化" class="headerlink" title="2.1 加载资源优化"></a>2.1 加载资源优化</h2><ol><li>静态资源的压缩和合并</li><li>静态资源缓存</li><li>使用 CDN 让资源加载更快</li><li>使用 SSR 后端渲染，数据直接输出到 HTML 中</li></ol><h2 id="2-2-渲染优化"><a href="#2-2-渲染优化" class="headerlink" title="2.2 渲染优化"></a>2.2 渲染优化</h2><ol><li>CSS 放前面，JS 放后面</li><li>懒加载（图片懒加载、下拉加载更多）</li><li>减少 DOM 查询，对 DOM 查询做缓存</li><li>减少 DOM 操作，多个操作尽量合并在一起执行（例如：插入列表）</li><li>使用事件节流与防抖</li><li>尽早执行操作（ 如：DOMContentLoaded ）</li></ol><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h1><p>简略的概述了一下前端性能的优化。</p><h1 id="4-资源推荐"><a href="#4-资源推荐" class="headerlink" title="4. 资源推荐"></a>4. 资源推荐</h1><p>框架打包优化</p><p><a href="https://juejin.im/post/5cd4d991e51d453a4a357e69" target="_blank" rel="noopener">🚀 记一次前端性能优化</a></p><p><a href="https://csspod.com/frontend-performance-best-practices/" target="_blank" rel="noopener">前端性能优化最佳实践</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-原则&quot;&gt;&lt;a href=&quot;#1-原则&quot; class=&quot;headerlink&quot; title=&quot;1. 原则&quot;&gt;&lt;/a&gt;1. 原则&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;多使用内存、缓存或其他方法来存储&lt;/li&gt;
&lt;li&gt;减少 cpu 计算，减少 http 网络请求&lt;/li&gt;

      
    
    </summary>
    
    
      <category term="前端" scheme="http://blog.curtaintan.club/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="性能优化" scheme="http://blog.curtaintan.club/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>mobx与mobx-react实现todoList</title>
    <link href="http://blog.curtaintan.club/2020/02/11/mobx%E4%B8%8Emobx-react%E5%AE%9E%E7%8E%B0todoList/"/>
    <id>http://blog.curtaintan.club/2020/02/11/mobx%E4%B8%8Emobx-react%E5%AE%9E%E7%8E%B0todoList/</id>
    <published>2020-02-11T09:09:51.000Z</published>
    <updated>2020-02-15T09:35:29.527Z</updated>
    
    <content type="html"><![CDATA[<p>使用 mobx 结合 react 搭建的小 demo….</p><a id="more"></a><p>先看效果图：</p><p><fancybox><img src="https://image.gslb.dawnlab.me/330531fde85d66b06ad388bb580c1fcb.png" alt=""></fancybox></p><p><fancybox><img src="https://image.gslb.dawnlab.me/14ac7263bb6a30480b9833b07e708fb0.png" alt=""></fancybox></p><p>预览地址：<a href="https://curtaintan.github.io/mobx-todoList/react/" target="_blank" rel="noopener">TodoList</a><br>github 地址：<a href="https://github.com/curtainTan/mobx-todoList" target="_blank" rel="noopener">mobx-react — todoList</a></p><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>本文主要介绍 mobx-react 与 mobx 的使用，最后完成 todolist。</p><p>此 demo 全部用 class 组件搭建完成，如需使用 hooks ，请参考<a href="https://mobx-react.js.org/" target="_blank" rel="noopener">mobx与react-hooks</a></p><h1 id="2-环境准备"><a href="#2-环境准备" class="headerlink" title="2. 环境准备"></a>2. 环境准备</h1><p>需要在<a href="http://blog.curtaintan.club/2020/02/11/mobx-%E7%AE%80%E6%98%8E%E5%AD%A6%E4%B9%A0/">mobx—简明学习</a>的基础上。</p><p><strong>安装 react一套</strong>：</p><p><code>yarn add react react-dom prop-types</code></p><p><strong>安装 babel-react相关插件</strong></p><p><code>yarn add @babel/preset-react</code></p><p><strong>安装 mobx-react</strong></p><p><code>yarn add mobx-react</code></p><p><strong>配置 webpack.config.js 文件</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/3e9514b9386a865aef4f966afab7f411.png" alt=""></fancybox></p><p>配置完成，开始编写文件。</p><h1 id="3-mobx-react-说明："><a href="#3-mobx-react-说明：" class="headerlink" title="3. mobx-react 说明："></a>3. mobx-react 说明：</h1><p>看 <a href="https://github.com/mobxjs/mobx-react" target="_blank" rel="noopener">mobx-react 官方文档</a></p><p>可知有如下 api：</p><ol><li>observer(componentClass)</li><li>Observer —- Observer是一个React组件，它将观察者应用于组件中的匿名区域。</li><li>useLocalStore hook</li><li>useAsObservableSource hook</li><li>Server Side Rendering with useStaticRendering（服务端）</li><li>PropTypes</li><li>Provider and inject</li><li>disposeOnUnmount(componentInstance, propertyKey | function | function[])</li></ol><p>可见，有两种 api，一种是针对 componentClass 的，一种是针对 hooks 的。</p><p>我们使用 componentClass，所以主要用到：</p><ol><li>observer(componentClass)   使类重新render</li><li>PropTypes                  判定proptype</li><li>Provider and inject        提供 store 和 注入对应props</li></ol><p>具体的使用，请阅读 <strong><a href="https://github.com/mobxjs/mobx-react" target="_blank" rel="noopener"> 官方文档 </a></strong>， 官方文档写得蛮详细的。</p><h1 id="4-开始编写"><a href="#4-开始编写" class="headerlink" title="4. 开始编写"></a>4. 开始编写</h1><p>文件结构：<br><fancybox><img src="https://image.gslb.dawnlab.me/d3bc60216a0eeede72d6328d81258ed7.png" alt=""></fancybox></p><h2 id="4-1-store-js"><a href="#4-1-store-js" class="headerlink" title="4.1 store.js"></a>4.1 store.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observable, action, computed, observe &#125; <span class="keyword">from</span> <span class="string">"mobx"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span> </span>&#123;</span><br><span class="line">    id = <span class="built_in">Math</span>.random()</span><br><span class="line">    @observable title = <span class="string">""</span></span><br><span class="line">    @observable finished = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">constructor</span>( title )&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title</span><br><span class="line">    &#125;</span><br><span class="line">    @action.bound toggle()&#123;</span><br><span class="line">        <span class="keyword">this</span>.finished = !<span class="keyword">this</span>.finished</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">    @observable todos = []</span><br><span class="line">    disposers = []</span><br><span class="line">    @action.bound createTodo( title )&#123;</span><br><span class="line">        <span class="keyword">this</span>.todos.unshift( <span class="keyword">new</span> Todo( title ) )</span><br><span class="line">    &#125;</span><br><span class="line">    @computed <span class="keyword">get</span> left()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.todos.filter( <span class="function"><span class="params">todo</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> !todo.finished</span><br><span class="line">        &#125;).length</span><br><span class="line">    &#125;</span><br><span class="line">    @action.bound removeTodo( todo )&#123;</span><br><span class="line">        <span class="keyword">this</span>.todos.remove( todo )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        observe( <span class="keyword">this</span>.todos, change =&gt; &#123;</span><br><span class="line">            <span class="keyword">this</span>.disposers.forEach( <span class="function"><span class="params">disposer</span> =&gt;</span> disposer() )</span><br><span class="line">            <span class="keyword">this</span>.disposers = []</span><br><span class="line">            <span class="keyword">for</span>( <span class="keyword">let</span> todo <span class="keyword">of</span> change.object )&#123;</span><br><span class="line">                <span class="keyword">var</span> disposer = observe( todo, change =&gt; &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log( change )</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="keyword">this</span>.disposers.push( disposer )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Store()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ss = &#123;</span><br><span class="line">    store</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ss</span><br></pre></td></tr></table></figure><h2 id="4-2-index-jsx"><a href="#4-2-index-jsx" class="headerlink" title="4.2 index.jsx"></a>4.2 index.jsx</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span></span><br><span class="line"><span class="keyword">import</span> &#123; observer, Provider &#125; <span class="keyword">from</span> <span class="string">"mobx-react"</span></span><br><span class="line"><span class="keyword">import</span> &#123; trace &#125; <span class="keyword">from</span> <span class="string">"mobx"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> TodoHeader <span class="keyword">from</span> <span class="string">"./conponent/TodoHeader.jsx"</span></span><br><span class="line"><span class="keyword">import</span> TodoView <span class="keyword">from</span> <span class="string">"./conponent/TodoView.jsx"</span></span><br><span class="line"><span class="keyword">import</span> TodoFooter <span class="keyword">from</span> <span class="string">"./conponent/TodoFooter.jsx"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ss <span class="keyword">from</span> <span class="string">"./store.js"</span></span><br><span class="line"></span><br><span class="line">@observer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoList</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        trace()</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">"todo-list"</span> &gt;</span><br><span class="line">                &lt;TodoHeader /&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;TodoView /&gt;</span><br><span class="line">                &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">                &lt;TodoFooter /</span>&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render( (</span></span><br><span class="line"><span class="regexp">    &lt;Provider &#123; ...ss &#125; &gt;</span></span><br><span class="line"><span class="regexp">        &lt;TodoList /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/Provider&gt;</span></span><br><span class="line"><span class="regexp">), document.querySelector("#root") )</span></span><br></pre></td></tr></table></figure><h2 id="4-3-TodoFooter-jsx"><a href="#4-3-TodoFooter-jsx" class="headerlink" title="4.3 TodoFooter.jsx"></a>4.3 TodoFooter.jsx</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span></span><br><span class="line"><span class="keyword">import</span> &#123; observer, inject &#125; <span class="keyword">from</span> <span class="string">"mobx-react"</span></span><br><span class="line"><span class="keyword">import</span> &#123; trace &#125; <span class="keyword">from</span> <span class="string">"mobx"</span></span><br><span class="line"></span><br><span class="line">@inject( <span class="function"><span class="params">allStore</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        left: allStore.store.left</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">@observer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoFooter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        trace()</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;footer&gt;</span><br><span class="line">                &#123; <span class="keyword">this</span>.props.left &#125; items unfinished...</span><br><span class="line">            &lt;<span class="regexp">/footer&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default TodoFooter</span></span><br></pre></td></tr></table></figure><h2 id="4-4-TodoHeader-jsx"><a href="#4-4-TodoHeader-jsx" class="headerlink" title="4.4 TodoHeader.jsx"></a>4.4 TodoHeader.jsx</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span></span><br><span class="line"><span class="keyword">import</span> &#123; observer, inject &#125; <span class="keyword">from</span> <span class="string">"mobx-react"</span></span><br><span class="line"></span><br><span class="line">@inject( <span class="string">"store"</span> )</span><br><span class="line">@observer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoHeader</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        inputValue : <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleSubmit = <span class="function">(<span class="params"> e </span>) =&gt;</span> &#123;</span><br><span class="line">        e.preventDefault()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> store = <span class="keyword">this</span>.props.store</span><br><span class="line">        <span class="keyword">var</span> inputValue = <span class="keyword">this</span>.state.inputValue</span><br><span class="line"></span><br><span class="line">        store.createTodo( inputValue )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.setState(&#123; <span class="attr">inputValue</span>: <span class="string">""</span> &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    handleChange = <span class="function">(<span class="params"> e </span>) =&gt;</span> &#123;</span><br><span class="line">        e.persist()</span><br><span class="line">        <span class="keyword">var</span> inputValue = e.target.value</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            inputValue: inputValue</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;header&gt;</span><br><span class="line">                &lt;form onSubmit=&#123; <span class="keyword">this</span>.handleSubmit &#125; &gt;</span><br><span class="line">                    &lt;input </span><br><span class="line">                    type=<span class="string">"text"</span> </span><br><span class="line">                    onChange=&#123; e =&gt; <span class="keyword">this</span>.handleChange( e )&#125; </span><br><span class="line">                    value=&#123; <span class="keyword">this</span>.state.inputValue &#125;</span><br><span class="line">                    className=<span class="string">"input"</span></span><br><span class="line">                    placeholder=<span class="string">" what deeds to be finished? "</span></span><br><span class="line">                    /&gt;</span><br><span class="line">                &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>header&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> TodoHeader</span><br></pre></td></tr></table></figure><h2 id="4-5-TodoView-jsx"><a href="#4-5-TodoView-jsx" class="headerlink" title="4.5 TodoView.jsx"></a>4.5 TodoView.jsx</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, Fragment &#125; <span class="keyword">from</span> <span class="string">"react"</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">"prop-types"</span></span><br><span class="line"><span class="keyword">import</span> &#123; observer, inject &#125; <span class="keyword">from</span> <span class="string">"mobx-react"</span></span><br><span class="line"></span><br><span class="line">@inject( <span class="string">"store"</span> )</span><br><span class="line">@observer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoView</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">const</span> store = <span class="keyword">this</span>.props.store</span><br><span class="line">        <span class="keyword">const</span> &#123; todos &#125; = store</span><br><span class="line">        <span class="keyword">return</span> todos.map( <span class="function"><span class="params">todo</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                &lt;li key=&#123; todo.id &#125; className=<span class="string">"todo-item"</span>&gt;</span><br><span class="line">                    &lt;TodoItem todo=&#123; todo &#125; /&gt;</span><br><span class="line">                    &lt;span className=<span class="string">"delete"</span> onClick=&#123; e =&gt; store.removeTodo( todo ) &#125; &gt;X&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>li&gt;</span><br><span class="line">            )</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@observer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoItem</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">        todo: PropTypes.shape(&#123;</span><br><span class="line">            id: PropTypes.number.isRequired,</span><br><span class="line">            title: PropTypes.string.isRequired,</span><br><span class="line">            finished: PropTypes.bool.isRequired</span><br><span class="line">        &#125;).isRequired</span><br><span class="line">    &#125;</span><br><span class="line">    handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.props.todo.toggle()</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">const</span> todo = <span class="keyword">this</span>.props.todo</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;Fragment&gt;</span><br><span class="line">                &lt;input </span><br><span class="line">                type=<span class="string">"checkbox"</span> </span><br><span class="line">                className=<span class="string">"toggle"</span> </span><br><span class="line">                checked=&#123; todo.finished &#125; </span><br><span class="line">                onChange=&#123; <span class="keyword">this</span>.handleClick &#125; /&gt;</span><br><span class="line">                &lt;span className=&#123;[<span class="string">"title"</span>, todo.finished &amp;&amp; <span class="string">"finished"</span>].join(<span class="string">" "</span>)&#125; &gt;</span><br><span class="line">                    &#123; todo.title &#125;</span><br><span class="line">                &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>Fragment&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> TodoView</span><br></pre></td></tr></table></figure><h2 id="4-6-html-文件内添加-css-样式"><a href="#4-6-html-文件内添加-css-样式" class="headerlink" title="4.6 html 文件内添加 css 样式"></a>4.6 html 文件内添加 css 样式</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.input</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.todo-item</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.todo-item</span> <span class="selector-class">.toggle</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.todo-item</span> <span class="selector-class">.title</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.todo-item</span> <span class="selector-class">.title</span><span class="selector-class">.finished</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: line-through;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.todo-item</span> <span class="selector-class">.delete</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">footer</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">22px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-性能优化"><a href="#5-性能优化" class="headerlink" title="5. 性能优化"></a>5. 性能优化</h1><p><strong>提升性能三大法则：</strong></p><ol><li>细粒度拆分视图组件</li><li>使用专用组件处理列表</li><li>尽可能晚的结构可观察数据</li></ol><p>上面三大法则，你在上面的代码中，能找到在哪里吗？？</p><p>还有其他的优化点：</p><ol><li>尽早的绑定函数（不要传匿名函数和箭头函数）</li><li>不要使用数组的索引作为 key</li><li>使用小组件</li></ol><p>详情参考：<a href="https://cn.mobx.js.org/best/react-performance.html" target="_blank" rel="noopener">优化 React 组件渲染</a></p><h1 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h1><p>当得到一些点拨过后，再去阅读官方文档，就会收获更多，</p><p>当然也要学会阅读官方文档，官方文档写得都蛮好的。</p><p>写下这篇文章，也算是总结了一下 mobx 相关的知识.</p><p><strong>加油，写下这篇文章希望对你有帮助，与君共勉！！</strong></p><p>有时间，我会把 class 版本改成 hook 版本的。</p><h1 id="7-参考材料"><a href="#7-参考材料" class="headerlink" title="7. 参考材料"></a>7. 参考材料</h1><p><a href="https://www.imooc.com/video/17455" target="_blank" rel="noopener">茵风泳月–mobx入门基础教程</a></p><p><a href="https://cn.mobx.js.org/" target="_blank" rel="noopener">mobx—-官网</a></p><p><a href="https://github.com/mobxjs/mobx-react" target="_blank" rel="noopener">mobx-react 文档</a></p><p><a href="https://mobx-react.js.org/" target="_blank" rel="noopener">mobx-react 官方文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 mobx 结合 react 搭建的小 demo….&lt;/p&gt;
    
    </summary>
    
    
      <category term="mobx" scheme="http://blog.curtaintan.club/categories/mobx/"/>
    
    
      <category term="mobx" scheme="http://blog.curtaintan.club/tags/mobx/"/>
    
  </entry>
  
</feed>
