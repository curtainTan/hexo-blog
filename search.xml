<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>es6---Decorator</title>
      <link href="/2020/02/10/es6-Decorator/"/>
      <url>/2020/02/10/es6-Decorator/</url>
      
        <content type="html"><![CDATA[<p>搭建可使用 Decorator 的环境，并学习 Decorator 。</p><a id="more"></a><h1 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h1><ol><li>安装插件：</li></ol><p><strong>webpack ：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add webpack webpack-cli</span><br></pre></td></tr></table></figure><p><strong>babel ：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add @babel/cli @babel/core @babel/preset-env babel-loader</span><br></pre></td></tr></table></figure><p><strong>babel 装饰器相关插件：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add @babel/plugin-proposal-decorators babel-plugin-transform-<span class="class"><span class="keyword">class</span>-<span class="title">properties</span></span></span><br></pre></td></tr></table></figure><p><strong>webpack.config.js 配置</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/6daf0e45f415f634d1d7e6fd084f9054.png" alt=""></fancybox></p><p>配置代码放在文章末尾。</p><p><strong>配置 package.json</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"webpack"</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>环境配置完毕，运行 <code>yarn dev</code> 就可以将文件编译好。</p><p>新建一个html文件，引入编译好的 js 文件，环境配置基本完成。</p><p><strong>目录结构：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/ad660f54c86b4d30f9fe7d93c7f3483a.png" alt=""></fancybox></p><h1 id="2-开始书写代码"><a href="#2-开始书写代码" class="headerlink" title="2. 开始书写代码"></a>2. 开始书写代码</h1><p>编写 bundle.js</p><h2 id="2-1-类的装饰："><a href="#2-1-类的装饰：" class="headerlink" title="2.1 类的装饰："></a>2.1 类的装饰：</h2><p><strong>代码设计：</strong><br><fancybox><img src="https://image.gslb.dawnlab.me/0653a511ca0ddb772e26aa5bf1d669b6.png" alt=""></fancybox></p><p><strong>运行结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/2de3ec69dcadd741363c8900ad824c22.png" alt=""></fancybox></p><h2 id="2-2-类方法的修饰"><a href="#2-2-类方法的修饰" class="headerlink" title="2.2 类方法的修饰"></a>2.2 类方法的修饰</h2><p><strong>代码设计：</strong><br><fancybox><img src="https://image.gslb.dawnlab.me/dc114028d6ae3eceb45a0dfdf92ee224.png" alt=""></fancybox></p><p><strong>运行结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/97f7d88203ca25ced8007e485edb6b72.png" alt=""></fancybox></p><h2 id="2-2-类属性的修饰"><a href="#2-2-类属性的修饰" class="headerlink" title="2.2 类属性的修饰"></a>2.2 类属性的修饰</h2><p><strong>代码设计：</strong><br><fancybox><img src="https://image.gslb.dawnlab.me/77917f3081af6e5790e9d41fc217aea7.png" alt=""></fancybox></p><p><strong>运行结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/ecf3285bee122202661e7b9f28be9b5d.png" alt=""></fancybox></p><p><strong>注：</strong></p><p>可以在 js 文件头部编写 <code>&quot;use strict&quot;</code>来使用严格模式，</p><p>使用严格模式后，当修改不可修改的属性时，就会打断操作并报错。</p><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h1><p>装饰器不能用修饰函数，因为函数存在变量提升。</p><h1 id="4-参考材料"><a href="#4-参考材料" class="headerlink" title="4. 参考材料"></a>4. 参考材料</h1><p><a href="https://www.imooc.com/video/17455" target="_blank" rel="noopener">茵风泳月–mobx入门基础教程</a></p><p><a href="http://es6.ruanyifeng.com/#docs/decorator#%E7%B1%BB%E7%9A%84%E8%A3%85%E9%A5%B0" target="_blank" rel="noopener">阮一峰–es6 基础入门</a></p><h1 id="5-代码"><a href="#5-代码" class="headerlink" title="5. 代码"></a>5. 代码</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义类修饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"> target </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> desc = <span class="built_in">Object</span>.getOwnPropertyDescriptors( target.prototype )</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">const</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys( desc ) )&#123;</span><br><span class="line">        <span class="keyword">if</span>( key === <span class="string">"constuctor"</span> )&#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> func = desc[key].value</span><br><span class="line">        <span class="keyword">if</span>( <span class="keyword">typeof</span> func === <span class="string">"function"</span> )&#123;</span><br><span class="line">            <span class="built_in">Object</span>.defineProperty( target.prototype, key, &#123;</span><br><span class="line">                value( ...arg )&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log( <span class="string">"加之前"</span>, key )</span><br><span class="line">                    <span class="keyword">const</span> ret = func.apply( <span class="keyword">this</span>, arg )</span><br><span class="line">                    <span class="built_in">console</span>.log( <span class="string">"相加----结果："</span>, ret )</span><br><span class="line">                    <span class="built_in">console</span>.log( <span class="string">"加之后"</span>, key )</span><br><span class="line">                    <span class="keyword">return</span> ret</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 属性修饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readonly</span>(<span class="params"> target, key, desc </span>)</span>&#123;</span><br><span class="line">    desc.writable = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法修饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validate</span>(<span class="params"> target, key, desc </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> func = desc.value</span><br><span class="line">    desc.value = <span class="function"><span class="keyword">function</span>(<span class="params"> ...arg </span>)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">let</span> num <span class="keyword">of</span> arg )&#123;</span><br><span class="line">            <span class="keyword">if</span>( <span class="keyword">typeof</span> num !== <span class="string">"number"</span> )&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`"<span class="subst">$&#123; num &#125;</span> " 不是一个数字..`</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">"函数里面的装饰器-----函数的操作---"</span> )</span><br><span class="line">        <span class="keyword">return</span> func.apply( <span class="keyword">this</span>, [ <span class="number">4</span>, <span class="number">7</span> ] )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@log</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Numberic</span> </span>&#123;</span><br><span class="line">    @readonly PI = <span class="number">3.1315926</span></span><br><span class="line">    <span class="comment">// 修饰方法</span></span><br><span class="line">    add( ...nums )&#123;</span><br><span class="line">        <span class="keyword">return</span> nums.reduce( <span class="function">(<span class="params"> p, n </span>) =&gt;</span> ( p + n ), <span class="number">0</span> )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="keyword">new</span> Numberic().add( <span class="number">1</span>, <span class="number">2</span> ) )</span><br><span class="line"><span class="keyword">var</span> ss =  <span class="keyword">new</span> Numberic()</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"修改数据前："</span>, ss )</span><br><span class="line">ss.PI = <span class="number">99</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"修改数据后："</span>, ss )</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式（五）---装饰器模式</title>
      <link href="/2020/02/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%94%EF%BC%89-%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/02/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%94%EF%BC%89-%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><fancybox><img src="https://image.gslb.dawnlab.me/124991d344285d28139138d6d1a00a7d.png" alt=""></fancybox></p><p>手写一个装饰器模式。</p><a id="more"></a><h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h1><p><strong>装饰器模式的目的：</strong></p><ol><li>为对象添加新功能</li><li>不改变其原有的结构和功能</li></ol><h1 id="2-代码演示"><a href="#2-代码演示" class="headerlink" title="2. 代码演示"></a>2. 代码演示</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    draw() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"画一个圆形"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(circle)&#123;</span><br><span class="line">        <span class="keyword">this</span>.circle = circle;</span><br><span class="line">    &#125;</span><br><span class="line">    draw() &#123;</span><br><span class="line">        <span class="keyword">this</span>.circle.draw();</span><br><span class="line">        <span class="keyword">this</span>.setRedBorder(<span class="keyword">this</span>.circle);</span><br><span class="line">    &#125;</span><br><span class="line">    setBorder(circle) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"设置边框"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试代码</span></span><br><span class="line"><span class="keyword">let</span> circle = <span class="keyword">new</span> Circle();</span><br><span class="line"><span class="keyword">let</span> dec = <span class="keyword">new</span> Decorator(circle);</span><br><span class="line">dec.setRedBorder();</span><br></pre></td></tr></table></figure><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h1><p>装饰器小情景：手机又照相的功能，我们可以在手机摄像头前装饰一个放大镜，手机在具有照相的基础还有放大的功能。</p><p><strong>本质：</strong>在执行真正的操作前后，可以进行其他的操作</p><h1 id="4-参考材料"><a href="#4-参考材料" class="headerlink" title="4. 参考材料"></a>4. 参考材料</h1><p><a href="https://github.com/MuYunyun/blog/blob/master/BasicSkill/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F.md" target="_blank" rel="noopener">装饰者模式</a></p><p><a href="https://www.jianshu.com/p/398f0e8f2699" target="_blank" rel="noopener">JS设计模式-装饰器模式</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式（四）---发布订阅模式</title>
      <link href="/2020/02/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%9B%EF%BC%89-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/02/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%9B%EF%BC%89-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><fancybox><img src="https://image.gslb.dawnlab.me/03749b735b8f8f8ea84314ccbf236dbb.png" alt=""></fancybox></p><p>我看了很多关于发布订阅模式与观察者模式的文章，有点朋友认为观察者模式就是发布订阅模式，根据我看了这么多的文章的总结，他们确实是不一样的。</p><p>在vue中，emit和on方法。他们都似乎不约而同的自带了发布订阅属性一般，让开发变得更加高效好用起来。</p><p>今天就写一个发布订阅。</p><a id="more"></a><h1 id="1-情景模拟："><a href="#1-情景模拟：" class="headerlink" title="1. 情景模拟："></a>1. 情景模拟：</h1><p>当我们在注册虎扑的时候，软件会让我们选择我们感兴趣的板块，例如：唱、跳、rap、篮球…..</p><p>当我们选择自己喜欢的版块时，我们就订阅了相关板块的消息。</p><p>当此板块内有热门消息时，虎扑就会给我们推送此消息，他不会把其他板块的消息推送给我们。</p><h1 id="2-分析："><a href="#2-分析：" class="headerlink" title="2. 分析："></a>2. 分析：</h1><p>我们可以抽象出三个对象，一个发布者，一个调度中心，一个订阅者</p><p>发布者：我就是在不同板块发送热门消息的</p><p>调度中心：存下所有板块，与板块对应的订阅者</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个函数：接收消息并给相关板块所有的订阅者发送消息</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个函数：移除订阅者</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个函数：添加订阅者</p><p>订阅者：自己的属性</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个函数：订阅消息</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个函数：取消订阅消息</p><p>画出 UML 类图就是文章前的图片。</p><h1 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h1><p><fancybox><img src="https://image.gslb.dawnlab.me/584ee200caf26a8c25c9ec5232c3996b.png" alt=""></fancybox></p><p>真实代码放在文章末尾。</p><p><strong>结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/122ac8c8cbcff112954ff8a7cd4063a1.png" alt=""></fancybox></p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h1><p><strong>什么是发布订阅模式：</strong></p><blockquote><p>发布-订阅是一种消息范式，消息的发送者（称为发布者）不会将消息直接发送给特定的接收者（称为订阅者）。而是将发布的消息分为不同的类别，无需了解哪些订阅者（如果有的话）可能存在。同样的，订阅者可以表达对一个或多个类别的兴趣，只接收感兴趣的消息，无需了解哪些发布者（如果有的话）存在。</p><footer><strong>维基百科</strong><cite><a href="https://zh.wikipedia.org/wiki/%E5%8F%91%E5%B8%83/%E8%AE%A2%E9%98%85" target="_blank" rel="noopener">zh.wikipedia.org/wiki/%E5%8F%91%E5%B8%83/%E8%AE%A2%E9%98%85</a></cite></footer></blockquote><p><strong>说说我的理解：</strong></p><p>发布订阅模式可以理解成三个对象，一个是发布者，一个是订阅者，一个是调度中心。</p><p>为什么需要一个调度中心？因为订阅者的订阅是有一定要求的，而不是接收所有发布的消息，</p><p>所以调度中心就是将消息分别发送给订阅者。订阅者不会接收到没有订阅的消息。</p><p><strong>观察者模式：</strong></p><p>观察者只有两个对象，一个观察者、一个被观察者，被观察者只要作出变化（不论什么变化），所有的观察者都会接受到消息。</p><h1 id="5-参考材料"><a href="#5-参考材料" class="headerlink" title="5. 参考材料"></a>5. 参考材料</h1><p><a href="https://juejin.im/post/5b125ad3e51d450688133f22#heading-1" target="_blank" rel="noopener">发布订阅模式，在工作中它的能量超乎你的想象</a></p><p><a href="https://juejin.im/post/5bb1bb616fb9a05d2b6dccfa" target="_blank" rel="noopener">谈谈观察者模式和发布订阅模式</a></p><p><a href="https://blog.csdn.net/a469516684/article/details/86082844" target="_blank" rel="noopener">EventBus—思考观察者模式与发布订阅者模式</a></p><p><a href="https://juejin.im/post/5b2e65fee51d4558df370532" target="_blank" rel="noopener">JavaScript中发布/订阅模式的理解</a></p><h1 id="6-代码："><a href="#6-代码：" class="headerlink" title="6. 代码："></a>6. 代码：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发布者   传入调度中心实例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Publisher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>( dispatch )&#123;</span><br><span class="line">        <span class="keyword">this</span>.dispatch = dispatch</span><br><span class="line">    &#125;</span><br><span class="line">    publish()&#123;</span><br><span class="line">        <span class="keyword">let</span> arg = <span class="built_in">Array</span>.from( <span class="built_in">arguments</span> )</span><br><span class="line">        <span class="keyword">let</span> event = arg.shift()</span><br><span class="line">        <span class="keyword">this</span>.dispatch.emit( event, arg )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调度中心</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dispatcher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.eventObj = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    on( event, fn )&#123;</span><br><span class="line">        <span class="keyword">if</span>( !<span class="keyword">this</span>.eventObj[event] )&#123;</span><br><span class="line">            <span class="keyword">this</span>.eventObj[event] = []</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.eventObj[event].push( fn )</span><br><span class="line">    &#125;</span><br><span class="line">    emit( type, arg )&#123;</span><br><span class="line">        <span class="keyword">let</span> funs = <span class="keyword">this</span>.eventObj[type]</span><br><span class="line">        <span class="keyword">if</span>( !funs || funs.length === <span class="number">0</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        funs.forEach( <span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            item.apply( <span class="keyword">this</span>, arg )</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    remove( type, fn )&#123;</span><br><span class="line">        <span class="keyword">let</span> fns = <span class="keyword">this</span>.eventObj[ type ]</span><br><span class="line">        <span class="keyword">if</span>( !fns ) <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span>( !fn )&#123;</span><br><span class="line">            <span class="keyword">delete</span> <span class="keyword">this</span>.eventObj[type]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.eventObj[ type ] = fns.filter( <span class="function"><span class="params">item</span> =&gt;</span> item !== fn )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 订阅者类   传入 dispatch 和 自己的属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subscriber</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>( dispatch, name )&#123;</span><br><span class="line">        <span class="keyword">this</span>.dispatch = dispatch</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    fn = <span class="function">(<span class="params"> msg </span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">`我是<span class="subst">$&#123; <span class="keyword">this</span>.name &#125;</span>:`</span> ,<span class="string">"收到订阅的消息："</span>, msg )</span><br><span class="line">    &#125;</span><br><span class="line">    subscrib( type, fn )&#123;</span><br><span class="line">        <span class="keyword">this</span>.dispatch.on( type, fn, <span class="keyword">this</span> )</span><br><span class="line">    &#125;</span><br><span class="line">    removeSubscrib( type, fn )&#123;</span><br><span class="line">        <span class="keyword">this</span>.dispatch.remove( type, fn )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">let</span> dispatch = <span class="keyword">new</span> Dispatcher()</span><br><span class="line"><span class="keyword">let</span> pub = <span class="keyword">new</span> Publisher( dispatch )</span><br><span class="line"><span class="keyword">let</span> sub1 = <span class="keyword">new</span> Subscriber( dispatch, <span class="string">"sub1"</span> )</span><br><span class="line"><span class="keyword">let</span> sub2 = <span class="keyword">new</span> Subscriber( dispatch, <span class="string">"sub2"</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅消息</span></span><br><span class="line">sub1.subscrib( <span class="string">"篮球"</span>, sub1.fn )</span><br><span class="line">sub2.subscrib( <span class="string">"篮球"</span>, sub2.fn )</span><br><span class="line">sub2.subscrib( <span class="string">"足球"</span>, sub2.fn )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布消息</span></span><br><span class="line">pub.publish( <span class="string">"篮球"</span>, <span class="string">"乔丹去世了---"</span> )</span><br><span class="line">pub.publish( <span class="string">"足球"</span>, <span class="string">"国足能进世界杯吗？？"</span> )</span><br><span class="line"><span class="comment">// 取消订阅</span></span><br><span class="line">sub1.removeSubscrib( <span class="string">"篮球"</span>, sub1.fn )</span><br><span class="line">pub.publish( <span class="string">"篮球"</span>, <span class="string">"这里有一些NBA相关的信息"</span> )</span><br></pre></td></tr></table></figure><h2 id="通用代码："><a href="#通用代码：" class="headerlink" title="通用代码："></a>通用代码：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> event = &#123;</span><br><span class="line">    list: &#123;&#125;,</span><br><span class="line">    on(key, fn) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.list[key]) &#123;</span><br><span class="line">            <span class="keyword">this</span>.list[key] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.list[key].push(fn);</span><br><span class="line">    &#125;,</span><br><span class="line">    emit() &#123;</span><br><span class="line">        <span class="keyword">let</span> key = [].shift.call(<span class="built_in">arguments</span>),</span><br><span class="line">            fns = <span class="keyword">this</span>.list[key];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!fns || fns.length === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fns.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> &#123;</span><br><span class="line">            fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    remove(key, fn) &#123;</span><br><span class="line">        <span class="comment">// 这回我们加入了取消订阅的方法</span></span><br><span class="line">        <span class="keyword">let</span> fns = <span class="keyword">this</span>.list[key];</span><br><span class="line">        <span class="comment">// 如果缓存列表中没有函数，返回false</span></span><br><span class="line">        <span class="keyword">if</span> (!fns) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 如果没有传对应函数的话</span></span><br><span class="line">        <span class="comment">// 就会将key值对应缓存列表中的函数都清空掉</span></span><br><span class="line">        <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">            fns &amp;&amp; (fns.length = <span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 遍历缓存列表，看看传入的fn与哪个函数相同</span></span><br><span class="line">            <span class="comment">// 如果相同就直接从缓存列表中删掉即可</span></span><br><span class="line">            fns.forEach(<span class="function">(<span class="params">cb, i</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (cb === fn) &#123;</span><br><span class="line">                    fns.splice(i, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cat</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'一起喵喵喵'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'一起旺旺旺'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">event.on(<span class="string">'pet'</span>, data =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'接收数据'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br><span class="line">event.on(<span class="string">'pet'</span>, cat);</span><br><span class="line">event.on(<span class="string">'pet'</span>, dog);</span><br><span class="line"><span class="comment">// 取消dog方法的订阅</span></span><br><span class="line">event.remove(<span class="string">'pet'</span>, dog);</span><br><span class="line"><span class="comment">// 发布</span></span><br><span class="line">event.emit(<span class="string">'pet'</span>, [<span class="string">'二哈'</span>, <span class="string">'波斯猫'</span>]);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    接收数据</span></span><br><span class="line"><span class="comment">    [ '二哈', '波斯猫' ]</span></span><br><span class="line"><span class="comment">    一起喵喵喵</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>摘自：</strong></p><p><strong><a href="https://juejin.im/post/5b125ad3e51d450688133f22#heading-4" target="_blank" rel="noopener">发布订阅模式，在工作中它的能量超乎你的想象</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式（三）--代理模式</title>
      <link href="/2020/02/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%89%EF%BC%89-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/02/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%89%EF%BC%89-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><fancybox><img src="https://image.gslb.dawnlab.me/8151655788e5ad17587fdc36a060bfb2.png" alt=""></fancybox></p><p>写一个代理模式.</p><a id="more"></a><h1 id="1-情景"><a href="#1-情景" class="headerlink" title="1. 情景"></a>1. 情景</h1><p>情景: 小明追女生 A</p><ul><li>非代理模式: 小明 =花=&gt; 女生A</li><li>代理模式: 小明 =花=&gt; 让女生A的好友B帮忙 =花=&gt; 女生A</li></ul><h1 id="2-代理模式的特点"><a href="#2-代理模式的特点" class="headerlink" title="2. 代理模式的特点"></a>2. 代理模式的特点</h1><ul><li>代理对象和本体对象具有一致的接口, 对使用者友好</li></ul><blockquote><p>常用的虚拟代理形式：某一个花销很大的操作，可以通过虚拟代理的方式延迟到这种需要它的时候才去创建（例：使用虚拟代理实现图片懒加载）<br>图片懒加载的方式：先通过一张loading图占位，然后通过异步的方式加载图片，等图片加载好了再把完成的图片加载到img标签里面。</p><footer><strong>考拉海购前端团队</strong><cite><a href="https://juejin.im/post/59df4f74f265da430f311909" target="_blank" rel="noopener">juejin.im/post/59df4f74f265da430f311909</a></cite></footer></blockquote><h1 id="3-代码设计"><a href="#3-代码设计" class="headerlink" title="3. 代码设计"></a>3. 代码设计</h1><p><fancybox><img src="https://image.gslb.dawnlab.me/1477504b420fce64b3cd68ebed8e9c00.png" alt=""></fancybox></p><h1 id="4-es6-代理模式-—-Proxy"><a href="#4-es6-代理模式-—-Proxy" class="headerlink" title="4. es6 代理模式 —- Proxy"></a>4. es6 代理模式 —- Proxy</h1><p><strong>目的：在操作前可以进行其他的操作（对数据加工等）。</strong></p><p><strong>代码设计</strong><br><fancybox><img src="https://image.gslb.dawnlab.me/017a9c46002a617e370af1ffc6a158ec.png" alt=""></fancybox></p><p><strong>运行结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/60e895dd1bc44e25965c0350cd5a0efe.png" alt=""></fancybox></p><p>案例参考：</p><ul><li><a href="https://juejin.im/post/5a5227ce6fb9a01c927e85c4" target="_blank" rel="noopener">ES6中的代理模式—–Proxy</a></li><li><a href="http://es6.ruanyifeng.com/#docs/proxy" target="_blank" rel="noopener">阮一峰– es6 入门</a></li></ul><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h1><p>代理模式，总的来说，是在操作前，可以进行其他的操作。</p><h1 id="5-参考材料"><a href="#5-参考材料" class="headerlink" title="5. 参考材料"></a>5. 参考材料</h1><p><a href="https://github.com/MuYunyun/blog/blob/master/BasicSkill/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.md" target="_blank" rel="noopener">BasicSkill–代理模式</a></p><p><a href="https://juejin.im/post/59df4f74f265da430f311909#heading-2" target="_blank" rel="noopener">JavaScript设计模式</a></p><p><a href="https://www.cnblogs.com/mn6364/p/10990874.html" target="_blank" rel="noopener">js –代理模式</a></p><h1 id="6-代码"><a href="#6-代码" class="headerlink" title="6. 代码"></a>6. 代码</h1><figure class="highlight js"><figcaption><span>图片懒加载</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 真实的对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealImg</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.imgNode = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>)</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild( <span class="keyword">this</span>.imgNode )</span><br><span class="line">    &#125;</span><br><span class="line">    setSrc( src )&#123;</span><br><span class="line">        <span class="keyword">this</span>.imgNode.src = src</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 代理对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyImg</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.realImg = <span class="keyword">new</span> RealImg()</span><br><span class="line">    &#125;</span><br><span class="line">    setSrc( src )&#123;</span><br><span class="line">        <span class="keyword">this</span>.realImg.setSrc(<span class="string">"http://seopic.699pic.com/photo/40007/8839.jpg_wh1200.jpg"</span>)</span><br><span class="line">        <span class="keyword">let</span> img = <span class="keyword">new</span> Image()</span><br><span class="line">        img.src = src</span><br><span class="line">        img.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.realImg.setSrc( src )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> proxyImg = <span class="keyword">new</span> ProxyImg()</span><br><span class="line">proxyImg.setSrc( <span class="string">"http://seopic.699pic.com/photo/40006/7735.jpg_wh1200.jpg"</span> )</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式（二）--观察者模式</title>
      <link href="/2020/02/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/02/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><fancybox><img src="https://image.gslb.dawnlab.me/97ffbb5c36692b1f63a62b517db84ff8.png" alt=""></fancybox></p><p>写一个观察者模式。</p><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><strong>意图：</strong> 定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</p><p><strong>主要解决：</strong> 一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作。</p><p><strong>何时使用：</strong> 一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知，进行广播通知。</p><p><strong>关键代码：</strong> 在抽象类里有一个 ArrayList&lt;\Observer&gt; 存放观察者们。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight js"><figcaption><span>观察者模式</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 观察者模式</span></span><br><span class="line"><span class="comment"> * state 状态</span></span><br><span class="line"><span class="comment"> * observers &#123; Observer &#125;  保存所有的观察者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = <span class="number">0</span></span><br><span class="line">        <span class="keyword">this</span>.observers = []</span><br><span class="line">    &#125;</span><br><span class="line">    getState()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.state</span><br><span class="line">    &#125;</span><br><span class="line">    setState( state )&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state</span><br><span class="line">        <span class="keyword">this</span>.notifyAllObservers()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通知所有的观察者</span></span><br><span class="line">    notifyAllObservers()&#123;</span><br><span class="line">        <span class="keyword">this</span>.observers.forEach( <span class="function"><span class="params">observer</span> =&gt;</span> &#123;</span><br><span class="line">            observer.update()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加观察者</span></span><br><span class="line">    attach( observer )&#123;</span><br><span class="line">        <span class="keyword">this</span>.observers.push( observer )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 观察者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>( name, subject )&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">        <span class="keyword">this</span>.subject = subject</span><br><span class="line">        <span class="keyword">this</span>.subject.attach( <span class="keyword">this</span> )</span><br><span class="line">    &#125;</span><br><span class="line">    update()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">`<span class="subst">$&#123; <span class="keyword">this</span>.name &#125;</span> -- update, state: <span class="subst">$&#123; <span class="keyword">this</span>.subject.getState() &#125;</span>`</span> )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> Subject()</span><br><span class="line"><span class="keyword">let</span> o1 = <span class="keyword">new</span> Observer( <span class="string">"o1"</span>, s )</span><br><span class="line"><span class="keyword">let</span> o2 = <span class="keyword">new</span> Observer( <span class="string">"o2"</span>, s )</span><br><span class="line"></span><br><span class="line">s.setState( <span class="number">11</span> )</span><br><span class="line">s.setState( <span class="number">12</span> )</span><br><span class="line"><span class="built_in">console</span>.log( s )</span><br></pre></td></tr></table></figure><p><strong>测试结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/a7763467be0e62af3e014f19169dbf1c.png" alt=""></fancybox></p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>观察者模式的要点主要是将观察者放在被观察者里面，当状态变化后，就依次通知观察者。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://juejin.im/post/5cb534386fb9a0685727e1eb#heading-72" target="_blank" rel="noopener">超全的设计模式简介（45种）—观察者模式</a></p><p><a href="https://juejin.im/post/5afe6430518825428630bc4d" target="_blank" rel="noopener">JavaScript 中常见设计模式整理</a></p><p><a href="https://juejin.im/post/5bb1bb616fb9a05d2b6dccfa" target="_blank" rel="noopener">谈谈观察者模式和发布订阅模式</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式（一）--单例模式</title>
      <link href="/2020/02/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/02/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><fancybox><img src="https://image.gslb.dawnlab.me/b9bb7ddf819be28cee3cbe3dfb440e9a.png" alt=""></fancybox></p><p>写一个单例模式。</p><a id="more"></a><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>确保一个类只有一个实例，使每次获取的实例都是同一个。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>( name )&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    getName()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">    &#125;</span><br><span class="line">    setName( data )&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = data</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取单例的方法   ---   使用闭包获取单例</span></span><br><span class="line">Store.getInstance = (</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> instance</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"> name </span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>( !instance )&#123;</span><br><span class="line">                instance = <span class="keyword">new</span> Store( name )</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> instance</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> store1 = Store.getInstance( <span class="string">"你好"</span> )</span><br><span class="line"><span class="keyword">let</span> store2 = Store.getInstance( <span class="string">"你好----"</span> )</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( store1 )</span><br><span class="line"><span class="built_in">console</span>.log( store2 )</span><br><span class="line"><span class="built_in">console</span>.log( store1 === store2 )</span><br></pre></td></tr></table></figure><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p><fancybox><img src="https://image.gslb.dawnlab.me/a3f69ad1bf9019e1d04d1d15b54eea25.png" alt=""></fancybox></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>单例模式运用非常广泛，只要在代码中涉及到只存在一个实例，就可以使用单例模式，</p><p>vuex 和 redux 就是使用单例模式构建。</p><p><strong>写一个单例模式的要点：</strong></p><ol><li>使用一个特定函数来获取单例，</li><li>此函数使用闭包来确保但会单例是唯一的，</li><li>使用函数柯理化–接收传入参数</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://juejin.im/post/59df4f74f265da430f311909" target="_blank" rel="noopener">JavaScript设计模式</a></p><p><a href="https://juejin.im/post/5e021eb96fb9a01628014095#heading-0" target="_blank" rel="noopener">JavaScript设计模式es6（23种)</a></p><p><a href="https://juejin.im/post/5afe6430518825428630bc4d" target="_blank" rel="noopener">JavaScript 中常见设计模式整理</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>javascript之防抖与节流</title>
      <link href="/2020/02/07/javascript%E4%B9%8B%E8%8A%82%E6%B5%81%E4%B8%8E%E9%98%B2%E6%8A%96/"/>
      <url>/2020/02/07/javascript%E4%B9%8B%E8%8A%82%E6%B5%81%E4%B8%8E%E9%98%B2%E6%8A%96/</url>
      
        <content type="html"><![CDATA[<p>写一个防抖与节流。</p><a id="more"></a><h1 id="1-防抖"><a href="#1-防抖" class="headerlink" title="1. 防抖"></a>1. 防抖</h1><p><strong>什么是防抖：</strong></p><p>当一个事件触发后，在 n 秒后才执行相关函数，如果在 n 秒内再次触发事件，则在新事件 n 秒后才执行相关函数。</p><p><strong>函数功能设计与实现原理：</strong></p><p>用户可以根据需求自传定义执行函数、间隔时间、是否立即执行来传入对应的参数。</p><p>使用闭包函数，设置一个定时器作为标志放在闭包内，使用函数柯理化接收传入参数。</p><p><strong>代码：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 防抖函数</span></span><br><span class="line"><span class="comment"> * @param fn 回调函数 </span></span><br><span class="line"><span class="comment"> * @param time  间隔时间 type number</span></span><br><span class="line"><span class="comment"> * @param immediate  立刻执行 type boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params"> fn, time, immediate = false </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timeount</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( timeount )&#123; clearTimeout( timeount ) &#125;</span><br><span class="line">        <span class="keyword">if</span>( immediate &amp;&amp; !timeount )&#123; fn.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> ) &#125;</span><br><span class="line"></span><br><span class="line">        timeount = setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 此处运用函数柯理化 arguments 为调用函数时的参数</span></span><br><span class="line">            fn.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> )</span><br><span class="line">            <span class="comment">// 此处放开注释-会让每一次执行完后，第一次都会立即执行一次</span></span><br><span class="line">            <span class="comment">// timeount = null</span></span><br><span class="line">        &#125;, time || <span class="number">500</span> )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><figure class="highlight js"><figcaption><span>自建html文件测试</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">go</span>(<span class="params"> e </span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( e )</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.addEventListener( <span class="string">"mousemove"</span>, debounce( go, <span class="number">500</span>, <span class="literal">false</span> ) )</span><br><span class="line"><span class="comment">// 自传参数</span></span><br><span class="line">debounce( go, <span class="number">500</span>, <span class="literal">false</span> )( <span class="string">"我是自己传进去的参数--"</span> )</span><br></pre></td></tr></table></figure><h1 id="2-节流"><a href="#2-节流" class="headerlink" title="2. 节流"></a>2. 节流</h1><p><strong>什么是节流：</strong></p><p>节流，就是指连续触发事件但是在 n 秒中只执行一次函数。 节流会稀释函数的执行频率。</p><p><strong>代码：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 节流函数</span></span><br><span class="line"><span class="comment"> * @param fn 回调函数 </span></span><br><span class="line"><span class="comment"> * @param time  间隔时间 type number</span></span><br><span class="line"><span class="comment"> * @param immediate  立刻执行 type boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params"> fn, time, immediate = false </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timeount</span><br><span class="line">    <span class="keyword">let</span> isFrist = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( immediate &amp;&amp; isFrist )&#123;</span><br><span class="line">            fn.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> )</span><br><span class="line">            isFrist = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( !timeount )&#123;</span><br><span class="line">            timeount = setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                fn.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> )</span><br><span class="line">                timeount = <span class="literal">null</span></span><br><span class="line">            &#125;, time || <span class="number">500</span> )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><figure class="highlight js"><figcaption><span>自建html文件测试</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">go</span>(<span class="params"> e </span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( e )</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.addEventListener( <span class="string">"mousemove"</span>, throttle( go, <span class="number">500</span>, <span class="literal">true</span> ) )</span><br><span class="line"><span class="comment">// 自传参数</span></span><br><span class="line">throttle( go, <span class="number">500</span>, <span class="literal">false</span> )( <span class="string">"我是自己传进去的参数--"</span> )</span><br></pre></td></tr></table></figure><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>防抖和节流在代码中被使用的频率还是蛮大的，</p><p>函数的编写有借鉴，也有自己的思考，感觉自己思考过后，才会对函数有更深的理解。</p><p>防抖可以运用在：</p><ol><li>window 的 resize、scroll</li><li>mousedown、mousemove</li><li>keyup、keydown</li><li>搜索自动弹出 搜索联想</li></ol><p><strong>防抖函数要点：</strong> </p><ol><li>每一次触发事件，都要清除定时器，并重置 timeout 定时器。</li></ol><p><strong>节流函数要点：</strong></p><ol><li>每次执行完函数后，都要把标志置为null</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.wclimb.site/2018/06/12/JavaScript%E4%B9%8B%E8%8A%82%E6%B5%81%E4%B8%8E%E9%98%B2%E6%8A%96/" target="_blank" rel="noopener">wclimb–JavaScript之节流与防抖</a></p><p><a href="https://juejin.im/post/5b651dc15188251aa30c8669#heading-1" target="_blank" rel="noopener">函数防抖和节流</a></p><p><a href="https://github.com/mqyqingfeng/Blog/issues/26" target="_blank" rel="noopener">JavaScript专题之跟着 underscore 学节流</a></p><p><a href="https://github.com/mqyqingfeng/Blog/issues/22" target="_blank" rel="noopener">JavaScript专题之跟着underscore学防抖</a></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript之继承</title>
      <link href="/2020/02/06/javascript%E4%B9%8B%E7%BB%A7%E6%89%BF/"/>
      <url>/2020/02/06/javascript%E4%B9%8B%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<p>在 es6 之前，javaScript 不能使用 extends 来显式继承的，所以，继承需要程序员手动完成。</p><p>那么，让我们来看一看 js 中的各种继承方式吧。</p><a id="more"></a><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><p><strong>原型链</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/627d52b1dd9158ac087c6926fa640060.png" alt=""></fancybox></p><p>我们需要了解原型和原型链，需要知道构造函数与原型对象之间的关系，<strong>需要知道原型对象是一个对象，它有个属性 constructor 就是构造函数</strong></p><p><strong>Object.creact() 方法</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/b4f1756d75bcc34f54a294483a66dc4b.png" alt=""></fancybox></p><p>传入原型对象，返回原型对象和属性。</p><h1 id="1-原型链继承"><a href="#1-原型链继承" class="headerlink" title="1. 原型链继承"></a>1. 原型链继承</h1><p><strong>原理说明：</strong></p><p>就是将已经 new 出来的对象实例的 prototype 变成父对象，从而，把父对象的属性和方法都继承到了当前对象的 prototype 上，当前对象的实例本身没有父对象的属性与方法，当调用这些方法时，他会自动到此对象的 prototype 上依次去找，直到找到 null 为止，这就称为原型链继承。</p><p><strong>实现</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"> name=<span class="string">"tan"</span>, age=<span class="number">18</span> </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">    <span class="keyword">this</span>.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123; <span class="keyword">this</span>.name &#125;</span> can run...`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"> id = <span class="number">12</span> </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id</span><br><span class="line">    <span class="keyword">this</span>.study = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">`<span class="subst">$&#123;name&#125;</span> can study...`</span> )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 修改原型对象，并改回构造函数</span></span><br><span class="line">Student.prototype = <span class="keyword">new</span> Person()</span><br><span class="line">Student.prototype.constuctor = Student</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> S = <span class="keyword">new</span> Student( <span class="number">12</span> )</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"实例S："</span>, S )</span><br><span class="line">S.run()</span><br><span class="line"><span class="built_in">console</span>.log( S <span class="keyword">instanceof</span> Student )</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/5b77c39e7e80254643a77e540c08d2bc.png" alt=""></fancybox></p><p><strong>1.1 总结：</strong></p><p>由上面的例子可见，当继承的对象需要传参时，极度不灵活，因为 prototype 是一个父类的实例。</p><p>故：此继承方法适合继承方法，而不适合继承属性。</p><h1 id="2-借用构造函数继承"><a href="#2-借用构造函数继承" class="headerlink" title="2. 借用构造函数继承"></a>2. 借用构造函数继承</h1><p><strong>原理说明：</strong></p><p>在构造函数中，改变父类构造函数的 this 并执行构造函数。</p><p><strong>实现：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"> name=<span class="string">"tan"</span>, age=<span class="number">18</span> </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">    <span class="keyword">this</span>.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123; <span class="keyword">this</span>.name &#125;</span> can run...`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"> id = <span class="number">12</span>, name, age </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id</span><br><span class="line">    <span class="keyword">this</span>.study = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">`<span class="subst">$&#123;name&#125;</span> can study...`</span> )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 改变父类构造函数并传参执行 也可以使用 apply 改变 this</span></span><br><span class="line">    Person.call( <span class="keyword">this</span>, name, age )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> S = <span class="keyword">new</span> Student( <span class="number">12</span>, <span class="string">"yu"</span>, <span class="number">12</span> )</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"实例S："</span>, S )</span><br><span class="line">S.run()</span><br><span class="line"><span class="built_in">console</span>.log( S <span class="keyword">instanceof</span> Student )</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/a7999c1a9cdfab68f8ae86cc86d88d62.png" alt=""></fancybox></p><p><strong>总结：</strong></p><p>可以传参给父类构造函数了，<strong>但是此方法不能继承父类原型链（ prototype ）上的方法和参数。</strong></p><h1 id="3-组合继承"><a href="#3-组合继承" class="headerlink" title="3. 组合继承"></a>3. 组合继承</h1><p><strong>原理说明：</strong></p><p>将上面两种方法结合起来，目的是继承到父类原型链上的方法。</p><p><strong>实现：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"> name=<span class="string">"tan"</span>, age=<span class="number">18</span> </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">    <span class="keyword">this</span>.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123; <span class="keyword">this</span>.name &#125;</span> can run...`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"> id = <span class="number">12</span>, name, age </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id</span><br><span class="line">    <span class="keyword">this</span>.study = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">`<span class="subst">$&#123;name&#125;</span> can study...`</span> )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 改变父类构造函数并传参执行</span></span><br><span class="line">    Person.call( <span class="keyword">this</span>, name, age )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承父类原型链</span></span><br><span class="line">Student.prototype = <span class="keyword">new</span> Person()</span><br><span class="line">Student.prototype.constuctor = Student</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> S = <span class="keyword">new</span> Student( <span class="number">12</span>, <span class="string">"yu"</span>, <span class="number">17</span> )</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"实例S："</span>, S )</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"getName:"</span>, S.getName() )</span><br><span class="line"><span class="built_in">console</span>.log( S <span class="keyword">instanceof</span> Student )</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/f18ca84e1634386e03844b02aad5fa56.png" alt=""></fancybox></p><p><strong>总结：</strong></p><p>很好的继承了父类，并继承了原型链，但是多了一些属性在原型链上。下面我们将解决这个问题。</p><h1 id="4-组合继承变种——借用原型链继承"><a href="#4-组合继承变种——借用原型链继承" class="headerlink" title="4. 组合继承变种——借用原型链继承"></a>4. 组合继承变种——借用原型链继承</h1><p><strong>原理说明：</strong></p><p>将子类的原型链指向父类的原型链，达到继承父类原型链的目的：</p><p><strong>实现：</strong></p><figure class="highlight js"><figcaption><span>修改组合继承的代码：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承父类原型链</span></span><br><span class="line">Student.prototype = <span class="keyword">new</span> Person()</span><br><span class="line">Student.prototype.constuctor = Student</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改为：</span></span><br><span class="line">Student.prototype = <span class="built_in">Object</span>.create( Person.prototype )</span><br><span class="line">Student.prototype.constuctor = Student</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/ce5b33cd24674bed978d5f7be537ae9f.png" alt=""></fancybox></p><p><strong>总结：</strong></p><p>完美的继承了父类，干净利索。</p><h1 id="5-ES6-类继承-extends"><a href="#5-ES6-类继承-extends" class="headerlink" title="5. ES6 类继承 extends"></a>5. ES6 类继承 extends</h1><p><strong>实现说明：</strong><br>extends 关键字主要用于类声明或者类表达式中，以创建一个类，该类是另一个类的子类。其中 constructor 表示构造函数，一个类中只能有一个构造函数，有多个会报出 SyntaxError 错误,如果没有显式指定构造方法，则会添加默认的 constructor 方法，使用 super 方法传参到父类构造函数。</p><p><strong>实现：</strong></p><figure class="highlight js"><figcaption><span>es6 extends 继承</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>( name="tan", age=18 )&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">        <span class="keyword">this</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">    run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123; <span class="keyword">this</span>.name &#125;</span> can run...`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    getName = <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>( id, name, age )&#123;</span><br><span class="line">        <span class="keyword">super</span>( name, age )</span><br><span class="line">        <span class="keyword">this</span>.id = id</span><br><span class="line">    &#125;</span><br><span class="line">    study = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">`<span class="subst">$&#123;name&#125;</span> can study...`</span> )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> S = <span class="keyword">new</span> Student( <span class="number">12</span>, <span class="string">"yu"</span>, <span class="number">17</span> )</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"实例S："</span>, S )</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"getName:"</span>, S.getName() )</span><br><span class="line"><span class="built_in">console</span>.log( S <span class="keyword">instanceof</span> Student )</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/6bc2d58fc1bc6f70f0b8b91a872349a8.png" alt=""></fancybox></p><p><strong>总结：</strong></p><p>简单、完美</p><h1 id="疑问："><a href="#疑问：" class="headerlink" title="疑问："></a>疑问：</h1><p>在第四种继承方式中，为什么不能直接改成 <code>Student.prototype = Person.prototype</code>，而要使用 <code>Object.create( Person.prototype )</code>,</p><p>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"> name=<span class="string">"tan"</span>, age=<span class="number">18</span> </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">    <span class="keyword">this</span>.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123; <span class="keyword">this</span>.name &#125;</span> can run...`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"> id = <span class="number">12</span>, name, age </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id</span><br><span class="line">    <span class="keyword">this</span>.study = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">`<span class="subst">$&#123;name&#125;</span> can study...`</span> )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 改变父类构造函数并传参执行</span></span><br><span class="line">    Person.call( <span class="keyword">this</span>, name, age )</span><br><span class="line">&#125;</span><br><span class="line">Student.prototype = Person.prototype</span><br><span class="line">Student.prototype.constuctor = Student</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> S = <span class="keyword">new</span> Student( <span class="number">12</span>, <span class="string">"yu"</span>, <span class="number">17</span> )</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"实例S："</span>, S )</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"getName:"</span>, S.getName() )</span><br><span class="line"><span class="built_in">console</span>.log( S <span class="keyword">instanceof</span> Student )</span><br></pre></td></tr></table></figure><p><strong>结果是：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/9a8a7524d0471e4b79bfedb1db5fd12e.png" alt=""></fancybox></p><p>如果你知道原因，请在下方评论区给我留言。感谢！</p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>尽管继承方式五花八门，但是继承的目的却是不变的：</p><ol><li>将父类属性和方法复制到当前类 ( 在构造函数内改变父类构造函数的this并执行 )</li><li>继承父类的原型链  （ 修改构造函数的 prototype 指向父类的 prototype  ）</li></ol><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://juejin.im/post/5ad6efeb5188255c272275e1" target="_blank" rel="noopener">看了都知道继承也就那么回事儿</a></p><p><a href="https://juejin.im/post/5bcb2e295188255c55472db0#heading-0" target="_blank" rel="noopener">JavaScript常用八种继承方案</a></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript 之 new 的实现</title>
      <link href="/2020/02/06/javascript%20%E4%B9%8B%20new%20%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2020/02/06/javascript%20%E4%B9%8B%20new%20%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>网上有很多讲原型、原型链、new 的执行与实现的文章，我也看了很多。</p><p>本文描述一下 new 的执行过程与手写实现一个 new 的实现。</p><a id="more"></a><h1 id="1-new-的执行过程"><a href="#1-new-的执行过程" class="headerlink" title="1. new 的执行过程"></a>1. new 的执行过程</h1><p><fancybox><img src="https://image.gslb.dawnlab.me/1854fef99c105a5ec081cb921de59aeb.png" alt=""></fancybox></p><p>我们以上图为例阐述 new 的执行过程。</p><ol><li>创建一个中间对象</li><li>将该中间对象的原型指向构造函数的原型</li><li>将构造函数的 this 指向该中间对象并执行</li><li>返回该中间对象，即返回实例对象</li></ol><h1 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2. 代码实现"></a>2. 代码实现</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myNew</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 取出传入参数</span></span><br><span class="line">    <span class="keyword">let</span> argArray = <span class="built_in">Array</span>.from( <span class="built_in">arguments</span> )</span><br><span class="line">    <span class="comment">// 取出构造函数与需要传入构造函数的参数</span></span><br><span class="line">    <span class="keyword">let</span> constructorFun = argArray.shift()</span><br><span class="line">    <span class="comment">// 创建中间函数</span></span><br><span class="line">    <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">    <span class="comment">// 将该中间对象的原型指向构造函数的原型</span></span><br><span class="line">    obj.__proto__ = constructorFun.prototype</span><br><span class="line">    <span class="comment">// 绑定 this 并传入参数执行</span></span><br><span class="line">    constructorFun.apply( obj, argArray )</span><br><span class="line">    <span class="comment">// 返回创建的对象</span></span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-运行测试"><a href="#3-运行测试" class="headerlink" title="3. 运行测试"></a>3. 运行测试</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"> name, age </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myNew</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> argArray = <span class="built_in">Array</span>.from( <span class="built_in">arguments</span> )</span><br><span class="line">    <span class="keyword">let</span> constructorFun = argArray.shift()</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">    obj.__proto__ = constructorFun.prototype</span><br><span class="line">    constructorFun.apply( obj, argArray )</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"myNew："</span>,myNew( Animal, <span class="string">"dog"</span>, <span class="string">"12"</span> ) )</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"new："</span>, <span class="keyword">new</span> Animal( <span class="string">"cat"</span>, <span class="string">"11"</span> ) )</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><fancybox><img src="https://s2.ax1x.com/2020/02/06/1ybPDx.png" alt=""></fancybox></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>写出 new 的执行过程与实现，基本算是考察对 prototype 原型链的理解。</p><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://github.com/amandakelake/blog/issues/37" target="_blank" rel="noopener">彻底捋清楚 new 的实现</a></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>思路清晰---写一个深拷贝</title>
      <link href="/2020/01/31/%E6%80%9D%E8%B7%AF%E6%B8%85%E6%99%B0-%E5%86%99%E4%B8%80%E4%B8%AA%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
      <url>/2020/01/31/%E6%80%9D%E8%B7%AF%E6%B8%85%E6%99%B0-%E5%86%99%E4%B8%80%E4%B8%AA%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<p>写一个深拷贝，考虑数组、对象和循环引用。</p><a id="more"></a><h1 id="1-准备两个对象"><a href="#1-准备两个对象" class="headerlink" title="1.准备两个对象"></a>1.准备两个对象</h1><ul><li>无循环引用的对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> target = &#123;</span><br><span class="line">    field1: <span class="string">"string"</span>,</span><br><span class="line">    field2: <span class="number">33</span>,</span><br><span class="line">    field3: <span class="literal">undefined</span>,</span><br><span class="line">    field4: <span class="literal">null</span>,</span><br><span class="line">    field5: &#123;</span><br><span class="line">        child: <span class="string">"child"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    field6: [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ],</span><br><span class="line">    field7: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="keyword">this</span>.field1 )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>有循环引用的对象<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> target = &#123;</span><br><span class="line">    field1: <span class="string">"string"</span>,</span><br><span class="line">    field2: <span class="number">33</span>,</span><br><span class="line">    field3: <span class="literal">undefined</span>,</span><br><span class="line">    field4: <span class="literal">null</span>,</span><br><span class="line">    field5: &#123;</span><br><span class="line">        child: <span class="string">"child"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    field6: [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ],</span><br><span class="line">    field7: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="keyword">this</span>.field1 )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">target.target = target</span><br></pre></td></tr></table></figure></li></ul><h1 id="2-使用-JSON-parse-JSON-stringify"><a href="#2-使用-JSON-parse-JSON-stringify" class="headerlink" title="2.使用 JSON.parse(JSON.stringify())"></a>2.使用 JSON.parse(JSON.stringify())</h1><h2 id="2-1复制一个无循环引用的对象，代码如下："><a href="#2-1复制一个无循环引用的对象，代码如下：" class="headerlink" title="2.1复制一个无循环引用的对象，代码如下："></a>2.1复制一个无循环引用的对象，代码如下：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> target = &#123;</span><br><span class="line">    field1: <span class="string">"string"</span>,</span><br><span class="line">    field2: <span class="number">33</span>,</span><br><span class="line">    field3: <span class="literal">undefined</span>,</span><br><span class="line">    field4: <span class="literal">null</span>,</span><br><span class="line">    field5: &#123;</span><br><span class="line">        child: <span class="string">"child"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    field6: [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ],</span><br><span class="line">    field7: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="keyword">this</span>.field1 )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> res = <span class="built_in">JSON</span>.parse( <span class="built_in">JSON</span>.stringify( target ) )</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"target: "</span>, target )</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"res: "</span>, res )</span><br></pre></td></tr></table></figure><p>得到的结果是：</p><p><fancybox><img src="https://s2.ax1x.com/2020/02/04/1DMAET.png" alt=""></fancybox></p><p><strong>总结</strong>：可见，JSON.stringify() 不能处理undefined和function。</p><h2 id="2-2复制一个循环应用的对象"><a href="#2-2复制一个循环应用的对象" class="headerlink" title="2.2复制一个循环应用的对象"></a>2.2复制一个循环应用的对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> target = &#123;</span><br><span class="line">    field1: <span class="string">"string"</span>,</span><br><span class="line">    field2: <span class="number">33</span>,</span><br><span class="line">    field3: <span class="literal">undefined</span>,</span><br><span class="line">    field4: <span class="literal">null</span>,</span><br><span class="line">    field5: &#123;</span><br><span class="line">        child: <span class="string">"child"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    field6: [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ],</span><br><span class="line">    field7: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="keyword">this</span>.field1 )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">target.target = target</span><br><span class="line"><span class="keyword">var</span> res = <span class="built_in">JSON</span>.parse( <span class="built_in">JSON</span>.stringify( target ) )</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"target: "</span>, target )</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"res: "</span>, res )</span><br></pre></td></tr></table></figure><p>结果：<br><fancybox><img src="https://s2.ax1x.com/2020/02/04/1DMOMR.png" alt=""></fancybox></p><p><strong>总结</strong>：可见，JSON.stringify() 不能处理处理循环引用的结构</p><h1 id="3-手写一个深拷贝"><a href="#3-手写一个深拷贝" class="headerlink" title="3.手写一个深拷贝"></a>3.手写一个深拷贝</h1><h2 id="3-1浅拷贝"><a href="#3-1浅拷贝" class="headerlink" title="3.1浅拷贝"></a>3.1浅拷贝</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params"> target </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cloneTarget = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">let</span> key <span class="keyword">in</span> target )&#123;</span><br><span class="line">        cloneTarget[key] = target[key]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cloneTarget</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是一个浅拷贝，没有考虑数组与对象。</p><h2 id="3-2-考虑对象"><a href="#3-2-考虑对象" class="headerlink" title="3.2 考虑对象"></a>3.2 考虑对象</h2><p>我们可以使用 typeof 来判断数据类型：</p><blockquote><p>typeof可以查看数据的类型有 7 种：<br>typeof 12345 === number<br>typeof “999” === string<br>typeof {} === object  null   []<br>typeof undefined === undefined<br>typeof true === boolean<br>typeof symbol(23) === symbol<br>typeof console.log === function</p><footer><strong>typeof小提示</strong></footer></blockquote><p>使用递归处理引用对象的拷贝：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params"> target </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">typeof</span> target === <span class="string">"object"</span> )&#123;</span><br><span class="line">        <span class="keyword">let</span> cloneTarget = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">let</span> key <span class="keyword">in</span> target )&#123;</span><br><span class="line">            cloneTarget[key] = clone( target[key] )</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cloneTarget</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> target</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><fancybox><img src="https://s2.ax1x.com/2020/02/04/1DO80K.png" alt=""></fancybox></p><p><strong>总结</strong></p><p>因为typeof会把数组识别成object，所以，代码还需要再度改进。</p><h2 id="3-3-考虑数组"><a href="#3-3-考虑数组" class="headerlink" title="3.3 考虑数组"></a>3.3 考虑数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params"> target </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">typeof</span> target === <span class="string">"object"</span> )&#123;</span><br><span class="line">        <span class="keyword">let</span> cloneTarget = <span class="built_in">Array</span>.isArray( target ) ? [] : &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">let</span> key <span class="keyword">in</span> target )&#123;</span><br><span class="line">            cloneTarget[key] = clone( target[key] )</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cloneTarget</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> target</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试结果：</strong></p><p><fancybox><img src="https://s2.ax1x.com/2020/02/04/1DzROA.png" alt=""></fancybox></p><p><strong>总结：</strong></p><p>可见，数组也可以复制了，下面我们要解决循环引用。</p><h2 id="3-4-考虑循环引用"><a href="#3-4-考虑循环引用" class="headerlink" title="3.4 考虑循环引用"></a>3.4 考虑循环引用</h2><p>当学习过设计模式后，我们会发现，有很多情况存在循环引用的问题，所以，在深拷贝时，循环引用的问题是必须要解决的。</p><p>解决循环引用问题，我们可以额外开辟一个存储空间，来存储当前对象和拷贝对象的对应关系，当需要拷贝当前对象时，先去存储空间中找，有没有拷贝过这个对象，如果有的话直接返回，如果没有的话继续拷贝，这样就巧妙化解的循环引用的问题。</p><p>—引用自：<a href="https://juejin.im/post/5d6aa4f96fb9a06b112ad5b1#heading-5" target="_blank" rel="noopener">如何写出一个惊艳面试官的深拷贝?</a></p><p>es6中，有这样一种数据结构叫 Map，他能将对象作为键，这样，我们就能很好的保存对象，并判断对象是否被拷贝过了。</p><p>整体流程如下：</p><ol><li>是对象，检查map中是否存在此对象</li><li>存在—-返回保存在map中的键</li><li>不存在—将值存入map，键的值使用当前cloneTarget（这里其实用什么都行）</li><li>继续递归拷贝，并传入此时的map</li></ol><p>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params"> target, map = new Map(</span>) )</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">typeof</span> target === <span class="string">"object"</span> )&#123;</span><br><span class="line">        <span class="keyword">var</span> cloneTarget = <span class="built_in">Array</span>.isArray( target ) ? [] : &#123;&#125;</span><br><span class="line">        <span class="keyword">if</span>( map.get( target ) )&#123;</span><br><span class="line">            <span class="keyword">return</span> map.get( target )</span><br><span class="line">        &#125;</span><br><span class="line">        map.set( target, cloneTarget )</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">let</span> key <span class="keyword">in</span> target )&#123;</span><br><span class="line">            cloneTarget[key] = clone( target[key], map )</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cloneTarget</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> target</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：<br><fancybox><img src="https://s2.ax1x.com/2020/02/05/1rJSNq.png" alt=""></fancybox></p><p>可以看见，已经解决了循环引用的问题。</p><h2 id="3-5-简单性能优化"><a href="#3-5-简单性能优化" class="headerlink" title="3.5 简单性能优化"></a>3.5 简单性能优化</h2><p>使用 WeakMap 数据结构，将复制对象属性的强引用变为弱引用。</p><p>WeakMap的作用，请参考 <a href="http://es6.ruanyifeng.com/#docs/set-map#WeakMap" target="_blank" rel="noopener">es6 WeakMap</a>.</p><p>修改后的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params"> target, map = new WeakMap(</span>) )</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">typeof</span> target === <span class="string">"object"</span> )&#123;</span><br><span class="line">        <span class="keyword">var</span> cloneTarget = <span class="built_in">Array</span>.isArray( target ) ? [] : &#123;&#125;</span><br><span class="line">        <span class="keyword">if</span>( map.get( target ) )&#123;</span><br><span class="line">            <span class="keyword">return</span> map.get( target )</span><br><span class="line">        &#125;</span><br><span class="line">        map.set( target, cloneTarget )</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">let</span> key <span class="keyword">in</span> target )&#123;</span><br><span class="line">            cloneTarget[key] = clone( target[key], map )</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cloneTarget</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> target</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，我们就完成了一个简单的深拷贝，解决了对象、数组、循环引用的问题。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>总结一下写出一个深拷贝的过程：</p><ol><li>需要传入两个参数，一个是拷贝目标，一个是作为拷贝过属性的容器 WeakMap </li><li>判断拷贝目标是否一个对象 或是 数组</li><li>是 使用 WeakMap 判断是否已经拷贝，并递归拷贝每个属性</li><li>不是 直接返回此属性的值</li></ol><p>js中还有很多其他的数据结构，比如 Set 和 Map，这里就不做继续的深入了，</p><p>如果你想继续深入深拷贝，你可以参考：<a href="https://juejin.im/post/5d6aa4f96fb9a06b112ad5b1#heading-5" target="_blank" rel="noopener">如何写出一个惊艳面试官的深拷贝?</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://juejin.im/post/5d6aa4f96fb9a06b112ad5b1#heading-5" target="_blank" rel="noopener">如何写出一个惊艳面试官的深拷贝?</a></p><p><a href="http://es6.ruanyifeng.com/#docs/set-map#WeakMap" target="_blank" rel="noopener">阮一峰 es6</a></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>思路清晰---socket.io的总结</title>
      <link href="/2020/01/30/%E6%80%9D%E8%B7%AF%E6%B8%85%E6%99%B0-socket-io%E7%9A%84%E6%80%BB%E7%BB%93/"/>
      <url>/2020/01/30/%E6%80%9D%E8%B7%AF%E6%B8%85%E6%99%B0-socket-io%E7%9A%84%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><fancybox><img src="https://s2.ax1x.com/2020/01/31/11oObQ.png" alt=""></fancybox></p><p>思路清晰的使用socket.io…..</p><a id="more"></a><h1 id="引入："><a href="#引入：" class="headerlink" title="引入："></a>引入：</h1><h2 id="先看官网api："><a href="#先看官网api：" class="headerlink" title="先看官网api："></a>先看官网api：</h2><p><img src="https://s2.ax1x.com/2020/01/31/13JEmd.png" alt=""></p><p>可以看见，主要有这三个对象：server，namespace和socket</p><p>如果你掌握了这三个对象，那么你就已经基本学会socket.io的使用了。</p><h2 id="在服务端，我们会写出这样的socket-io服务端代码："><a href="#在服务端，我们会写出这样的socket-io服务端代码：" class="headerlink" title="在服务端，我们会写出这样的socket.io服务端代码："></a>在服务端，我们会写出这样的socket.io服务端代码：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)     <span class="comment">// 引入koa</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()          <span class="comment">// 创建一个koa实例</span></span><br><span class="line"><span class="comment">// 引入http模块，并在Server函数中传入app的回调函数</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>).Server( app.callback() )</span><br><span class="line"><span class="comment">// 引入socket.io   传入http，并配置socket</span></span><br><span class="line"><span class="keyword">const</span> IO = <span class="built_in">require</span>(<span class="string">"socket.io"</span>)( http, &#123;</span><br><span class="line">  pingTimeout: <span class="number">1000</span> * <span class="number">10</span>,</span><br><span class="line">  pingInterval: <span class="number">1000</span> * <span class="number">2.5</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 默认命名空间（"/"）总线IO监听连接事件  当前IO为默认命名空间</span></span><br><span class="line">IO.on( <span class="string">"connection"</span>, ( socket ) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 当前socket连接收到event事件，触发callback函数</span></span><br><span class="line">    socket.on( <span class="string">"event"</span>, callBack )</span><br><span class="line">    <span class="comment">// 向当前socket连接客户端触发event事件，返回数据sendData</span></span><br><span class="line">    socket.emit( <span class="string">"event"</span>, sendData )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于如下代码：</span></span><br><span class="line"><span class="keyword">var</span> mainSpace = IO.of(<span class="string">"/"</span>)</span><br><span class="line">mainSpace.on( <span class="string">"connection"</span>, ( socket ) =&gt; &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看了上面的代码，不难发现socket.io暴露两个对象供我们使用，一个是当前命名空间总线IO，一个是当前连接的socket，他们的关系如图：</p><p><fancybox><img src="https://s2.ax1x.com/2020/01/31/13JX38.png" alt=""></fancybox></p><p>这里就不得不说一下命名空间了</p><h1 id="关于命名空间（namespace）："><a href="#关于命名空间（namespace）：" class="headerlink" title="关于命名空间（namespace）："></a>关于命名空间（namespace）：</h1><p>默认命名空间：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">amespace &#123;</span><br><span class="line">  name: <span class="string">'/'</span>,</span><br><span class="line">  server:</span><br><span class="line">   Server &#123;</span><br><span class="line">     nsps: &#123; <span class="string">'/'</span>: [Circular] &#125;,</span><br><span class="line">     parentNsps: <span class="built_in">Map</span> &#123;&#125;,</span><br><span class="line">     _path: <span class="string">'/socket.io'</span>,</span><br><span class="line">     _serveClient: <span class="literal">true</span>,</span><br><span class="line">     parser:</span><br><span class="line">      &#123; <span class="attr">protocol</span>: <span class="number">4</span>,</span><br><span class="line">        types: [<span class="built_in">Array</span>],</span><br><span class="line">        CONNECT: <span class="number">0</span>,</span><br><span class="line">        DISCONNECT: <span class="number">1</span>,</span><br><span class="line">        EVENT: <span class="number">2</span>,</span><br><span class="line">        ACK: <span class="number">3</span>,</span><br><span class="line">        ERROR: <span class="number">4</span>,</span><br><span class="line">        BINARY_EVENT: <span class="number">5</span>,</span><br><span class="line">        BINARY_ACK: <span class="number">6</span>,</span><br><span class="line">        Encoder: [<span class="built_in">Function</span>: Encoder],</span><br><span class="line">        Decoder: [<span class="built_in">Function</span>: Decoder] &#125;,</span><br><span class="line">     encoder: Encoder &#123;&#125;,</span><br><span class="line">     _adapter: [<span class="built_in">Function</span>: Adapter],</span><br><span class="line">     _origins: <span class="string">'*:*'</span>,</span><br><span class="line">     sockets: [Circular],</span><br><span class="line">     eio:</span><br><span class="line">      Server &#123;</span><br><span class="line">        clients: &#123;&#125;,</span><br><span class="line">        clientsCount: <span class="number">0</span>,</span><br><span class="line">        wsEngine: <span class="string">'ws'</span>,</span><br><span class="line">        pingTimeout: <span class="number">5000</span>,</span><br><span class="line">        pingInterval: <span class="number">25000</span>,</span><br><span class="line">        upgradeTimeout: <span class="number">10000</span>,</span><br><span class="line">        maxHttpBufferSize: <span class="number">100000000</span>,</span><br><span class="line">        transports: [<span class="built_in">Array</span>],</span><br><span class="line">        allowUpgrades: <span class="literal">true</span>,</span><br><span class="line">        allowRequest: [<span class="built_in">Function</span>: bound ],</span><br><span class="line">        cookie: <span class="string">'io'</span>,</span><br><span class="line">        cookiePath: <span class="string">'/'</span>,</span><br><span class="line">        cookieHttpOnly: <span class="literal">true</span>,</span><br><span class="line">        perMessageDeflate: [<span class="built_in">Object</span>],</span><br><span class="line">        httpCompression: [<span class="built_in">Object</span>],</span><br><span class="line">        initialPacket: [<span class="built_in">Array</span>],</span><br><span class="line">        ws: [<span class="built_in">Object</span>],</span><br><span class="line">        _events: [<span class="built_in">Object</span>],</span><br><span class="line">        _eventsCount: <span class="number">1</span> &#125;,</span><br><span class="line">     httpServer:</span><br><span class="line">      Server &#123;</span><br><span class="line">        domain: <span class="literal">null</span>,</span><br><span class="line">        _events: [<span class="built_in">Object</span>],</span><br><span class="line">        _eventsCount: <span class="number">5</span>,</span><br><span class="line">        _maxListeners: <span class="literal">undefined</span>,</span><br><span class="line">        _connections: <span class="number">0</span>,</span><br><span class="line">        _handle: <span class="literal">null</span>,</span><br><span class="line">        _usingSlaves: <span class="literal">false</span>,</span><br><span class="line">        _slaves: [],</span><br><span class="line">        _unref: <span class="literal">false</span>,</span><br><span class="line">        allowHalfOpen: <span class="literal">true</span>,</span><br><span class="line">        pauseOnConnect: <span class="literal">false</span>,</span><br><span class="line">        httpAllowHalfOpen: <span class="literal">false</span>,</span><br><span class="line">        timeout: <span class="number">120000</span>,</span><br><span class="line">        keepAliveTimeout: <span class="number">5000</span>,</span><br><span class="line">        _pendingResponseData: <span class="number">0</span>,</span><br><span class="line">        maxHeadersCount: <span class="literal">null</span>,</span><br><span class="line">        [<span class="built_in">Symbol</span>(asyncId)]: <span class="number">-1</span> &#125;,</span><br><span class="line">     engine:</span><br><span class="line">      Server &#123;</span><br><span class="line">        clients: &#123;&#125;,</span><br><span class="line">        clientsCount: <span class="number">0</span>,</span><br><span class="line">        wsEngine: <span class="string">'ws'</span>,</span><br><span class="line">        pingTimeout: <span class="number">5000</span>,</span><br><span class="line">        pingInterval: <span class="number">25000</span>,</span><br><span class="line">        upgradeTimeout: <span class="number">10000</span>,</span><br><span class="line">        maxHttpBufferSize: <span class="number">100000000</span>,</span><br><span class="line">        transports: [<span class="built_in">Array</span>],</span><br><span class="line">        allowUpgrades: <span class="literal">true</span>,</span><br><span class="line">        allowRequest: [<span class="built_in">Function</span>: bound ],</span><br><span class="line">        cookie: <span class="string">'io'</span>,</span><br><span class="line">        cookiePath: <span class="string">'/'</span>,</span><br><span class="line">        cookieHttpOnly: <span class="literal">true</span>,</span><br><span class="line">        perMessageDeflate: [<span class="built_in">Object</span>],</span><br><span class="line">        httpCompression: [<span class="built_in">Object</span>],</span><br><span class="line">        initialPacket: [<span class="built_in">Array</span>],</span><br><span class="line">        ws: [<span class="built_in">Object</span>],</span><br><span class="line">        _events: [<span class="built_in">Object</span>],</span><br><span class="line">        _eventsCount: <span class="number">1</span> &#125; &#125;,</span><br><span class="line">  sockets: &#123;&#125;,</span><br><span class="line">  connected: &#123;&#125;,</span><br><span class="line">  fns: [],</span><br><span class="line">  ids: <span class="number">0</span>,</span><br><span class="line">  rooms: [],</span><br><span class="line">  flags: &#123;&#125;,</span><br><span class="line">  adapter: Adapter &#123; <span class="attr">nsp</span>: [Circular], <span class="attr">rooms</span>: &#123;&#125;, <span class="attr">sids</span>: &#123;&#125;, <span class="attr">encoder</span>: Encoder &#123;&#125; &#125; &#125;</span><br></pre></td></tr></table></figure><h1 id="命名空间与socket"><a href="#命名空间与socket" class="headerlink" title="命名空间与socket"></a>命名空间与socket</h1><h2 id="当前命名空间总线IO的总结"><a href="#当前命名空间总线IO的总结" class="headerlink" title="当前命名空间总线IO的总结"></a>当前命名空间总线IO的总结</h2><p>通过上面的命名空间的定义的代码，我们可以知道，在总线IO上，拥有所有连接的socket的信息，拥有所有的rooms信息，</p><p>故：</p><ol><li>可以向指定房间里发送消息</li><li>可以向连接到当前命名空间里的所有socket发送消息</li><li>等…</li></ol><p>官网api截图：</p><p><fancybox><img src="https://s2.ax1x.com/2020/01/31/13JkOH.png" alt=""></fancybox></p><p>可知，总的是对room和连接的sockets进行操作。</p><h2 id="当前连接socket总结："><a href="#当前连接socket总结：" class="headerlink" title="当前连接socket总结："></a>当前连接socket总结：</h2><p><fancybox><img src="https://s2.ax1x.com/2020/01/31/13nSvq.png" alt=""></fancybox></p><h1 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h1><p>当理解了总线IO与当前连接的socket的关系后，就能思路清晰的写出优秀的的代码了。</p><h2 id="写下这篇文章，希望对你有帮助，与君共勉！"><a href="#写下这篇文章，希望对你有帮助，与君共勉！" class="headerlink" title="写下这篇文章，希望对你有帮助，与君共勉！"></a>写下这篇文章，希望对你有帮助，与君共勉！</h2><h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><p><strong><a href="https://socket.io/docs/server-api/#Server" target="_blank" rel="noopener">socket.io官网</a></strong></p><p><strong><a href="https://blog.csdn.net/sunq1982/article/details/78043330" target="_blank" rel="noopener">socket.io命名空间的详细解析</a></strong></p><p><strong><a href="https://www.jianshu.com/p/8d28d3e0b43e" target="_blank" rel="noopener">WebSocket协议-Socket.io 服务端API</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> socket.io </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 入门 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode相关配置</title>
      <link href="/2020/01/06/vscode%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/01/06/vscode%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>记录自己常用的一些配置…</p><a id="more"></a><h2 id="打开setting-json配置文件"><a href="#打开setting-json配置文件" class="headerlink" title="打开setting.json配置文件"></a>打开setting.json配置文件</h2><p><img src="https://image.gslb.dawnlab.me/c219e2ba7704d878cc8270f905269137.png" alt=""></p><h2 id="VSCode实现用Ctrl-滚轮实现代码的缩放"><a href="#VSCode实现用Ctrl-滚轮实现代码的缩放" class="headerlink" title="VSCode实现用Ctrl+滚轮实现代码的缩放"></a>VSCode实现用Ctrl+滚轮实现代码的缩放</h2><p>配置文件如下：</p><p>在文件–&gt;首选项–&gt;设置–&gt;用户设置中添加如下代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"editor.mouseWheelZoom": true</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vsCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个小demo弄懂vue的$nextTick</title>
      <link href="/2020/01/06/%E4%B8%80%E4%B8%AA%E5%B0%8Fdemo%E5%BC%84%E6%87%82vue%E7%9A%84$nextTick/"/>
      <url>/2020/01/06/%E4%B8%80%E4%B8%AA%E5%B0%8Fdemo%E5%BC%84%E6%87%82vue%E7%9A%84$nextTick/</url>
      
        <content type="html"><![CDATA[<p><fancybox><img src="https://image.gslb.dawnlab.me/62c937472655f71064368ea87d641cb1.jpg" alt=""></fancybox></p><p>一个小demo弄懂vue的$nextTick的作用</p><a id="more"></a><p>有这样一段代码：</p><p>代码截图：<br><fancybox><img src="https://image.gslb.dawnlab.me/10875e2f276bac164ab38fbc55dd6d12.png" alt=""></fancybox></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/vue/2.6.10/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"span"</span> <span class="attr">v-if</span>=<span class="string">"showSpan"</span> &gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btn"</span> &gt;</span>显示<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            showSpan: <span class="literal">false</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            btn()&#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.showSpan = <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log( <span class="built_in">document</span>.querySelector(<span class="string">"span"</span>) )</span></span><br><span class="line"><span class="javascript">                setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log( <span class="string">"200毫秒后"</span> )</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log( <span class="built_in">document</span>.querySelector(<span class="string">"span"</span>) )</span></span><br><span class="line">                &#125;, 200 )</span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.$nextTick( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log( <span class="string">"$nextTick执行的结果"</span> )</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log( <span class="built_in">document</span>.querySelector(<span class="string">"span"</span>) )</span></span><br><span class="line">                &#125; )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行结果：</p><p><fancybox><img src="https://image.gslb.dawnlab.me/a497ffd403e6b77e63c3b9ec527675bc.png" alt=""></fancybox></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>第一个结果为null，因为没有找到dom元素，<br>第二个出现的是$nextTick执行的结果，是确定dom重新渲染挂载完毕执行的回调函数<br>第三个才是定时器的结果，是在最后执行的函数。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>可知，vue中数据更新引起的dom更新是异步执行的。</p><h2 id="小拓展"><a href="#小拓展" class="headerlink" title="小拓展"></a>小拓展</h2><h3 id="v-if和v-show的区别"><a href="#v-if和v-show的区别" class="headerlink" title="v-if和v-show的区别"></a>v-if和v-show的区别</h3><p>当我们把上文的 <code>v-if</code> 改成 <code>v-show</code> 后，我们可以看到：</p><p><fancybox><img src="https://image.gslb.dawnlab.me/3a87602c6d51db2eaaec1aa8a5629c74.png" alt=""></fancybox></p><p>可以看出，<code>v-if=false</code> 时，元素不会渲染到页面，使用 <code>v-show</code> 元素一直在页面中，只是设置样式 <code>display: none;</code> 没有显示而已，</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则之给字符串来一套增删改查服务</title>
      <link href="/2020/01/03/%E6%AD%A3%E5%88%99%E4%B9%8B%E7%BB%99%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9D%A5%E4%B8%80%E5%A5%97%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E6%9C%8D%E5%8A%A1/"/>
      <url>/2020/01/03/%E6%AD%A3%E5%88%99%E4%B9%8B%E7%BB%99%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9D%A5%E4%B8%80%E5%A5%97%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://image.gslb.dawnlab.me/2fb5e7025b9b0664bf98f9007c370b19.jpg" alt=""></p><p>想学习正则的操作吗？？那就进来吧…</p><a id="more"></a><h1 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h1><p>嗨咯，亲爱的读者你好！既然你点进来了，那么想必你一定对正则感兴趣吧。</p><p>如果你对正则充满畏惧心理，不懂也不理解正则，没关系，往下看，</p><p>看完这篇文章，相信你一定会对正则充满兴趣，并且不再畏惧，消灭恐惧的最好办法，就是面对恐惧！！</p><p>加油！！读完它，理解正则操作，然后爱上正则！</p><blockquote><p>正则表达式是匹配模式，要么匹配字符，要么匹配位置。请记住这句话。</p><footer><strong>@老姚</strong><cite><a href="https://juejin.im/post/5965943ff265da6c30653879" target="_blank" rel="noopener">JS正则表达式完整教程（略长）</a></cite></footer></blockquote><p>老姚对正则的评价非常到位，我很赞同，希望你能记住，这篇文章就是在匹配的基础上做的相关的操作。</p><p>如果你没有正则的基础，请不要害怕，这篇文章会一步一步的带你了解正则相关的操作，每个操作的案例相对简单易理解，但是展示出了每个操作的作用。在阅读文章前，请仔细的阅读前置知识，了解相关api的作用。</p><p>如果你学习过正则，对正则有一定了解，那么这篇文章非常适合你，这篇文章可以加深你对正则用法的理解。</p><p>如果你是正则高手，文中有写的不对的和写得不妥当的，也请指出错误。</p><p>本文不涉及正则表达式的书写教学，但是并影响你对每个增删查改操作的理解。如果你想学习正则表达式的书写，在文章后面我有推荐学习正则的优秀文章。</p><p>相信你看过这篇文章后，会提高你对正则的理解与学习正则的兴趣。加油！</p><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><p>既然是用正则对字符串的操作，那么，我们得需要了解相关的方法，对吧？？与正则相关的方法就6个（真的很少很容易理解！！）：如果你对下面六个方法非常熟悉了，你可以直接从前置知识的总结处开始看（￣︶￣）↗</p><figure class="highlight"><figcaption><span>与正则相关的6个方法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串四个</span></span><br><span class="line">String#search    // 查找匹配到字符串的位置，返回位置index</span><br><span class="line">String#split     // 以正则匹配到的字符串截断原字符串，返回数组</span><br><span class="line">String#match     // 匹配字符串并返回一些信息</span><br><span class="line">String#replace   // 对匹配到的字符串进行替换，返回修改后的字符串</span><br><span class="line"><span class="comment">// 正则两个</span></span><br><span class="line">RegExp#test      // 匹配字符串是否有符合正则的部分</span><br><span class="line">RegExp#exec      // 匹配字符串，并返回相关信息</span><br></pre></td></tr></table></figure><h2 id="1-String-search"><a href="#1-String-search" class="headerlink" title="1.String#search"></a>1.String#search</h2><p>语法：str.search(regexp)</p><p>定义：正则去匹配字符串，如果匹配成功，就返回匹配成功的位置，匹配失败就返回-1.</p><figure class="highlight js"><figcaption><span>search</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/\d/</span></span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"abc123"</span></span><br><span class="line"><span class="built_in">console</span>.log( string.search(regex) )</span><br><span class="line"><span class="comment">// =&gt; 3</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 当传入的参数是字符串时，会把字符串转成正则表达式。</p><h2 id="2-String-split"><a href="#2-String-split" class="headerlink" title="2.String#split"></a>2.String#split</h2><p>语法：str.split(separator, limit)</p><p>定义：split()方法把原字符串分割成子字符串组成数组，并返回该数组。</p><p>两个参数均是可选的，其中 separator 表示分隔符，它可以是字符串也可以是正则表达式。如果忽略 separator，则返回的数组包含一个由原字符串组成的元素。如果 separator 是一个空串，则 str 将会被分割成一个由原字符串中字符组成的数组。limit 表示从返回的数组中截取前 limit 个元素，从而限定返回的数组长度。</p><figure class="highlight js"><figcaption><span>split</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/\D/</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"2017/06/26"</span>.split(regex) )</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"2017.06.26"</span>.split(regex, <span class="number">2</span>) )</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"2017-06-26"</span>.split(regex) )</span><br><span class="line"><span class="comment">// =&gt; ["2017", "06", "26"]</span></span><br><span class="line"><span class="comment">// =&gt; ["2017", "06"]</span></span><br><span class="line"><span class="comment">// =&gt; ["2017", "06", "26"]</span></span><br></pre></td></tr></table></figure><h2 id="3-String-match"><a href="#3-String-match" class="headerlink" title="3.String#match"></a>3.String#match</h2><p>语法：str.match(regexp)</p><p>定义：查找出与正则相匹配的项。</p><p>返回值：</p><ol><li>正则的匹配模式为全局匹配：返回匹配的数组或则null</li><li>正则的匹配模式不是为全局匹配：返回匹配到的项，groups：分组，index:找到结果的索引,input:原字符串</li></ol><figure class="highlight js"><figcaption><span>match</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"aa22bb313cc444ff"</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d+/g</span></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/(\d+)([a-z]+)(\d+)/</span></span><br><span class="line"><span class="built_in">console</span>.log( str.match( reg ) )</span><br><span class="line"><span class="built_in">console</span>.log( str.match( reg1 ) )</span><br><span class="line"><span class="comment">// =&gt; ["22", "313", "444"]</span></span><br><span class="line"><span class="comment">// =&gt; ["22bb313", "22", "bb", "313", index: 2, input: "aa22bb313cc444", groups: undefined]</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 当传入的参数是字符串时，会把字符串转成正则表达式。</p><h2 id="4-String-replace"><a href="#4-String-replace" class="headerlink" title="4.String#replace"></a>4.String#replace</h2><p>语法：str.replace( regexp | substr, newSubStr | function )</p><p>参数说明：</p><ol><li>regexp: 一个 RegExp 对象. 该正则所匹配的内容会被第二个参数的返回值替换掉。</li><li>substr: 一个要被 newSubStr 替换的字符串.</li><li>newSubStr: 替换掉第一个参数在原字符串中的匹配部分. 该字符串中可以内插一些特殊的变量名.</li><li>function: 用来创建新子字符串的函数，该子字符串用于替换与给定regexp或的匹配项substr。</li></ol><p>参数function的参数说明：</p><ul><li>第一个参数：整个正则或者字符串匹配到的字符串，</li><li>中间的参数：依次为正则中分组匹配到的字符串，</li><li>倒数第二个参数：找到结果的索引</li><li>倒数第一个参数：原字符串</li></ul><figure class="highlight js"><figcaption><span>str.replace( regexp, function )</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"aa22bb313cc444ff"</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\d+)(\w&#123;1&#125;)/g</span></span><br><span class="line">str = str.replace( reg, <span class="function"><span class="keyword">function</span>(<span class="params"> str, s1, s2, index, sour </span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"参数列表："</span>, str, s1, s2, index, sour )</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="built_in">arguments</span> )</span><br><span class="line">    <span class="keyword">return</span> s1 + <span class="string">"---"</span> + s2</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log( str )</span><br></pre></td></tr></table></figure><p><img src="https://image.gslb.dawnlab.me/1ece30eabe0919fd6e5b157856349d48.png" alt=""></p><h2 id="5-RegExp-test"><a href="#5-RegExp-test" class="headerlink" title="5.RegExp#test"></a>5.RegExp#test</h2><p>语法：reg.test( str )</p><p>说明：正则去匹配字符串，匹配成功，返回true，匹配失败，返回false</p><figure class="highlight js"><figcaption><span>reg.test()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/\d/</span></span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"abc123"</span></span><br><span class="line"><span class="built_in">console</span>.log( regex.test(string) )</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="6-RegExp-exec"><a href="#6-RegExp-exec" class="headerlink" title="6.RegExp#exec"></a>6.RegExp#exec</h2><p>语法：reg.exec( str )</p><p>说明：exec() 方法在一个指定字符串中执行一个搜索匹配。返回一个结果数组或 null。</p><figure class="highlight js"><figcaption><span>reg.exec( str )</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"aa22bb313cc444ff"</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\d+)(\w&#123;1&#125;)/g</span></span><br><span class="line"><span class="built_in">console</span>.log( reg.exec( str ))</span><br><span class="line"><span class="built_in">console</span>.log( reg.exec( str ))</span><br><span class="line"><span class="built_in">console</span>.log( reg.exec( str ))</span><br></pre></td></tr></table></figure><p><img src="https://image.gslb.dawnlab.me/50cc8a9a0d72e4a3c988a16f9cfd5b9b.png" alt=""></p><p><strong>注意</strong><br>当使用全局模式时，exec函数会把这次匹配到的位置存放在当前正则reg的lastIndex里面，下次调用时，会从这次的最后位置开始查找。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过上面简单的案例与说明，相信你已经可以看出我们要进行的增删改查操作应该用哪个方法了吧？我们来总结一下：</p><ul><li><p>增：6个方法中，只有replace可以对匹配到的字符串进行操作，所以当我们需要在字符串中增加内容时，我们就可以使用replace方法。</p></li><li><p>删：6个方法中，split方法以匹配到的字符串为断点截断字符串返回数组，replace也可以对匹配到的字符串进行操作，所以删除可以使用split和replace方法。</p></li><li><p>查：6个方法中，除了split方法，都或多或少可以得到一些匹配到字符串的信息。</p></li><li><p>改：6个方法中，只有replace方法可以操作匹配到的字符串，所以修改只有用replace方法。</p></li></ul><p>好了，下面详细的介绍下各种操作的详细情况。</p><h1 id="1-增"><a href="#1-增" class="headerlink" title="1.增"></a>1.增</h1><p>相信你一定遇到过往字符串里面加字符串的情况，你一般是怎么操作的呢？我们来分析下：</p><p>当向字符串中添加字符串时，有两种添加情况，一种：添加到匹配的字符串前，另一种是：添加到匹配的字符串后面。</p><p>是吧？？好，开始操作吧！</p><h2 id="添加到匹配字符串前："><a href="#添加到匹配字符串前：" class="headerlink" title="添加到匹配字符串前："></a>添加到匹配字符串前：</h2><p>我们可以使用正则位置匹配表达式：(?=p)，正向肯定预查，其中p是一个子模式，即p前面的位置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">"hello"</span>.replace(<span class="regexp">/(?=ll)/g</span>, <span class="string">'#'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"><span class="comment">// =&gt; "he#llo"</span></span><br></pre></td></tr></table></figure><p>也可以直接使用函数操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">"hello"</span>.replace(<span class="regexp">/(?=ll)/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> str </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"#"</span> + str</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"><span class="comment">// =&gt; "he#llo"</span></span><br></pre></td></tr></table></figure><h2 id="添加到匹配字符串后："><a href="#添加到匹配字符串后：" class="headerlink" title="添加到匹配字符串后："></a>添加到匹配字符串后：</h2><p>我们可以使用正则位置匹配表达式：(?&lt;=p)，反向肯定预查，就是p后面的位置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">"hello"</span>.replace(<span class="regexp">/(?&lt;=ll)/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> str </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"#"</span> + str</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"><span class="comment">// =&gt; "hell#o"</span></span><br></pre></td></tr></table></figure><p>当然，你也可以直接使用replace的函数操作完成。</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ul><li><p>在整个字符串前和后面添加，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">"hello"</span>.replace(<span class="regexp">/^|$/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> str </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"#"</span> + str</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"><span class="comment">// =&gt; "#hello#"</span></span><br></pre></td></tr></table></figure></li><li><p>在每个单词的前后面添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">"hello world"</span>.replace(<span class="regexp">/^|$/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> str </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"#"</span> + str</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"><span class="comment">// =&gt; "#hello# #world#"</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="2-删："><a href="#2-删：" class="headerlink" title="2.删："></a>2.删：</h1><p>经过我们前面的总结，删除可以使用String.split和String.replace完成。</p><h2 id="String-splite"><a href="#String-splite" class="headerlink" title="String.splite"></a>String.splite</h2><p>可以知道，使用splite方法返回的是一个数组，操作后，我们可以使用join()函数，返回字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"aa22bb313cc444ff"</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d+/</span></span><br><span class="line"><span class="built_in">console</span>.log( str.split( reg ).join(<span class="string">""</span>) )</span><br><span class="line"><span class="comment">// =&gt; "aabbccff"</span></span><br></pre></td></tr></table></figure><h2 id="String-replace"><a href="#String-replace" class="headerlink" title="String.replace"></a>String.replace</h2><p>使用replace就非常简单了，我们可以把第二个参数传 <code>&quot;&quot;</code> ,也可以用函数操作，返回 <code>&quot;&quot;</code>即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"aa22bb313cc444ff"</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d+/g</span>       <span class="comment">// 全局模式，不加全局模式，只会替换一次</span></span><br><span class="line">str = str.replace( reg, <span class="string">""</span> )</span><br><span class="line"><span class="built_in">console</span>.log( str )</span><br><span class="line"><span class="comment">// =&gt; "aabbccff"</span></span><br></pre></td></tr></table></figure><h1 id="3-查"><a href="#3-查" class="headerlink" title="3.查"></a>3.查</h1><p>查找可以分为两类：一种是需要详细结果的，一种是不需要详细结果的。</p><h2 id="不需要详细结果"><a href="#不需要详细结果" class="headerlink" title="不需要详细结果"></a>不需要详细结果</h2><p>不需要详细结果就是返回 <code>true</code> 和 <code>false</code> 就可以了。这里可以使用test</p><figure class="highlight js"><figcaption><span>验证电话号码</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^1[345789]\d&#123;9&#125;$/</span></span><br><span class="line"><span class="keyword">var</span> res = reg.test( <span class="string">"13882628333"</span> )</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="需要详细结果"><a href="#需要详细结果" class="headerlink" title="需要详细结果"></a>需要详细结果</h2><h3 id="使用String-match"><a href="#使用String-match" class="headerlink" title="使用String.match()"></a>使用String.match()</h3><figure class="highlight js"><figcaption><span>获取时间</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^([0-9]&#123;4&#125;)-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"2017-06-10"</span>.match( reg ) )</span><br><span class="line"><span class="comment">// =&gt; ["2017-06-10", "2017", "06", "10", index: 0, input: "2017-06-10", groups: undefined]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>获取类名</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/class=\"(.*)?"/</span></span><br><span class="line"><span class="keyword">var</span> string = <span class="string">'&lt;div id="container" class="main box"&gt;&lt;/div&gt;'</span></span><br><span class="line"><span class="built_in">console</span>.log( string.match( reg ))</span><br><span class="line"><span class="comment">// =&gt; ["class="main box"", "main box", index: 20, input: "&lt;div id="container" class="main box"&gt;&lt;/div&gt;", groups: undefined]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>match获取全部的颜色代码（正则使用g全局匹配模式）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/#([0-9a-fA-F]&#123;6&#125;|[0-9a-fA-F]&#123;3&#125;)/g</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"#ffbbad #Fc01DF #FFF #ffE"</span></span><br><span class="line"><span class="built_in">console</span>.log( str.match( reg ) )</span><br><span class="line"><span class="comment">// =&gt; ["#ffbbad", "#Fc01DF", "#FFF", "#ffE"]</span></span><br></pre></td></tr></table></figure><h3 id="使用reg-exec"><a href="#使用reg-exec" class="headerlink" title="使用reg.exec()"></a>使用reg.exec()</h3><figure class="highlight js"><figcaption><span>获取时间</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/^([0-9]&#123;4&#125;)-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/</span></span><br><span class="line"><span class="built_in">console</span>.log( reg.exec( <span class="string">"2017-06-10"</span> ) )</span><br><span class="line"><span class="comment">// =&gt; ["2017-06-10", "2017", "06", "10", index: 0, input: "2017-06-10", groups: undefined]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>获取类名</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/class=\"(.*)?"/</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'&lt;div id="container" class="main box"&gt;&lt;/div&gt;'</span></span><br><span class="line"><span class="built_in">console</span>.log( reg.exec( str ) )</span><br><span class="line"><span class="comment">// =&gt; ["class="main box"", "main box", index: 20, input: "&lt;div id="container" class="main box"&gt;&lt;/div&gt;", groups: undefined]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>exec获取全部的颜色代码（正则使用g全局匹配模式）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/#([0-9a-fA-F]&#123;6&#125;|[0-9a-fA-F]&#123;3&#125;)/g</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"#ffbbad #Fc01DF #FFF #ffE"</span></span><br><span class="line"><span class="keyword">var</span> arr = []</span><br><span class="line"><span class="keyword">var</span> temp</span><br><span class="line"><span class="keyword">while</span>( temp = reg.exec( str ) )&#123;</span><br><span class="line">    arr.push( temp[<span class="number">0</span>] )</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( arr )</span><br></pre></td></tr></table></figure><h1 id="4-改"><a href="#4-改" class="headerlink" title="4.改"></a>4.改</h1><p>经过前面的终结，我们知道只有replace可以进行修改操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"aa22bb313cc444ff"</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\d+)(\w&#123;1&#125;)/g</span></span><br><span class="line">str = str.replace( reg, <span class="function"><span class="keyword">function</span>(<span class="params"> str, s1, s2, index, sour </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s1 + <span class="string">"---"</span> + s2</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log( str )</span><br><span class="line"><span class="comment">// =&gt; "aa22---bb313---cc444---ff"</span></span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>写下这篇文章，就是想让自己梳理下正则相关的api与用法，加强一下自己写正则的信心。</p><p>看了这篇文章，你是否对正则又有了新的理解呢？对自己写正则是否又增加了几分信心呢？</p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>本文主要讲述了正则的相关用法，考虑到正则新手，所以每个操作都只是做的很简单的案例，正则表达式大都很简单，但是，我相信，看了本文，你会更有信心去学习正则。</p><h2 id="学习正则："><a href="#学习正则：" class="headerlink" title="学习正则："></a>学习正则：</h2><p>如果你想学习正则表达式的书写，我这里将推荐一些好的文章给你：</p><p><a href="https://juejin.im/post/5965943ff265da6c30653879#heading-0" target="_blank" rel="noopener">老姚-JS正则表达式完整教程（略长）</a>     非常推荐的一篇文章，我就是看这篇文章学习的正则，适合有一点正则基础的同学</p><p><a href="https://juejin.im/post/59b5e50f51882519777c4815" target="_blank" rel="noopener">考拉海前端团队—JS 的正则表达式</a>    条理清晰–适合初学者学习正则的书写</p><p>文章在精不在多，这两篇文章对初学正则的同学非常友好，能引导你写出优秀的正则表达式，再结合这篇文章对正则表达式的运用，相信你会对正则的运用游刃有余。</p><h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><p><a href="https://juejin.im/post/5965943ff265da6c30653879#heading-0" target="_blank" rel="noopener">老姚-JS正则表达式完整教程（略长）</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match" target="_blank" rel="noopener">MDN-String.prototype.match()</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace" target="_blank" rel="noopener">MDN-String.prototype.replace()</a></p><h2 id="共勉"><a href="#共勉" class="headerlink" title="共勉"></a>共勉</h2><p>写下这篇文章，希望对你有帮助，与君共勉！</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客再次启程</title>
      <link href="/2019/12/02/%E5%8D%9A%E5%AE%A2%E5%86%8D%E6%AC%A1%E5%90%AF%E7%A8%8B/"/>
      <url>/2019/12/02/%E5%8D%9A%E5%AE%A2%E5%86%8D%E6%AC%A1%E5%90%AF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="https://speed.moe/images/11283769e2d6035f894edb659848d4e1.jpg" alt=""></p><p>换了博客的主题，页面美观多了，心情也舒畅多了。更加有动力写博客了，整理好心情，重新出发！！</p><a id="more"></a><h1 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h1><p>经过一天的配置，博客搭建的差不多了，</p><p>整理好心情！！！</p><h1 id="重新出发！"><a href="#重新出发！" class="headerlink" title="重新出发！"></a>重新出发！</h1>]]></content>
      
      
      <categories>
          
          <category> 我的随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>drawing-board画板</title>
      <link href="/2019/08/14/drawing-board%E7%94%BB%E6%9D%BF/"/>
      <url>/2019/08/14/drawing-board%E7%94%BB%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p><img src="https://speed.moe/images/10b7a48eb201a8d8b55b879f1346bc08.png" alt=""><br>canvas写的画板</p><a id="more"></a><h1 id="快到碗里来-画板"><a href="#快到碗里来-画板" class="headerlink" title="快到碗里来-画板"></a>快到碗里来-画板</h1><hr><p>预览：<a href="https://curtaintan.github.io/drawing-board/" target="_blank" rel="noopener">点击</a></p><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><hr><p>之前学完canvas，一直想自己写一点东西，这两天终于完成了，开心！！</p><h2 id="完成功能："><a href="#完成功能：" class="headerlink" title="完成功能："></a>完成功能：</h2><hr><ol><li>绘画</li><li>画直线</li><li>截图</li><li>旋转</li><li>弹幕</li><li>鼠标触碰弹幕，弹幕悬停</li><li>撤销/前进</li><li>设置画笔信息</li><li>兼容移动端</li></ol><h3 id="功能截图："><a href="#功能截图：" class="headerlink" title="功能截图："></a>功能截图：</h3><p><fancybox><img src="https://speed.moe/images/049770423ee86256db618185a2e988f1.png" height="400px"  /></fancybox><br><fancybox><br>    <img src="https://speed.moe/image/byX3" height="300px" /><br>    <img src="https://speed.moe/images/be83f5d60c5876a922fdcc4f2f7a67e8.png" height="300px" /><br>    <img src="https://speed.moe/images/785defcb66b13d6054be52db20590def.png" height="300px" /><br></fancybox><br><fancybox><img src="https://speed.moe/images/5471de87336ed89bc3484110078ee2f8.png" height="400px" /></fancybox><br><fancybox><img src="https://speed.moe/images/3aba481fb121bc400470f7b39f946fc7.png" /></fancybox></p><h2 id="前置说明"><a href="#前置说明" class="headerlink" title="前置说明"></a>前置说明</h2><p>如果你需要参考代码，你需要看下这里。<br>因为功能复杂，标志的变量有接近10个之多，一下子可能很难看懂，所以我这里说明下我的开发流程，以及定义变量的顺序。</p><ol><li><strong>功能顺序：</strong></li></ol><p>画笔 → 定义画笔信息 → 橡皮檫 → 删除 → 撤销/前进 → 直线 → 截图 → 弹幕</p><ol start="2"><li><strong>定义变量的顺序，以及作用：</strong></li></ol><p>所有功能变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isDown = <span class="literal">false</span>                  <span class="comment">// 标志鼠标是否按下      绘图三步和剪切三步走时，后面两个事件触发的标志</span></span><br><span class="line"><span class="keyword">var</span> points = []                     <span class="comment">// 滑动时收集的点       绘画三步走时，为了时画的线光滑，记录点，减短画线的距离</span></span><br><span class="line"><span class="keyword">var</span> beginPoint = <span class="literal">null</span>               <span class="comment">// 开始的点            绘画三步走时使用</span></span><br><span class="line"></span><br><span class="line">----这三个为一组，画线三人组，为了让画的线更为光滑</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> currentMenu = <span class="string">"icon-pen"</span>        <span class="comment">// 初始按钮            底部按钮选中的按钮</span></span><br><span class="line"><span class="keyword">var</span> currentColor = <span class="number">0</span>                <span class="comment">// 初始颜色的index     颜色选择，默认第一个</span></span><br><span class="line"><span class="keyword">var</span> paintingModal = <span class="string">"pen"</span>           <span class="comment">// 画笔模式   line||pen||cut</span></span><br><span class="line"></span><br><span class="line">----按钮功能三人组，按钮选中标记，颜色选中，画画的模式，切换前面画笔和画直线的模式</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lookModal = <span class="literal">false</span>               <span class="comment">// 鼠标模式             按钮第一个功能，此模式不能绘画，只能看</span></span><br><span class="line"><span class="keyword">var</span> cuted = <span class="literal">false</span>                   <span class="comment">// 标记裁剪时，是否已经裁剪       裁剪后，防止后续的操作再次触发裁剪操作 </span></span><br><span class="line"></span><br><span class="line">----鼠标模式和剪切模式的定义</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> animationTimer = <span class="literal">null</span>           <span class="comment">// 弹幕动画的timer               动画的timer</span></span><br><span class="line"><span class="keyword">var</span> barrageArray = []               <span class="comment">// 保存弹幕的数组</span></span><br><span class="line"><span class="keyword">var</span> globalPoint = &#123; <span class="attr">x</span> : <span class="number">0</span>, <span class="attr">y</span> : <span class="number">0</span> &#125;  <span class="comment">// canvas上鼠标的点        ---弹幕时使用</span></span><br><span class="line"></span><br><span class="line">----弹幕三人组  globalPoint用来标记鼠标在canvas中的坐标，用于判断鼠标是否触碰到弹幕上</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现撤销和重做的功能</span></span><br><span class="line"><span class="keyword">let</span> canvasHistory = []                    <span class="comment">// canvas数据，在每次画线和橡皮檫使用后保存数据</span></span><br><span class="line"><span class="keyword">let</span> step = <span class="number">0</span>                              <span class="comment">// 画笔抬起的步数，清空时，步数也清空</span></span><br><span class="line"></span><br><span class="line">----撤销/前进二人组，画笔抬起时，把画布信息用getImageData存入canvasHistory，用step完成前进和撤销的功能</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> penAttibutes = &#123;                       <span class="comment">// 画笔数据，</span></span><br><span class="line">    width : <span class="number">2</span>,</span><br><span class="line">    lineCap : <span class="string">"round"</span>,</span><br><span class="line">    lineJoin : <span class="string">"round"</span>,</span><br><span class="line">    strokeStyle: <span class="string">"#000"</span>,</span><br><span class="line">    fillStyle: <span class="string">"#000"</span>,</span><br><span class="line">    globalCompositeOperation: <span class="string">"source-over"</span>,</span><br><span class="line">    globalAlpha : <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="开发中遇到的难点与重点与解决方案："><a href="#开发中遇到的难点与重点与解决方案：" class="headerlink" title="开发中遇到的难点与重点与解决方案："></a>开发中遇到的难点与重点与解决方案：</h2><ol><li>保存历史记录使用api对比</li></ol><p>我在写代码的时候有做过参考 <strong><a href="https://juejin.im/post/5c7bf106e51d454b47558882" target="_blank" rel="noopener">这篇文章</a></strong>，<br>文章里用是canvas.toDataUrl的方式做的数据保存，评论里说这个数据保存不理想，<br>其实我一开始的时候想的就是用ctx.getImageDaata的方式来做的，我也用这个两个api做了一个对比：</p><p>代码：</p><img src="./image/savecode.png" /><p>结果：</p><img src="./image/getImg.png" /><img src="./image/dataurl.png" /><p>可见，使用getImageData获取数据是时间是非常短的，并且获取到是画布像素数据，<br>后续可以直接进行像素操作，从而不用再花时间再去获取画布信息，<br>其次，getImageData获取到是数据是有数据结构的，这样在内存里面保存下来对内存更加友好，<br>而使用toDataUrl方式保存下来的数据有21万行那么长的字符串，对内存并不友好。</p><p>后面我还做了他们绘制到画布上的时间对比，他们的时间都在1ms内，到时每次putImageData都要快一点点，但是快这一点时间的意义并不大。</p><p>toDataUrl也是有好处的，因为转置出来的是base64的字符串，所以他能够直接作为图片的src属性，让图片显示到页面。</p><ol start="2"><li>画直线</li></ol><p>如何画出一条直线？？当我做了撤销和前进的时候，我就把画板数据给存到canvasHistory里面了，<br>这里刚好用到，鼠标移动是时候，先清空画布，再绘制保存到canvasHistory里最后那个数据，然后就是绘图三步走，就完成了。</p><p><strong>注意：</strong>这里一定要绘图三步走，或者在绘制前一定要用beginPath()重开一条路径，如果不重开路径，<br>绘制时，会把前面的直线一同绘制出来，因为你一直是一条路径，所以下次绘制时，上次的点也要绘制一遍。</p><ol start="3"><li><p>图片旋转</p><p> 旋转很类似css3，但是，canvas的基点固定在左上角处，所以在旋转的时候，需要先用translate移动画板，可以画一下图，</p></li></ol><p>下面是我画的图：</p><img src="./image/shiyitu.jpg" width="280px" /><pre><code>问题： 当我画笔有rotate属性的时候，当前操作的putImageData不会成功，不知道为什么-----</code></pre><ol start="4"><li><p>如何画出一条光滑的曲线</p><p> 用正常的画法画曲线是时候，画出的曲线不够光滑，<br> 所以我就参考了这篇文章 <strong><a href="https://segmentfault.com/a/1190000016672567" target="_blank" rel="noopener">canvas进阶——如何画出平滑的曲线?</a></strong><br> （其实我也想到了用二次贝塞尔曲线，在寻找更好的解决方案时，就找到这个方法了，这个方案更优），原理可以看原文。</p></li><li><p>鼠标触摸弹幕</p><p> 因为canvas是无记忆性的，所以，你用isPointPath和isPointStroke时，是在当前绘画下才能检测。<br> 在使用isPointPath时，他只与path路径有关，意思就是，你用fillRect直接绘制一个矩形图形是不能检测的，<br> 只能检测rect()和pathTo等围起来的路径内。</p><p> 所以，这里我做了一个外挂路径-用rect()把每个弹幕框起来——哈哈–</p></li><li><p>使用drawImage须知：</p><p> drawImage有三种传参方式，三种方式出来的效果，在书写前可以先参考效果。</p></li></ol><p>参考地址：<a href="https://www.canvasapi.cn/CanvasRenderingContext2D/drawImage" target="_blank" rel="noopener">CanvasRenderingContext2D.drawImage</a></p><ol start="7"><li><p>兼容移动端</p><p> 当在移动端时，会存在移动端延时300ms的问题，因为移动端有双击放大功能，故存在300ms时间。</p><p> 我解决的方法是设置meta信息，禁止缩放，就可以防止300ms问题</p> <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no, target-densitydpi=device-dpi" /></li></ol><h2 id="结语："><a href="#结语：" class="headerlink" title="结语："></a>结语：</h2><p>这个项目大概用了canvas的75%的api，还有像素操作和渐变等api还没用到。</p><p>不知道有没有人看呢，</p><p>如果你看到了这篇文章，希望对你有帮助。</p><p>慢慢来，好好学习，要加油哦！</p><p>与君共勉！！</p><h3 id="参考材料："><a href="#参考材料：" class="headerlink" title="参考材料："></a>参考材料：</h3><ul><li><a href="https://juejin.im/post/5c7bf106e51d454b47558882" target="_blank" rel="noopener">手把手教你实现一个canvas智绘画板</a></li></ul><p>参考了楼主项目的样式，但是所有样式都是我自己写的，嘻嘻，实现方式不一样哦。。</p><ul><li><a href="https://segmentfault.com/a/1190000016672567" target="_blank" rel="noopener">canvas进阶——如何画出平滑的曲线?</a></li></ul><p>画一条光滑的曲线，不错哦。</p><ul><li><a href="http://ghmagical.com/article/page/id/rf5VpT3YQPpN" target="_blank" rel="noopener">canvas动画包教不包会</a></li></ul><p>可以在这里把所有api的意义和作用和参数等都记下来—–</p><ul><li><a href="https://www.canvasapi.cn/" target="_blank" rel="noopener">Canvas API中文文档首页地图</a></li></ul><p>canvas所有的api，当然你也可以去mdn看，其实都一样啦—</p>]]></content>
      
      
      <categories>
          
          <category> 我的作品 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则小记（一）之api速学</title>
      <link href="/2019/08/14/%E6%AD%A3%E5%88%99%E5%B0%8F%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8Bapi%E9%80%9F%E5%AD%A6/"/>
      <url>/2019/08/14/%E6%AD%A3%E5%88%99%E5%B0%8F%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8Bapi%E9%80%9F%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3529936001,627965941&fm=26&gp=0.jpg" alt=""></p><p>作为一个前端，正则是必须要会的技能之一，所以，让我们开始学习正则吧。</p><p>这是正则学习的第一篇文章…</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>正则，用简短的一句话概括，正则表达式是匹配模式，要么匹配字符，要么匹配位置。</p><h2 id="正则的方法和与正则有关的方法"><a href="#正则的方法和与正则有关的方法" class="headerlink" title="正则的方法和与正则有关的方法"></a>正则的方法和与正则有关的方法</h2><p>共有6个，字符串实例4个，正则实例2个：</p><p>String#search</p><p>String#split</p><p>String#match</p><p>String#replace</p><p>RegExp#test</p><p>RegExp#exec</p><h3 id="1-search"><a href="#1-search" class="headerlink" title="1.search()"></a>1.search()</h3><p>定义：正则去匹配字符串，如果匹配成功，就返回匹配成功的位置，匹配失败就返回-1.</p><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/\d/</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"abc123"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( string.search(regex) );</span><br><span class="line"><span class="comment">// =&gt; 3</span></span><br></pre></td></tr></table></figure><h3 id="2-split"><a href="#2-split" class="headerlink" title="2.split"></a>2.split</h3><p>定义：split()方法把原字符串分割成子字符串组成数组，并返回该数组。</p><p>语法：str.split(separator, limit)</p><p>两个参数均是可选的，其中 separator 表示分隔符，它可以是字符串也可以是正则表达式。如果忽略 separator，则返回的数组包含一个由原字符串组成的元素。如果 separator 是一个空串，则 str 将会被分割成一个由原字符串中字符组成的数组。limit 表示从返回的数组中截取前 limit 个元素，从而限定返回的数组长度。</p><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/\D/</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"2017/06/26"</span>.split(regex) )</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"2017.06.26"</span>.split(regex) )</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"2017-06-26"</span>.split(regex) )</span><br><span class="line"><span class="comment">// =&gt; ["2017", "06", "26"]</span></span><br><span class="line"><span class="comment">// =&gt; ["2017", "06", "26"]</span></span><br><span class="line"><span class="comment">// =&gt; ["2017", "06", "26"]</span></span><br></pre></td></tr></table></figure><h3 id="3-match"><a href="#3-match" class="headerlink" title="3.match"></a>3.match</h3><p>定义：match() 方法用于测试字符串是否支持指定正则表达式的规则，即使传入的是非正则表达式对象，它也会隐式地使用new RegExp(obj)将其转换为正则表达式对象。</p><p>语法：str.match(regexp)</p><p>该方法返回包含匹配结果的数组，如果没有匹配项，则返回 null</p><p>匹配原则：<br>    匹配成功就会结束，如果想继续全部匹配，加标识g</p><p><strong>描述</strong></p><ul><li><p>若正则表达式没有 g 标志，则返回同 RegExp.exec(str) 相同的结果。而且返回的数组拥有一个额外的 input 属性，该属性包含原始字符串，另外该数组还拥有一个 index 属性，该属性表示匹配字符串在原字符串中索引（从0开始）。</p></li><li><p>若正则表达式包含 g 标志，则该方法返回一个包含所有匹配结果的数组，没有匹配到则返回 null。</p></li></ul><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/^(\d&#123;4&#125;)\D(\d&#123;2&#125;)\D(\d&#123;2&#125;)$/</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"2017-06-26"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( string.match(regex) );</span><br><span class="line"><span class="comment">// =&gt;["2017-06-26", "2017", "06", "26", index: 0, input: "2017-06-26"]</span></span><br></pre></td></tr></table></figure><h3 id="4-replace"><a href="#4-replace" class="headerlink" title="4.replace"></a>4.replace</h3><p>语法：str.replace( regexp | substr, newSubStr | function[, flags] )</p><p>参数：</p><ul><li>regexp: 一个 RegExp 对象. 该正则所匹配的内容会被第二个参数的返回值替换掉。</li><li>substr: 一个要被 newSubStr 替换的字符串.</li><li>newSubStr: 替换掉第一个参数在原字符串中的匹配部分. 该字符串中可以内插一些特殊的变量名.</li><li>function: 一个用来创建新子字符串的函数, 该函数的返回值将替换掉第一个参数匹配到的结果. 该函数的参数描-述请参考 指定一个函数作为参数 小节.</li><li>flags: 注意：flags 参数在 v8 内核（Chrome and NodeJs）中不起作用. 方法中使用 flags 参数不是符合标准的并且不赞成这样做.</li></ul><p><strong>replace后面单独写一篇文章总结</strong></p><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/^(\d&#123;4&#125;)\D(\d&#123;2&#125;)\D(\d&#123;2&#125;)$/</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"2017-06-26"</span>;</span><br><span class="line"><span class="keyword">var</span> date = [];</span><br><span class="line">string.replace(regex, <span class="function"><span class="keyword">function</span>(<span class="params">match, year, month, day</span>) </span>&#123;</span><br><span class="line">date.push(year, month, day);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(date);</span><br><span class="line"><span class="comment">// =&gt; ["2017", "06", "26"]</span></span><br></pre></td></tr></table></figure><h3 id="5-test"><a href="#5-test" class="headerlink" title="5.test"></a>5.test</h3><p>说明：正则去匹配字符串，匹配成功，返回true，匹配失败，返回false</p><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/\d/</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"abc123"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( regex.test(string) );</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><h3 id="6-exec"><a href="#6-exec" class="headerlink" title="6.exec"></a>6.exec</h3><p>说明：exec() 方法在一个指定字符串中执行一个搜索匹配。返回一个结果数组或 null。</p><p>这个方法很类似match方法。</p><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/^(\d&#123;4&#125;)\D(\d&#123;2&#125;)\D(\d&#123;2&#125;)$/</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"2017-06-26"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( regex.exec(string) );</span><br><span class="line"><span class="comment">// =&gt;["2017-06-26", "2017", "06", "26", index: 0, input: "2017-06-26"]</span></span><br></pre></td></tr></table></figure><h2 id="相关API注意要点"><a href="#相关API注意要点" class="headerlink" title="相关API注意要点-"></a>相关API注意要点-</h2><h3 id="1-search和match的参数问题"><a href="#1-search和match的参数问题" class="headerlink" title="1 search和match的参数问题"></a>1 search和match的参数问题</h3><p>我们知道字符串实例的那4个方法参数都支持正则和字符串。</p><p>但search和match，会把字符串转换为正则的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">"2017.06.27"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( string.search(<span class="string">"."</span>) );</span><br><span class="line"><span class="comment">// =&gt; 0</span></span><br><span class="line"><span class="comment">//需要修改成下列形式之一</span></span><br><span class="line"><span class="built_in">console</span>.log( string.search(<span class="string">"\\."</span>) );</span><br><span class="line"><span class="built_in">console</span>.log( string.search(<span class="regexp">/\./</span>) );</span><br><span class="line"><span class="comment">// =&gt; 4</span></span><br><span class="line"><span class="comment">// =&gt; 4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( string.match(<span class="string">"."</span>) );</span><br><span class="line"><span class="comment">// =&gt; ["2", index: 0, input: "2017.06.27"]</span></span><br><span class="line"><span class="comment">//需要修改成下列形式之一</span></span><br><span class="line"><span class="built_in">console</span>.log( string.match(<span class="string">"\\."</span>) );</span><br><span class="line"><span class="built_in">console</span>.log( string.match(<span class="regexp">/\./</span>) );</span><br><span class="line"><span class="comment">// =&gt; [".", index: 4, input: "2017.06.27"]</span></span><br><span class="line"><span class="comment">// =&gt; [".", index: 4, input: "2017.06.27"]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( string.split(<span class="string">"."</span>) );</span><br><span class="line"><span class="comment">// =&gt; ["2017", "06", "27"]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( string.replace(<span class="string">"."</span>, <span class="string">"/"</span>) );</span><br><span class="line"><span class="comment">// =&gt; "2017/06.27"</span></span><br></pre></td></tr></table></figure><h3 id="2-match返回结果的格式问题"><a href="#2-match返回结果的格式问题" class="headerlink" title="2 match返回结果的格式问题"></a>2 match返回结果的格式问题</h3><p>match返回结果的格式，与正则对象是否有修饰符g有关。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">"2017.06.27"</span>;</span><br><span class="line"><span class="keyword">var</span> regex1 = <span class="regexp">/\b(\d+)\b/</span>;</span><br><span class="line"><span class="keyword">var</span> regex2 = <span class="regexp">/\b(\d+)\b/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log( string.match(regex1) );</span><br><span class="line"><span class="built_in">console</span>.log( string.match(regex2) );</span><br><span class="line"><span class="comment">// =&gt; ["2017", "2017", index: 0, input: "2017.06.27"]</span></span><br><span class="line"><span class="comment">// =&gt; ["2017", "06", "27"]</span></span><br></pre></td></tr></table></figure><p>没有g，返回的是标准匹配格式，即，数组的第一个元素是整体匹配的内容，接下来是分组捕获的内容，然后是整体匹配的第一个下标，最后是输入的目标字符串。</p><p>有g，返回的是所有匹配的内容。</p><h3 id="3-exec比match更强大"><a href="#3-exec比match更强大" class="headerlink" title="3 exec比match更强大"></a>3 exec比match更强大</h3><p>当正则没有g时，使用match返回的信息比较多。但是有g后，就没有关键的信息index了。</p><p>而exec方法就能解决这个问题，它能接着上一次匹配后继续匹配：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">"2017.06.27"</span>;</span><br><span class="line"><span class="keyword">var</span> regex2 = <span class="regexp">/\b(\d+)\b/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log( regex2.exec(string) );</span><br><span class="line"><span class="built_in">console</span>.log( regex2.lastIndex);</span><br><span class="line"><span class="built_in">console</span>.log( regex2.exec(string) );</span><br><span class="line"><span class="built_in">console</span>.log( regex2.lastIndex);</span><br><span class="line"><span class="built_in">console</span>.log( regex2.exec(string) );</span><br><span class="line"><span class="built_in">console</span>.log( regex2.lastIndex);</span><br><span class="line"><span class="built_in">console</span>.log( regex2.exec(string) );</span><br><span class="line"><span class="built_in">console</span>.log( regex2.lastIndex);</span><br><span class="line"><span class="comment">// =&gt; ["2017", "2017", index: 0, input: "2017.06.27"]</span></span><br><span class="line"><span class="comment">// =&gt; 4</span></span><br><span class="line"><span class="comment">// =&gt; ["06", "06", index: 5, input: "2017.06.27"]</span></span><br><span class="line"><span class="comment">// =&gt; 7</span></span><br><span class="line"><span class="comment">// =&gt; ["27", "27", index: 8, input: "2017.06.27"]</span></span><br><span class="line"><span class="comment">// =&gt; 10</span></span><br><span class="line"><span class="comment">// =&gt; null</span></span><br><span class="line"><span class="comment">// =&gt; 0</span></span><br></pre></td></tr></table></figure><p>其中正则实例lastIndex属性，表示下一次匹配开始的位置。</p><p>比如第一次匹配了“2017”，开始下标是0，共4个字符，因此这次匹配结束的位置是3，下一次开始匹配的位置是4。</p><p>从上述代码看出，在使用exec时，经常需要配合使用while循环：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">"2017.06.27"</span>;</span><br><span class="line"><span class="keyword">var</span> regex2 = <span class="regexp">/\b(\d+)\b/g</span>;</span><br><span class="line"><span class="keyword">var</span> result;</span><br><span class="line"><span class="keyword">while</span> ( result = regex2.exec(string) ) &#123;</span><br><span class="line"><span class="built_in">console</span>.log( result, regex2.lastIndex );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// =&gt; ["2017", "2017", index: 0, input: "2017.06.27"] 4</span></span><br><span class="line"><span class="comment">// =&gt; ["06", "06", index: 5, input: "2017.06.27"] 7</span></span><br><span class="line"><span class="comment">// =&gt; ["27", "27", index: 8, input: "2017.06.27"] 10</span></span><br></pre></td></tr></table></figure><h3 id="4-修饰符g，对exex和test的影响"><a href="#4-修饰符g，对exex和test的影响" class="headerlink" title="4 修饰符g，对exex和test的影响"></a>4 修饰符g，对exex和test的影响</h3><p>上面提到了正则实例的lastIndex属性，表示尝试匹配时，从字符串的lastIndex位开始去匹配。</p><p>字符串的四个方法，每次匹配时，都是从0开始的，即lastIndex属性始终不变。</p><p>而正则实例的两个方法exec、test，当正则是全局匹配时，每一次匹配完成后，都会修改lastIndex。下面让我们以test为例，看看你是否会迷糊：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/a/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"a"</span>), regex.lastIndex );</span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"aba"</span>), regex.lastIndex );</span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"ababc"</span>), regex.lastIndex );</span><br><span class="line"><span class="comment">// =&gt; true 1</span></span><br><span class="line"><span class="comment">// =&gt; true 3</span></span><br><span class="line"><span class="comment">// =&gt; false 0</span></span><br></pre></td></tr></table></figure><p>注意上面代码中的第三次调用test，因为这一次尝试匹配，开始从下标lastIndex即3位置处开始查找，自然就找不到了。</p><p>如果没有g，自然都是从字符串第0个字符处开始尝试匹配：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/a/</span>;</span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"a"</span>), regex.lastIndex );</span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"aba"</span>), regex.lastIndex );</span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"ababc"</span>), regex.lastIndex );</span><br><span class="line"><span class="comment">// =&gt; true 0</span></span><br><span class="line"><span class="comment">// =&gt; true 0</span></span><br><span class="line"><span class="comment">// =&gt; true 0</span></span><br></pre></td></tr></table></figure><h3 id="5-test整体匹配时需要使用-和"><a href="#5-test整体匹配时需要使用-和" class="headerlink" title="5 test整体匹配时需要使用^和$"></a>5 test整体匹配时需要使用^和$</h3><p>这个相对容易理解，因为test是看目标字符串中是否有子串匹配正则，即有部分匹配即可。</p><p>如果，要整体匹配，正则前后需要添加开头和结尾：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="regexp">/123/</span>.test(<span class="string">"a123b"</span>) );</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="regexp">/^123$/</span>.test(<span class="string">"a123b"</span>) );</span><br><span class="line"><span class="comment">// =&gt; false</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="regexp">/^123$/</span>.test(<span class="string">"123"</span>) );</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><h3 id="6-split相关注意事项"><a href="#6-split相关注意事项" class="headerlink" title="6 split相关注意事项"></a>6 split相关注意事项</h3><p>split方法看起来不起眼，但要注意的地方有两个的。</p><p>第一，它可以有第二个参数，表示结果数组的最大长度：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">"html,css,javascript"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( string.split(<span class="regexp">/,/</span>, <span class="number">2</span>) );</span><br><span class="line"><span class="comment">// =&gt;["html", "css"]</span></span><br></pre></td></tr></table></figure><h3 id="7-replace是很强大的"><a href="#7-replace是很强大的" class="headerlink" title="7 replace是很强大的"></a>7 replace是很强大的</h3><hr><p>《JavaScript权威指南》认为exec是这6个API中最强大的，而我始终认为replace才是最强大的。</p><p>因为它也能拿到该拿到的信息，然后可以假借替换之名，做些其他事情。</p><p>总体来说replace有两种使用形式，这是因为它的第二个参数，可以是字符串，也可以是函数。当第二个参数是字符串时，如下的字符有特殊的含义：</p><pre><code>$1,$2,...,$99 匹配第1~99个分组里捕获的文本$&amp; 匹配到的子串文本$` 匹配到的子串的左边文本 $&apos; 匹配到的子串的右边文本$$ 美元符号</code></pre><p>例如，把”2,3,5”，变成”5=2+3”：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">"2,3,5"</span>.replace(<span class="regexp">/(\d+),(\d+),(\d+)/</span>, <span class="string">"$3=$1+$2"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">// =&gt; "5=2+3"</span></span><br></pre></td></tr></table></figure><p>又例如，把”2,3,5”，变成”222,333,555”:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">"2,3,5"</span>.replace(<span class="regexp">/(\d+)/g</span>, <span class="string">"$&amp;$&amp;$&amp;"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">// =&gt; "222,333,555"</span></span><br></pre></td></tr></table></figure><p>再例如，把”2+3=5”，变成”2+3=2+3=5=5”:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">"2+3=5"</span>.replace(<span class="regexp">/=/</span>, <span class="string">"$&amp;$`$&amp;$'$&amp;"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">// =&gt; "2+3=2+3=5=5"</span></span><br></pre></td></tr></table></figure><p>当第二个参数是函数时，我们需要注意该回调函数的参数具体是什么：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"1234 2345 3456"</span>.replace(<span class="regexp">/(\d)\d&#123;2&#125;(\d)/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">match, $<span class="number">1</span>, $<span class="number">2</span>, index, input</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log([match, $<span class="number">1</span>, $<span class="number">2</span>, index, input]);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// =&gt; ["1234", "1", "4", 0, "1234 2345 3456"]</span></span><br><span class="line"><span class="comment">// =&gt; ["2345", "2", "5", 5, "1234 2345 3456"]</span></span><br><span class="line"><span class="comment">// =&gt; ["3456", "3", "6", 10, "1234 2345 3456"]</span></span><br></pre></td></tr></table></figure><p>此时我们可以看到replace拿到的信息，并不比exec少。</p><h3 id="8-使用构造函数需要注意的问题"><a href="#8-使用构造函数需要注意的问题" class="headerlink" title="8 使用构造函数需要注意的问题"></a>8 使用构造函数需要注意的问题</h3><hr><p>一般不推荐使用构造函数生成正则，而应该优先使用字面量。因为用构造函数会多写很多\。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">"2017-06-27 2017.06.27 2017/06/27"</span>;</span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/\d&#123;4&#125;(-|\.|\/)\d&#123;2&#125;\1\d&#123;2&#125;/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log( string.match(regex) );</span><br><span class="line"><span class="comment">// =&gt; ["2017-06-27", "2017.06.27", "2017/06/27"]</span></span><br><span class="line"></span><br><span class="line">regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\d&#123;4&#125;(-|\\.|\\/)\\d&#123;2&#125;\\1\\d&#123;2&#125;"</span>, <span class="string">"g"</span>);</span><br><span class="line"><span class="built_in">console</span>.log( string.match(regex) );</span><br><span class="line"><span class="comment">// =&gt; ["2017-06-27", "2017.06.27", "2017/06/27"]</span></span><br></pre></td></tr></table></figure><h3 id="9-修饰符"><a href="#9-修饰符" class="headerlink" title="9 修饰符"></a>9 修饰符</h3><hr><p>ES5中修饰符，共3个：</p><pre><code>g 全局匹配，即找到所有匹配的，单词是globali 忽略字母大小写，单词ingoreCasem 多行匹配，只影响^和$，二者变成行的概念，即行开头和行结尾。单词是multiline</code></pre><h3 id="10-source属性"><a href="#10-source属性" class="headerlink" title="10 source属性"></a>10 source属性</h3><p>正则实例对象属性，除了global、ingnoreCase、multiline、lastIndex属性之外，还有一个source属性。</p><p>它什么时候有用呢？</p><p>比如，在构建动态的正则表达式时，可以通过查看该属性，来确认构建出的正则到底是什么：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> className = <span class="string">"high"</span>;</span><br><span class="line"><span class="keyword">var</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|\\s)"</span> + className + <span class="string">"(\\s|$)"</span>);</span><br><span class="line"><span class="built_in">console</span>.log( regex.source )</span><br><span class="line"><span class="comment">// =&gt; (^|\s)high(\s|$) 即字符串"(^|\\s)high(\\s|$)"</span></span><br></pre></td></tr></table></figure><h3 id="11-构造函数属性"><a href="#11-构造函数属性" class="headerlink" title="11 构造函数属性"></a>11 构造函数属性</h3><hr><p>构造函数的静态属性基于所执行的最近一次正则操作而变化。除了是$1,…,$9之外，还有几个不太常用的属性（有兼容性问题）：</p><pre><code>RegExp.input 最近一次目标字符串，简写成RegExp[&quot;$_&quot;]RegExp.lastMatch 最近一次匹配的文本，简写成RegExp[&quot;$&amp;&quot;]RegExp.lastParen 最近一次捕获的文本，简写成RegExp[&quot;$+&quot;]RegExp.leftContext 目标字符串中lastMatch之前的文本，简写成RegExp[&quot;$`&quot;]RegExp.rightContext 目标字符串中lastMatch之后的文本，简写成RegExp[&quot;$&apos;&quot;]</code></pre><p>测试代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/([abc])(\d)/g</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"a1b2c3d4e5"</span>;</span><br><span class="line">string.match(regex);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">RegExp</span>.input );</span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">RegExp</span>[<span class="string">"$_"</span>]);</span><br><span class="line"><span class="comment">// =&gt; "a1b2c3d4e5"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">RegExp</span>.lastMatch );</span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">RegExp</span>[<span class="string">"$&amp;"</span>] );</span><br><span class="line"><span class="comment">// =&gt; "c3"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">RegExp</span>.lastParen );</span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">RegExp</span>[<span class="string">"$+"</span>] );</span><br><span class="line"><span class="comment">// =&gt; "3"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">RegExp</span>.leftContext );</span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">RegExp</span>[<span class="string">"$`"</span>] );</span><br><span class="line"><span class="comment">// =&gt; "a1b2"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">RegExp</span>.rightContext );</span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">RegExp</span>[<span class="string">"$'"</span>] );</span><br><span class="line"><span class="comment">// =&gt; "d4e5"</span></span><br></pre></td></tr></table></figure><h2 id="结语："><a href="#结语：" class="headerlink" title="结语："></a>结语：</h2><hr><pre><code>我搜查列出了相关的6个方法，并对6个方法进行了说明。后面我会对replace再单独出一篇文章。参考资料里的第一篇文章真的非常好，值得仔细研读。如果你想粗略了解正则的方法，看我这篇文章是没错了，后面列出的相应方法的坑点和注意点。后面，我会再慢慢补充匹配规则，我会单独列出一篇文章，因为匹配规则也有很多注意点呢。哈哈哈，其实也是在下面的文章里面看的啦，文章真的写得好---嘻嘻其实正则也没有那么难的啦-----希望这篇文章对你有帮助，每天都要加油哦。加油，与君共勉！！！</code></pre><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><ul><li><a href="https://juejin.im/post/5965943ff265da6c30653879#heading-0" target="_blank" rel="noopener">JS正则表达式完整教程（略长）</a></li></ul><p>文章真的写的不错，认认真真，细嚼慢咽的看完这篇文章，保证你学会正则。</p><p>这篇文章对正则的细枝末节都有详细的介绍，我摘抄了部分重要的代码，和总结了6个方法。</p><p>剩下的匹配规则、关键字等，以后会一一补充。</p><ul><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp" target="_blank" rel="noopener">MDN-RegExp</a></p></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String" target="_blank" rel="noopener">MDN-String</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
