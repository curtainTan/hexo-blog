<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>9.29-每日一题--二叉树后序遍历</title>
      <link href="/2020/09/29/9-29-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
      <url>/2020/09/29/9-29-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<ol start="145"><li>二叉树的后序遍历</li></ol><a id="more"></a><p><a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/" target="_blank" rel="noopener">145. 二叉树的后序遍历</a></p><p>给定一个二叉树，返回它的 后序 遍历。</p><style>.bg-pre {    padding: 10px;    background: rgba(33,150,243,.2);    border-radius: 4px;}</style><p>示例:</p><pre class="bg-pre" > 输入: [1,null,2,3]     1    \     2    /   3 </pre><p>输出: [3,2,1]<br>进阶: 递归算法很简单，你可以通过迭代算法完成吗？</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><ol><li>当前节点存在左节点，递归左节点</li><li>当前节点存在右节点，递归右节点</li><li>将当前节点的值存到结果中</li></ol><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> postorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 保存最后结果</span></span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="keyword">let</span> dfs = <span class="function">(<span class="params"> node </span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>( !node ) <span class="keyword">return</span></span><br><span class="line">        <span class="comment">// 左右子树递归</span></span><br><span class="line">        node.left &amp;&amp; dfs( node.left )</span><br><span class="line">        node.right &amp;&amp; dfs( node.right )</span><br><span class="line">        res.push( node.val )</span><br><span class="line">    &#125;</span><br><span class="line">    dfs( root )</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js类型转换</title>
      <link href="/2020/09/28/js%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
      <url>/2020/09/28/js%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p>js 中类型转换分为显式类型转换和隐式类型转换</p><ol><li>显式类型转换方法：<code>Number()</code>、<code>parseInt()</code>、<code>parseFloat()</code>、<code>toString()</code>、<code>String</code>、<code>Boolean()</code></li><li>隐式类型转换：逻辑运算符（ &amp;&amp;、||、！ ）、运算符（+、-、*、/）、关系运算符（&gt;、&lt;、&lt;=、&gt;=）、相等运算符（==）、if/while 条件运算</li></ol><h2 id="一、显式类型转换"><a href="#一、显式类型转换" class="headerlink" title="一、显式类型转换"></a>一、显式类型转换</h2><h3 id="1-1-Number"><a href="#1-1-Number" class="headerlink" title="1.1 Number()"></a>1.1 Number()</h3><blockquote><p>Number() 能将任意类型的参数转换为数值类型</p></blockquote><p>规则如下：</p><ul><li>布尔值：true 和 false 分别被转换为 1 和 0</li><li>数字：返回本身</li><li>null：返回 0</li><li>undefined：返回 NaN </li><li>字符串：<ul><li>只包含数字（<code>0X</code>/<code>0x</code>开头的十六进制数字字符串，允许正负号），返回十进制数</li><li>包含有效浮点数，返回浮点数</li><li>空字符串，返回0</li><li>不是以上形式的字符串，返回 NaN</li></ul></li><li>Symbol：抛错</li><li>对象：调用对象的 <code>valueOf()</code> 方法，然后依据前面的规则转换返回的值，如果转换的结果是 <code>NaN</code>，则调用对象的 <code>toString()</code> 方法，再次按照前面的规则转换返回的字符串</li></ul><p><strong>强调：</strong></p><blockquote><p>当对象转换为数字时，调用对象的 <code>valueOf()</code> 方法，然后依据前面的规则转换返回的值，如果转换的结果是引用类型，则调用对象的 <code>toString()</code> 方法，再次按照前面的规则转换返回的字符串，如果返回还是引用类型，最后返回 <code>NaN</code></p></blockquote><style>table th:first-of-type {    width: 100px;}table th:nth-of-type(3) {    width: 100px;}</style><p>部分内置对象默认调用的 <code>valueOf()</code> 方法的行为：</p><table><thead><tr><th>对象</th><th>返回值</th><th>类型</th></tr></thead><tbody><tr><td>Boolean</td><td>布尔值</td><td>基础类型</td></tr><tr><td>Date</td><td>返回毫秒数-从1970.1.1 0:0:0 开始计算</td><td>基础类型</td></tr><tr><td>Nunber</td><td>数字值</td><td>基础类型</td></tr><tr><td>String</td><td>字符串值</td><td>基础类型</td></tr><tr><td>Array</td><td>返回数组本身</td><td>对象类型</td></tr><tr><td>Object</td><td>对象本身</td><td>对象类型</td></tr><tr><td>Function</td><td>函数本身</td><td>对象类型</td></tr></tbody></table><p><strong>注意：</strong></p><p>当数组只有一个元素时，会将第一个元素提取出来做转换</p><p><strong>案例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Number() 类型转换</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">true</span>)        <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">null</span>)        <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">undefined</span>)   <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">"0x15"</span>)      <span class="comment">// 21   0x15 -&gt; 16+5=21</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">""</span>)          <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">"-0X16"</span>)     <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="built_in">Symbol</span>(<span class="number">12</span>))  <span class="comment">// error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// valueOf() 方法返回值</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].valueOf()     <span class="comment">// [1, 2, 3, 4]  对象类型</span></span><br><span class="line"><span class="built_in">Number</span>( [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] )     <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Number</span>( [ <span class="number">12</span> ] )        <span class="comment">// 12</span></span><br><span class="line"><span class="built_in">Number</span>( [ <span class="string">"12"</span> ] )      <span class="comment">// 12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> empty = [].valueOf()   <span class="comment">// []  对象类型</span></span><br><span class="line"><span class="built_in">Number</span>( empty )   <span class="comment">// 0  [].valueOf()=[]-&gt;NaN, 再调用empty.toString()='' Number("") -&gt; 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Boolean</span>().valueOf()     <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>( <span class="built_in">Boolean</span>() )     <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">date.valueOf()          <span class="comment">// 1601345955850</span></span><br><span class="line"><span class="built_in">Number</span>( date )          <span class="comment">// 1601345955850</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123; <span class="keyword">var</span> a = <span class="number">1</span> &#125;</span><br><span class="line">fn.valueOf()            <span class="comment">// fn()&#123; var a = 1 &#125;</span></span><br><span class="line"><span class="built_in">Number</span>( fn )            <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">"tan"</span> &#125;</span><br><span class="line">obj.valueOf()           <span class="comment">// &#123;name: "tan"&#125;   // 对象本身</span></span><br><span class="line"><span class="built_in">Number</span>( fn )            <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><h3 id="1-2-parseInt-param，radix"><a href="#1-2-parseInt-param，radix" class="headerlink" title="1.2 parseInt( param，radix )"></a>1.2 parseInt( param，radix )</h3><p>传入两个参数，第一个是需要进行转换的参数，第二是转换的进制，最终返回十进制数字或NaN</p><h4 id="1-2-1-第一个参数是字符串："><a href="#1-2-1-第一个参数是字符串：" class="headerlink" title="1.2.1 第一个参数是字符串："></a>1.2.1 第一个参数是字符串：</h4><ol><li>忽略字符串前面的空格，从非空字符开始计算</li><li>空字符串返回 NaN</li><li>第一个字符超过进制，返回 NaN，进制从0-9a-z开始计算，最大进制为 36</li><li>如果第一个字符在进制内，则解析到第一个超出进制的符号为止</li></ol><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">"  0111"</span>)      <span class="comment">// 111</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">""</span>)            <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"1c"</span>, <span class="number">13</span>)      <span class="comment">// 25  13+12</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"1cd"</span>, <span class="number">13</span>)     <span class="comment">// 25  13+12</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"dc1"</span>, <span class="number">13</span>)     <span class="comment">// NaN d进制超过13</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"-1cd"</span>, <span class="number">13</span>)    <span class="comment">// -25</span></span><br></pre></td></tr></table></figure><h4 id="1-2-2-第一个参数是数字："><a href="#1-2-2-第一个参数是数字：" class="headerlink" title="1.2.2 第一个参数是数字："></a>1.2.2 第一个参数是数字：</h4><ol><li>第一个参数不是以 0 开头的，以第二个参数作为进制进行转换</li><li>第一个参数是以 0 开头的，先进行八进制转换，再以第二个参数作为进制进行转换</li><li>第一个参数是以 <code>0X/0x</code> 开头的，先进行十六进制转换，在以第二个参数作为进制进行转换</li></ol><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="number">111</span>)       <span class="comment">// 111</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">13</span>, <span class="number">16</span>)    <span class="comment">// 19   16+3</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">013</span>, <span class="number">16</span>)   <span class="comment">// 17   013-&gt;8+3=11  11-&gt;16+1=17</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">0X13</span>, <span class="number">16</span>)  <span class="comment">// 25   0X13-&gt;16+3=19  19-&gt;16+9=25</span></span><br></pre></td></tr></table></figure><h4 id="1-2-3-第一个参数是-null-或-undefined"><a href="#1-2-3-第一个参数是-null-或-undefined" class="headerlink" title="1.2.3 第一个参数是 null 或 undefined"></a>1.2.3 第一个参数是 <code>null</code> 或 <code>undefined</code></h4><p>返回 <code>NaN</code></p><h4 id="1-2-4-第一个元素是数组"><a href="#1-2-4-第一个元素是数组" class="headerlink" title="1.2.4 第一个元素是数组"></a>1.2.4 第一个元素是数组</h4><p>取数组的第一个元素作为第一个参数，再进行进制转换</p><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>([<span class="number">11</span>], <span class="number">16</span>)  <span class="comment">// 17</span></span><br></pre></td></tr></table></figure><h4 id="1-2-5-第一个参数是-Symbol-类型"><a href="#1-2-5-第一个参数是-Symbol-类型" class="headerlink" title="1.2.5 第一个参数是 Symbol 类型"></a>1.2.5 第一个参数是 Symbol 类型</h4><p>抛出错误</p><h3 id="1-3-parseFloat-string-string"><a href="#1-3-parseFloat-string-string" class="headerlink" title="1.3 parseFloat( string: string )"></a>1.3 parseFloat( string: string )</h3><p>将参数转为浮点型数字，没有进制转换，转换规则与 <code>parseInt</code> 基本相同</p><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseFloat</span>( <span class="string">"123.45abc"</span> )   <span class="comment">// 123.45</span></span><br><span class="line"><span class="built_in">parseFloat</span>( [<span class="string">"123.45abc"</span>, <span class="string">"78"</span>, <span class="string">"9"</span>] )   <span class="comment">// 123.45</span></span><br></pre></td></tr></table></figure><h3 id="1-4-toString-方法"><a href="#1-4-toString-方法" class="headerlink" title="1.4 toString() 方法"></a>1.4 toString() 方法</h3><p>转换规则如下：</p><ol><li>Number类型：输出数字字符串，函数可以填入转换进制</li><li><code>null</code> 或 <code>undefined</code>：抛错</li><li>数组：将数组展开，空数组返回 <code>&quot;&quot;</code></li><li>对象：返回 <code>[object Object]</code></li><li>Date：返回日期的文字表示法</li><li>函数：函数的字符串</li><li>Symbol：输出 Symbol 字符串</li><li>Boolean：返回字符串</li></ol><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">29</span></span><br><span class="line">num.toString()      <span class="comment">// 29</span></span><br><span class="line">num.toString(<span class="number">15</span>)    <span class="comment">// 1e    15+14   14-&gt;e</span></span><br><span class="line"><span class="number">29.5</span> .toString(<span class="number">15</span>)  <span class="comment">// 1e.7777777777778</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nul = <span class="literal">null</span></span><br><span class="line">nul.toString()      <span class="comment">// 抛错</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].toString()  <span class="comment">// 1,2,3</span></span><br><span class="line">[&#123;<span class="attr">name</span>:<span class="string">"tan"</span>&#125;,<span class="number">1</span>,<span class="number">3</span>].toString()   <span class="comment">// [object Object],1,3</span></span><br><span class="line">[].toString()   <span class="comment">// ''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>:<span class="string">"tan"</span>&#125;</span><br><span class="line">obj.toString()  <span class="comment">// [object Object]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">date.toString() <span class="comment">// Tue Sep 29 2020 18:20:50 GMT+0800 (中国标准时间)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="string">"tan"</span>) &#125;</span><br><span class="line">fn.toString()   <span class="comment">// function fn()&#123; console.log("tan") &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tan = <span class="built_in">Symbol</span>(<span class="string">"tan"</span>)</span><br><span class="line">tan.toString()  <span class="comment">// Symbol(tan)</span></span><br><span class="line"></span><br><span class="line"><span class="literal">true</span>.toString() <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="1-5-String-value-any"><a href="#1-5-String-value-any" class="headerlink" title="1.5 String( value?: any )"></a>1.5 String( value?: any )</h3><p>将参数转为字符串，与 <code>toString</code> 转换规则基本类似，只能传一个参数</p><p>与 <code>toString()</code> 不同，<code>String()</code> 可以转换 <code>null</code> 和 <code>undefined</code></p><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>(<span class="number">123</span>)     <span class="comment">// 123</span></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">true</span>)    <span class="comment">// true</span></span><br><span class="line"><span class="built_in">String</span>(&#123;&#125;)      <span class="comment">// [object Object]</span></span><br><span class="line"><span class="built_in">String</span>([])      <span class="comment">// ""</span></span><br><span class="line"><span class="built_in">String</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) <span class="comment">// 1,2,3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">null</span>)    <span class="comment">// null </span></span><br><span class="line"><span class="built_in">String</span>( <span class="literal">undefined</span> ) <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="string">"tan"</span>) &#125;</span><br><span class="line"><span class="built_in">String</span>(fn)     <span class="comment">// function fn()&#123; console.log("tan") &#125;</span></span><br></pre></td></tr></table></figure><h3 id="1-6-Boolean-value-any"><a href="#1-6-Boolean-value-any" class="headerlink" title="1.6 Boolean( value?: any )"></a>1.6 Boolean( value?: any )</h3><p><code>undefined</code>、<code>null</code>、<code>false</code>、<code>&#39;&#39;</code>、<code>0</code>，<code>+-0</code>、<code>NaN</code> 转换为 <code>false</code></p><p>其余都是 <code>true</code>，负数转为 <code>true</code></p><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Boolean</span>(<span class="literal">undefined</span>)  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">null</span>)       <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="number">0</span>)          <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="number">-0</span>)         <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">NaN</span>)        <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="number">-34</span>)        <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Boolean</span>([])         <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="二、隐式类型转换"><a href="#二、隐式类型转换" class="headerlink" title="二、隐式类型转换"></a>二、隐式类型转换</h2><blockquote><p>逻辑运算符（ &amp;&amp;、||、！ ）、运算符（+、-、*、/）、关系运算符（&gt;、&lt;、&lt;=、&gt;=）、相等运算符（==）、if/while 条件运算</p></blockquote><h3 id="2-1-条件判断"><a href="#2-1-条件判断" class="headerlink" title="2.1 条件判断"></a>2.1 条件判断</h3><blockquote><p>&amp;&amp;、||、!、if/while 条件判断</p></blockquote><p>会将数据转换成 Boolean 类型，转换规则同 Boolean 强制类型转换</p><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( [] )      <span class="comment">// true</span></span><br><span class="line"><span class="keyword">if</span>( ![] )     <span class="comment">// false</span></span><br><span class="line"><span class="keyword">if</span>( <span class="number">-1</span> )      <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="2-2-运算符"><a href="#2-2-运算符" class="headerlink" title="2.2 运算符"></a>2.2 运算符</h3><blockquote><p>运算符：+ - * /</p></blockquote><h4 id="2-2-1-运算符"><a href="#2-2-1-运算符" class="headerlink" title="2.2.1 + 运算符"></a>2.2.1 + 运算符</h4><p>用于数字相加和字符串拼接</p><ol><li>当一侧为 <code>String</code> 类型时，被识别为字符串拼接，优先将另一侧调用 <code>String()</code> 转换为字符串</li><li>当一侧为 <code>Number</code> 类型时，另一侧为原始类型时，将原始类型调用 <code>Number()</code> 转化为数字类型</li><li>当一侧为 <code>Number</code> 类型时，另一侧为引用类型时，将引用类型作为参数调用 <code>String()</code> 和 <code>Number</code> 类型转换为字符串后拼接</li></ol><p>以上三点，优先级从高到低</p><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span> + <span class="string">"123"</span>   <span class="comment">// 123123</span></span><br><span class="line"><span class="number">123</span> + <span class="literal">true</span>    <span class="comment">// 124</span></span><br><span class="line"><span class="number">123</span> + <span class="literal">null</span>    <span class="comment">// 123</span></span><br><span class="line"><span class="string">"1"</span> + <span class="number">4</span> + <span class="number">5</span> + <span class="string">"6"</span> <span class="comment">// 1456</span></span><br><span class="line"></span><br><span class="line"><span class="number">123</span> + &#123;&#125;      <span class="comment">// 123[object Object]   &#123;&#125; -&gt; String(&#123;&#125;) -&gt; [object Object]</span></span><br><span class="line"><span class="number">123</span> + <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;&#125;  <span class="comment">// 123function fn()&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nul = <span class="literal">null</span></span><br><span class="line"><span class="string">"tan"</span> + nul     <span class="comment">// tannull    null -&gt; String(null) -&gt; null</span></span><br><span class="line"></span><br><span class="line"><span class="number">12</span> + [ <span class="number">5</span>, <span class="number">4</span> ]   <span class="comment">// 125,4    [5, 4] -&gt; String([5,4]) =&gt; 5,4</span></span><br></pre></td></tr></table></figure><h4 id="2-2-1-运算符-1"><a href="#2-2-1-运算符-1" class="headerlink" title="2.2.1 - * / 运算符"></a>2.2.1 - * / 运算符</h4><p>将各种非 <code>Number</code> 类型隐式调用 <code>Number()</code> 函数将值转换为数值类型，如果其中一个转换为 <code>NaN</code>，结果为 <code>NaN</code></p><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span> + <span class="literal">true</span> <span class="comment">// 2</span></span><br><span class="line"><span class="number">2</span> - <span class="literal">true</span>    <span class="comment">// 3</span></span><br><span class="line"><span class="number">5</span> - <span class="number">012</span>     <span class="comment">// -5    012 -&gt; Number(012) -&gt; 8+2=10</span></span><br><span class="line"><span class="number">5</span> - <span class="number">0x12</span>    <span class="comment">// -13   0x12 -&gt; Number(0x12) -&gt; 16+2=18</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span> - [ <span class="number">2</span> ]    <span class="comment">// 3  [2] -&gt; Number([2]) -&gt; 2</span></span><br><span class="line"><span class="number">5</span> - [ <span class="number">2</span>, <span class="number">3</span> ] <span class="comment">// NaN [2, 3] -&gt; Number([2, 3]) -&gt; NaN</span></span><br><span class="line"><span class="number">5</span> - &#123;&#125;       <span class="comment">// NaN  &#123;&#125; -&gt; Number(&#123;&#125;) -&gt; NaN</span></span><br></pre></td></tr></table></figure><h3 id="2-3-关系操作符"><a href="#2-3-关系操作符" class="headerlink" title="2.3 关系操作符"></a>2.3 关系操作符</h3><blockquote><p>关系操作符：==、&lt;、&gt;、&lt;=、&lt;= </p></blockquote><h4 id="2-3-1-lt-、-gt-、-lt-、-lt-操作符"><a href="#2-3-1-lt-、-gt-、-lt-、-lt-操作符" class="headerlink" title="2.3.1 &lt;、&gt;、&lt;=、&lt;= 操作符"></a>2.3.1 &lt;、&gt;、&lt;=、&lt;= 操作符</h4><ol><li>两个操作值都是数值，进行数值比较</li><li>都是字符串，比较字符对应的字符编码值</li><li>一方是 Symbol，抛错</li><li>除了上述情况，都使用 <code>Number()</code> 函数进行隐式转换，再进行比较</li></ol><p><strong>注意：</strong></p><blockquote><p>NaN 与任何数值比较都不相等，都返回 false</p></blockquote><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">26</span>] &gt; [<span class="number">12</span>]     <span class="comment">// true     [26] -&gt; Number([26]) -&gt; 26    [24] -&gt; 24 </span></span><br><span class="line"><span class="string">"abc"</span> &lt; <span class="string">"acb"</span>   <span class="comment">// true     b &lt; c</span></span><br><span class="line"><span class="number">77</span> &gt; <span class="string">"76"</span>       <span class="comment">// true</span></span><br><span class="line"><span class="number">77</span> &gt; <span class="string">"76a"</span>      <span class="comment">// false    76a -&gt; Number("76a") -&gt; NaN</span></span><br><span class="line"><span class="number">77</span> &gt; []         <span class="comment">// true     Number([])  -&gt; 0</span></span><br><span class="line"></span><br><span class="line"><span class="number">18</span> &gt; <span class="string">"0x11"</span>     <span class="comment">// true    0x11 -&gt; Number(0x11) -&gt; 16+1=17</span></span><br><span class="line"><span class="number">17</span> &gt; <span class="string">"0x11"</span>     <span class="comment">// false   0x11 -&gt; Number(0x11) -&gt; 16+1=17</span></span><br></pre></td></tr></table></figure><h4 id="2-3-1-操作符"><a href="#2-3-1-操作符" class="headerlink" title="2.3.1 == 操作符"></a>2.3.1 == 操作符</h4><ol><li><code>NaN</code> 不与其他任何值相等</li><li><code>null</code> 与 <code>undefined</code> 进行比较为 <code>true</code></li><li><code>null</code>、<code>undefined</code> 与其他任何值比较结果都为 <code>false</code></li></ol><ol><li><code>Boolean</code> 与其他类型比较，<code>Boolean</code> 先转换为 <code>Number</code></li><li><code>String</code> 与 <code>Number</code> 进行比较，<code>String</code> 转换为 <code>Number</code></li><li>引用类型与基础类型进行比较，引用类型先转换为基础类型（调用 ToPrimitive）</li><li>引用类型与引用类型，直接判断是否指向同一对象</li></ol><p><strong>注意：</strong></p><blockquote><p>如果没有部署 [Symbol.toPrimitive] 接口，则先返回 <code>valudeOf()</code> 的值，若返回的不是基础类型，再返回 <code>toString()</code> 的值，若返回的不是基础类型的值，则抛出错误</p></blockquote><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[] == ![]    <span class="comment">// true</span></span><br><span class="line"><span class="comment">// ![] -&gt; false</span></span><br><span class="line"><span class="comment">// 再运用规则一：false -&gt; 0</span></span><br><span class="line"><span class="comment">// 再运用规则三：[] 调用 toPrimitive 返回 0</span></span><br><span class="line"><span class="comment">// 0 == 0   返回 true</span></span><br><span class="line"></span><br><span class="line"><span class="string">"[object Object]"</span> = &#123;&#125;  <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 引用类型与基础类型进行比较，引用类型先调用 ToPrimitive 函数，</span></span><br><span class="line"><span class="comment">// 没有 ToPrimitive 函数，则调用 &#123;&#125;.valueOf() 返回引用类型的值</span></span><br><span class="line"><span class="comment">// 返回值不是基础类型，继续调用 &#123;&#125;.toString() 返回 [object Object]</span></span><br></pre></td></tr></table></figure><h2 id="附加知识点–对象转换成原始数据类型"><a href="#附加知识点–对象转换成原始数据类型" class="headerlink" title="附加知识点–对象转换成原始数据类型"></a>附加知识点–对象转换成原始数据类型</h2><p>如果部署了 [Symbol.toPrimitive] 接口，那么调用此接口，若返回的不是基础数据类型，抛出错误。</p><p>如果没有部署 [Symbol.toPrimitive] 接口，那么先返回 valueOf() 的值，若返回的不是基础类型的值，再返回 toString() 的值，若返回的不是基础类型的值， 则抛出异常。</p><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先调用 valueOf, 后调用 toString</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    [<span class="built_in">Symbol</span>.toPrimitive]() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">200</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    valueOf() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">300</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    toString() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Hello'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果 valueOf 返回的不是基本数据类型，则会调用 toString， </span></span><br><span class="line"><span class="comment">//如果 toString 返回的也不是基本数据类型，会抛出错误</span></span><br><span class="line"><span class="built_in">console</span>.log(obj + <span class="number">200</span>); <span class="comment">//400</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>js 类型转换分为显式转换和隐式转换</p><p>通过本文可知，隐式转换也是间接的调用显式转换的方法来进行转换的，但是我们需要记住隐式转换的规则</p><p><strong>感谢看完本篇文章，共勉-</strong></p><h2 id="参考材料"><a href="#参考材料" class="headerlink" title="参考材料"></a>参考材料</h2><p><a href="https://juejin.im/post/6844903828093927431#heading-6" target="_blank" rel="noopener">刘小夕–JS 类型转换的规则是什么？</a></p><p><a href="https://juejin.im/post/6869699873407500295" target="_blank" rel="noopener">粥里有勺糖–offer收割机–js的隐式类型转换规则整理</a></p><p><a href="https://chinese.freecodecamp.org/news/javascript-implicit-type-conversion/" target="_blank" rel="noopener">freeCodeCamp–Javascript 隐式类型转换，一篇就够了！</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
            <tag> 科普 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红宝书第二章-HTML中的js</title>
      <link href="/2020/09/28/%E7%BA%A2%E5%AE%9D%E4%B9%A6%E7%AC%AC%E4%BA%8C%E7%AB%A0-HTML%E4%B8%AD%E7%9A%84js/"/>
      <url>/2020/09/28/%E7%BA%A2%E5%AE%9D%E4%B9%A6%E7%AC%AC%E4%BA%8C%E7%AB%A0-HTML%E4%B8%AD%E7%9A%84js/</url>
      
        <content type="html"><![CDATA[<h2 id="一、-lt-script-gt-元素"><a href="#一、-lt-script-gt-元素" class="headerlink" title="一、&lt;script&gt; 元素"></a>一、&lt;script&gt; 元素</h2><p><code>&lt;script&gt;</code> 元素由网景公司创造出来，并在网景浏览器2中实现，<code>&lt;script&gt;</code> 元素有以下 8 个属性</p><style>table th:first-of-type {    width: 130px;}table th:nth-of-type(2) {    width: 100px;}</style><table><thead><tr><th>属性名</th><th>填写</th><th>说明</th></tr></thead><tbody><tr><td>async</td><td>选填</td><td>表示立即下载该脚本，但不阻止其他页面操作，比如下载资源或等待掐他脚本加载</td></tr><tr><td>charset</td><td>可选</td><td>使用 src 属性指定的代码字符集，很少使用</td></tr><tr><td>corssorigin</td><td>可选</td><td>配置相关请求的CORS设置，默认不使用 CORS</td></tr><tr><td>defer</td><td>可选</td><td>立即下载脚本，不阻止页面其他操作，在文档解析完成后再执行脚本</td></tr><tr><td>integrity</td><td>可选</td><td>允许对比接收到的资源和指定的加密签名以验证资源的完整性，如果接收到的资源的签名与这个属性指定的签名不匹配，页面会报错，脚本不执行</td></tr><tr><td>language</td><td>废弃</td><td>用来标识代码块中的脚本语言，如 <code>VB</code>、<code>JS</code></td></tr><tr><td>src</td><td>可选</td><td>包含要执行代码的外部文件</td></tr><tr><td>type</td><td>可选</td><td>代替<code>language</code>，表示代码块中脚本语言的内容类型，一般是<code>text/javascript</code>，如果这个值是 <code>module</code> ，则代码会被当成 ES6 模块，而且只有这时候代码中才能出现 <code>import</code> 和 <code>export</code> 关键字</td></tr></tbody></table><p><strong>注意：</strong> 使用了 src 属性的 <code>&lt;script&gt;</code> 元素不应该再在元素中包含其他 javascript 代码，如果两者都提供的话，则浏览器只会下载并执行脚本，从而忽略行内代码</p><h3 id="lt-script-gt-标签位置"><a href="#lt-script-gt-标签位置" class="headerlink" title="&lt;script&gt; 标签位置"></a><code>&lt;script&gt;</code> 标签位置</h3><p>由于 script 标签会打断 DOM 的解析，所以将脚本放置在文档首部会阻塞 DOM 的解析，导致页面加载变慢，所以一般将 script 标签放在 body 元素中的内容后面，页面会在处理 js 代码之前完成渲染页面</p><h3 id="推迟脚本执行"><a href="#推迟脚本执行" class="headerlink" title="推迟脚本执行"></a>推迟脚本执行</h3><p>HTML4.0.1 为 script 标签定义了 defer 属性，这个属性表示脚本在整个页面解析完成之后再运行，HTML5 规范要求脚本要求脚本按照他们出现的顺序执行，因此第一个推迟的脚本会在第二个推迟的脚本之前运行（defer脚本按顺序执行），并且两者都会在 <code>DOMContentLoaded</code> 事件之前执行</p><h3 id="异步执行脚本"><a href="#异步执行脚本" class="headerlink" title="异步执行脚本"></a>异步执行脚本</h3><p>HTML5 为 script 元素定义了 async 属性，async 与 defer 类似，脚本的加载不会阻塞 DOM 的解析，但是 async 脚本加载完成会立即执行，如果此时还在进行 ODM 的解析，会打断 DOM 解析，被标记为 async 的脚本不能保证按照他们出现的顺序执行，异步脚本会在页面的 <code>load</code> 事件前执行</p><h3 id="动态加载脚本"><a href="#动态加载脚本" class="headerlink" title="动态加载脚本"></a>动态加载脚本</h3><p>除了 script 标签，还有其他方式加载脚本，</p><ol><li>使用 js 创建 script 标签</li><li>在文档头部预加载：<code>&lt;link rel=&quot;preload&quot; href=&quot;a.js&quot;&gt;</code></li></ol><h4 id="lt-noscript-gt-元素"><a href="#lt-noscript-gt-元素" class="headerlink" title="&lt;noscript&gt; 元素"></a><code>&lt;noscript&gt; 元素</code></h4><p>针对早期浏览器不支持 javascript 的问题，需要一个页面优雅降级的处理方案，<code>&lt;noscript&gt;</code> 元素出现，对不支持 javascript 的浏览器提供替代内容，与 <code>&lt;canvas&gt;</code> 元素中添加内容的目的一样，用于提示用户不支持相关操作</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li>使用外部 javascript 文件时，必须将 src 属性设置为包含文件的 URL</li><li>对于不推迟执行的脚本，通常会把 <code>&lt;script&gt;</code> 元素放到页面尾部，介于主内容尾部和<code>&lt;/body&gt;</code>标签之前</li><li>使用 defer 属性会把脚本推迟到文档渲染完毕之后执行，推迟的脚本总是按照他们被列出的次序执行</li><li>使用 async 属性异步加载脚本，让脚本加载完成立马执行</li><li>通过使用 <code>&lt;noscript&gt;</code> 元素指定浏览器不支持脚本时显示的内容</li></ol>]]></content>
      
      
      <categories>
          
          <category> 红宝书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科普 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.28-每日一题-填充节点的next指针</title>
      <link href="/2020/09/28/9-28-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
      <url>/2020/09/28/9-28-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<ol start="117"><li>填充每个节点的下一个右侧节点指针 II</li></ol><p><fancybox><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/15/117_sample.png" alt=""></fancybox></p><a id="more"></a><h2 id="117-填充每个节点的下一个右侧节点指针-II"><a href="#117-填充每个节点的下一个右侧节点指针-II" class="headerlink" title="117. 填充每个节点的下一个右侧节点指针 II"></a><a href="https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node-ii/" target="_blank" rel="noopener">117. 填充每个节点的下一个右侧节点指针 II</a></h2><p>给定一个二叉树</p><blockquote><p>struct Node {<br>   int val;<br>   Node *left;<br>   Node *right;<br>   Node *next;<br>}</p></blockquote><p>填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 NULL。</p><p>初始状态下，所有 next 指针都被设置为 NULL。</p><p><fancybox><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/15/117_sample.png" alt=""></fancybox></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li>层序遍历，将节点一层一层的放到数组内</li><li>使用一个变量记录数组的长度</li><li>遍历这个长度的元素（一层的元素）， 将前一个元素的 next 指向下一个元素即可</li></ol><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * // Definition for a Node.</span></span><br><span class="line"><span class="comment"> * function Node(val, left, right, next) &#123;</span></span><br><span class="line"><span class="comment"> *    this.val = val === undefined ? null : val;</span></span><br><span class="line"><span class="comment"> *    this.left = left === undefined ? null : left;</span></span><br><span class="line"><span class="comment"> *    this.right = right === undefined ? null : right;</span></span><br><span class="line"><span class="comment"> *    this.next = next === undefined ? null : next;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;Node&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;Node&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> connect = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( !root ) <span class="keyword">return</span> root</span><br><span class="line">    <span class="comment">// 将首节点存入数组</span></span><br><span class="line">    <span class="keyword">let</span> arr = [ root ]</span><br><span class="line">    <span class="keyword">while</span>( arr.length )&#123;</span><br><span class="line">        <span class="comment">// 按层遍历元素</span></span><br><span class="line">        <span class="keyword">let</span> size = arr.length</span><br><span class="line">        <span class="keyword">while</span>( size-- )&#123;</span><br><span class="line">            <span class="keyword">let</span> item = arr.shift()</span><br><span class="line">            <span class="keyword">if</span>( size )&#123;</span><br><span class="line">                item.next = arr[<span class="number">0</span>]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将子节点存入数组</span></span><br><span class="line">            item.left &amp;&amp; arr.push( item.left )</span><br><span class="line">            item.right &amp;&amp; arr.push( item.right )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红宝书第一章--什么是js</title>
      <link href="/2020/09/27/%E7%BA%A2%E5%AE%9D%E4%B9%A6%E7%AC%AC%E4%B8%80%E7%AB%A0-%E4%BB%80%E4%B9%88%E6%98%AFjs/"/>
      <url>/2020/09/27/%E7%BA%A2%E5%AE%9D%E4%B9%A6%E7%AC%AC%E4%B8%80%E7%AB%A0-%E4%BB%80%E4%B9%88%E6%98%AFjs/</url>
      
        <content type="html"><![CDATA[<h3 id="js-历史回顾"><a href="#js-历史回顾" class="headerlink" title="js 历史回顾"></a>js 历史回顾</h3><ol><li>问世缘由</li></ol><blockquote><p>1995年，javascript 问世。在此之前，要验证某个必填字段是否已填写，或某个输入值是否有效，需要与服务端进行一次往返通信，js 的用途就是代替服务端语言处理输入验证。</p></blockquote><ol start="2"><li>ECMAScript 与 javascript 的关系</li></ol><blockquote><p>1995 年 Brandan Eich 花了 10 天写出 javascript，并把它内置到网景浏览器2中，让 web 大受欢迎，此时，微软决定向 IE 投入更多资源，网景浏览器3发布不久，微软发布了 IE3，其中包含了自己名为 JScript 的 javascript 实现。<br>微软的 javascript 实现意味着出现了两个版本的 javascript：网景的 javascript 和 微软的 JScript，1997 年，javascript1.1 作为题提案被提交给欧洲计算机制造商协会（Ecma），第 39 技术委员会承担了“标准化一门通用、跨平台、厂商中立的脚本语言的语法和语义”的任务，此后，各家浏览器均以 ECMAScript 作为自己 JavaScript 实现的一句，虽然具体实现各不相同</p></blockquote><h3 id="JavaScript-的实现"><a href="#JavaScript-的实现" class="headerlink" title="JavaScript 的实现"></a>JavaScript 的实现</h3><p>虽然 JavaScript 和 ECMAScript 基本上是同义词，但是 js 不限于 ECMAScript，完整的 JavaScript 包含以下三个部分：</p><ol><li>核心（ECMAScript）</li><li>文档对象模型（DOM）</li><li>浏览器对象模型（BOM）</li></ol><h4 id="ECMAScript-概述"><a href="#ECMAScript-概述" class="headerlink" title="ECMAScript 概述"></a>ECMAScript 概述</h4><p>ECMAScript 作为一门语言的基准定义，目的是在它之上再构建更稳定的脚本语言</p><p>web 浏览器只是 ECMAScript 实现的一种宿主环境，宿主环境提供 ECMAScript 的基准实现和自身交互必须的扩展。扩展（比如 DOM 和 BOM）使用 ECMAScript 核心类型和语法，提供特定环境的额外功能</p><p><strong>ECMAScript 版本概述</strong></p><ol><li>ES1：本质上与网景的JavaScript1.1相同，删除所有浏览器特定的代码</li><li>ES2：只做了一些编校工作</li><li>ES3：第一次对标准进行更新，新增字符串处理、错误定义和数值输出，添加了正则、新的控制语句、try/catch的支持</li><li>ES4：进行彻底修订，包括强类型变量、新语句和数据结构、真正的类和经典的继承，以及操作数据的新手段，为了避免改动太大，又制定了 ES3.1</li><li>ES5：ES3.1 变成了 ES5，于2009年12月发布，添加了序列化和解析 JSON 数据的 JSON 对象、继承、增强 ES 引擎解释和执行代码能力的严格模式</li><li>ES6：于2015年6月发布，这一版包含了有史以来最重要的一批增强特性，正式支持了类、模块、迭代器、生成器、箭头函数、期约、反射、代理和众多新的数据类型</li><li>ES7：于2016年6月发布，新增少量api，如 <code>Array.prototype.includes</code> 和指数操作</li><li>ES8：完成于2017年6月，添加异步函数（async/await）、<code>SharedArrayBuffer</code> 等</li><li>ES9：发布于2018年6月，对原始对象添加方法，如正则和promise</li><li>ES10：发布于2019年6月，对原始对象添加方法，如数组，并添加新的语法如：<code>obj?.name?.first</code></li></ol><h4 id="DOM-简介"><a href="#DOM-简介" class="headerlink" title="DOM 简介"></a>DOM 简介</h4><p>DOM 通过创建表示文档的树，让开发者可以随心所欲的控制网页中的内容和结构。使用 DOM API，可以轻松的删除、添加、替换、修改节点</p><h4 id="BOM简介"><a href="#BOM简介" class="headerlink" title="BOM简介"></a>BOM简介</h4><p>IE3 和 网景浏览器3 提供了浏览器对象模型 API，用于支持访问和操作浏览器的窗口，它是唯一一个没有相关标准的 JavaScript 实现。但是 HTML5 正在规范尽可能多的 BOM 特性</p><p><strong>BOM的能力</strong></p><ol><li>弹出新浏览器窗口</li><li>移动、缩放和关闭浏览器窗口</li><li>navigator 对象，获取浏览器相关信息</li><li>location 对象，网页信息</li><li>screen 对象，屏幕信息</li><li>performance 对象，提供浏览器占用内存、导航行为等信息</li><li>cookie </li><li>其他自定义对象：<code>XMLHttpRequest</code> 和 <code>ActiveXObject</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> 红宝书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科普 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.27-每日一题-二叉搜索树的最近公共祖先</title>
      <link href="/2020/09/27/9.27-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
      <url>/2020/09/27/9.27-%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<ol start="235"><li>二叉搜索树的最近公共祖先</li></ol><a id="more"></a><h2 id="235-二叉搜索树的最近公共祖先"><a href="#235-二叉搜索树的最近公共祖先" class="headerlink" title="235. 二叉搜索树的最近公共祖先"></a><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree/" target="_blank" rel="noopener">235. 二叉搜索树的最近公共祖先</a></h2><p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</p><p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p><p>例如，给定如下二叉搜索树:  root = [6,2,8,0,4,7,9,null,null,3,5]</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/binarysearchtree_improved.png" alt=""></p><p><strong>示例 1:</strong></p><blockquote><p>输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8<br>输出: 6<br>解释: 节点 2 和节点 8 的最近公共祖先是 6。</p></blockquote><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>主要分为两步：</p><ol><li>遍历一次二叉树，节点的值与两个目标值对比，对比成功，将路径存到两个数组内</li><li>以较短的数组作为标准，再比对两个数组，当两个节点的值不一样时，取数组的前一个节点返回，当遍历结束依然没有找到不相等的节点，返回短数组的尾节点</li></ol><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lowestCommonAncestor = <span class="function"><span class="keyword">function</span>(<span class="params">root, p, q</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> dfs = <span class="function">(<span class="params"> node, path=[], target, target2, res=[], res2=[] </span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>( !node ) <span class="keyword">return</span> path</span><br><span class="line">        path = [ ...path, node ]</span><br><span class="line">        <span class="keyword">if</span>( target === node.val )&#123;</span><br><span class="line">            res.push( ...path )</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( target2 === node.val )&#123;</span><br><span class="line">            res2.push( ...path )</span><br><span class="line">        &#125;</span><br><span class="line">        node.left &amp;&amp; dfs( node.left, [...path], target, target2, res, res2 )</span><br><span class="line">        node.right &amp;&amp; dfs( node.right, [...path], target, target2, res, res2 )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="keyword">let</span> res2 = []</span><br><span class="line">    <span class="keyword">let</span> ret = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 找两个路径，放入数组</span></span><br><span class="line">    dfs( root, [], p.val, q.val, res, res2 )</span><br><span class="line">    <span class="comment">// 进行对比，获取公共节点</span></span><br><span class="line">    <span class="keyword">let</span> map = res.length &lt; res2.length ? res : res2</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">let</span> i = <span class="number">0</span>; i &lt; map.length; i ++ )&#123;</span><br><span class="line">        <span class="keyword">if</span>( res[i].val !== res2[i].val )&#123;</span><br><span class="line">            ret = res[ i<span class="number">-1</span> ]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret ? ret : map[ map.length - <span class="number">1</span> ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 二叉搜索树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拖拽 DOM 碰撞检测</title>
      <link href="/2020/05/07/%E7%A2%B0%E6%92%9E%E6%A3%80%E6%B5%8B/"/>
      <url>/2020/05/07/%E7%A2%B0%E6%92%9E%E6%A3%80%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<p>拖拽 DOM 碰撞检测</p><p><fancybox><img src="https://s1.ax1x.com/2020/05/07/YZuNeH.png" alt=""></fancybox></p><a id="more"></a><h2 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h2><p>总共分为两步：</p><ol><li>实现拖拽</li><li>碰撞检测</li></ol><h2 id="实现拖拽"><a href="#实现拖拽" class="headerlink" title="实现拖拽"></a>实现拖拽</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> red = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"red"</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">red.addEventListener( <span class="string">"mousedown"</span>, (event) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 事先记录下与元素左上角的偏移</span></span><br><span class="line">    <span class="keyword">let</span> left = event.clientX - red.offsetLeft;</span><br><span class="line">    <span class="keyword">let</span> top = event.clientY - red.offsetTop;</span><br><span class="line">    <span class="comment">// 使用 addEventListener 方式添加事件监听，后期不好移除，故使用 onmousemove</span></span><br><span class="line">    <span class="built_in">document</span>.onmousemove = move.bind( <span class="keyword">this</span>, left, top )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听抬起事件</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"mouseup"</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">document</span>.onmousemove = <span class="string">""</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params"> left, top </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> event = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>)[<span class="number">2</span>];</span><br><span class="line">    <span class="comment">// 先固定左上角的偏移量 - 偏移量，让元素跟随鼠标移动</span></span><br><span class="line">    red.style.left = event.clientX - left + <span class="string">"px"</span>;</span><br><span class="line">    red.style.top = event.clientY - top + <span class="string">"px"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DOM-碰撞检测"><a href="#DOM-碰撞检测" class="headerlink" title="DOM 碰撞检测"></a>DOM 碰撞检测</h2><p><fancybox><img src="https://s1.ax1x.com/2020/05/07/YZuNeH.png" alt=""></fancybox></p><ol><li>当div1在div2的上边线(t2)以上的区域活动时，始终碰不上</li><li>当div1在div2的右边线(r2)以右的区域活动时,始终碰不上</li><li>当div1在div2的下边线(b2)以下的区域活动时,始终碰不上</li><li>当div1在div2的左边线(r2)以左的区域活动时,始终碰不上</li></ol><p>除了以上四种情况，其他情况表示div1和div2碰上了，下面试完整测试代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"green"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.red</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            background-color: red;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.green</span>&#123;</span></span><br><span class="line">            background-color: green;</span><br><span class="line">            position: relative;</span><br><span class="line">            top: 300px;</span><br><span class="line">            left: 300px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.blue</span> &#123;</span></span><br><span class="line">            background-color: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    /**</span><br><span class="line">     * 题目描述：在页面中写一个红色正方形，实现红色正方形拖拽到页面的任意位置，随鼠标一起动，</span><br><span class="line">     * 页面中有另一个绿色正方形，当鼠标拖动红色正方形移动到绿色正方形时，绿色正方形变蓝色</span><br><span class="line">     * </span><br><span class="line">     * 实现思路：1.实现随鼠标拖拽，2.拖拽的过程中判定是否碰撞</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> red = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"red"</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> green = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"green"</span>)[<span class="number">0</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">move</span><span class="params">( left, top )</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> event = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>)[<span class="number">2</span>];</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 先固定左上角的偏移量 - 偏移量，让元素跟随鼠标移动</span></span></span><br><span class="line"><span class="actionscript">        red.style.left = event.clientX - left + <span class="string">"px"</span>;</span></span><br><span class="line"><span class="actionscript">        red.style.top = event.clientY - top + <span class="string">"px"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 获取目标元素四个边框的偏移</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> greenleft = green.offsetLeft</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> greenTop = green.offsetTop</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> greenRight = green.offsetLeft + green.offsetWidth</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> greenbottom = green.offsetTop + green.offsetHeight</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 拖拽元素的左边框偏移 大于 目标元素的右边框偏移</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 拖拽元素的顶部边框偏移 大于 目标元素的底部偏移</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 拖拽元素的右边框偏移 小于 目标元素的左边框偏移</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 拖拽元素的底部边框偏移 大于 目标元素的顶部边框偏移</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 其中一个成立，就代表没有碰撞，反之则表示已经碰撞</span></span></span><br><span class="line">        if( red.offsetLeft &gt; greenRight || </span><br><span class="line">        red.offsetTop &gt; greenbottom|| </span><br><span class="line">        red.offsetLeft + red.offsetWidth &lt; greenleft || </span><br><span class="line">        red.offsetTop + red.offsetHeight &lt; greenTop)&#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 移除 css 类</span></span></span><br><span class="line"><span class="actionscript">            green.classList.remove(<span class="string">"blue"</span>)</span></span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">            green.classList.add(<span class="string">"blue"</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    red.addEventListener( <span class="string">"mousedown"</span>, (event) =&gt; &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 事先记录下与元素左上角的偏移</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> left = event.clientX - red.offsetLeft;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> top = event.clientY - red.offsetTop;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 使用 addEventListener 方式添加事件监听，后期不好移除，故使用 onmousemove</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.onmousemove = move.bind( <span class="keyword">this</span>, left, top )</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 监听抬起事件</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.addEventListener(<span class="string">"mouseup"</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.onmousemove = <span class="string">""</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="参考材料"><a href="#参考材料" class="headerlink" title="参考材料"></a>参考材料</h2><p><a href="https://www.jb51.net/article/133260.htm" target="_blank" rel="noopener">JS实现碰撞检测的方法分析</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>从 0 写一个简单的 React.js</title>
      <link href="/2020/02/23/%E4%BB%8E0%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84React.js/"/>
      <url>/2020/02/23/%E4%BB%8E0%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84React.js/</url>
      
        <content type="html"><![CDATA[<p>从 0 写一个简单的 React.js</p><a id="more"></a><h1 id="从-0-写一个简单的-React-js"><a href="#从-0-写一个简单的-React-js" class="headerlink" title="从 0 写一个简单的 React.js"></a>从 0 写一个简单的 React.js</h1><p>预览：<a href="https://curtaintan.github.io/create-simple-react/dist/index.html" target="_blank" rel="noopener">点击直达</a><br>源码地址：<a href="https://github.com/curtainTan/create-simple-react" target="_blank" rel="noopener">github</a><br>文章地址：<a href="http://blog.curtaintan.club/2020/02/23/%E4%BB%8E0%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84React.js/">博客-从 0 写一个简单的 React.js</a></p><p>简单的实现如下功能：</p><ol><li>将 jsx 使用 babel 转换成 vnode</li><li>组件是实现</li><li>生命周期的实现</li><li>diff 算法（这里没懂）</li><li>异步的setState</li></ol><p>下面，我将总结一下整体的实现过程。</p><h2 id="1-React-createElement-的实现"><a href="#1-React-createElement-的实现" class="headerlink" title="1. React.createElement() 的实现"></a>1. React.createElement() 的实现</h2><p>当我们在写 React 组件的时候，你是否有疑惑我们为什么要引入 React ，但是从来没用到呢？？</p><p>其实我们用到了，因为我们用到了 <code>React.createElement()</code> 函数，此方法搭配 babel 插件将 jsx 转化成 vnode。</p><h2 id="2-将-jsx-使用-babel-转换成-vnode"><a href="#2-将-jsx-使用-babel-转换成-vnode" class="headerlink" title="2. 将 jsx 使用 babel 转换成 vnode"></a>2. 将 jsx 使用 babel 转换成 vnode</h2><p>使用 babel 插件 @babel/plugin-transform-react-jsx 将 jsx 转换成 vnode 对象。</p><figure class="highlight js"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ele = (</span><br><span class="line">    &lt;div className=<span class="string">"active"</span> title=<span class="string">"tan"</span>&gt;</span><br><span class="line">        hello,&lt;span&gt;react&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">)</span><br><span class="line"><span class="built_in">console</span>.log( ele )</span><br></pre></td></tr></table></figure><p><fancybox><img src=https://image.gslb.dawnlab.me/a5f402a0b0b9d8d105d1993394bb8bb7.png alt="图片显示失败" /></fancybox></p><h2 id="3-react-dom-将-vnode-转换成真正的-DOM-此时没有实现组件"><a href="#3-react-dom-将-vnode-转换成真正的-DOM-此时没有实现组件" class="headerlink" title="3. react-dom 将 vnode 转换成真正的 DOM (此时没有实现组件)"></a>3. react-dom 将 vnode 转换成真正的 DOM (此时没有实现组件)</h2><p>react-dom 上有一个 render 函数，将获得到的 vnode 转换成真实的 dom，并把它挂在到dom节点（第二个参数）上。</p><p>根据 vnode 的结果可以得到，vnode 有两种情况：</p><ol><li>vnode 是直接渲染的内容（文字）</li><li>vnode 是一个对象，代表一个 dom 元素（拥有 tag 属性）</li></ol><p>此时，我们只需递归创建元素，最后依次挂载到父元素上即可：</p><figure class="highlight js"><figcaption><span>render函数</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_render</span>(<span class="params"> vnode, container </span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 第一种情况</span></span><br><span class="line">    <span class="keyword">if</span>( vnode === <span class="literal">undefined</span> || vnode === <span class="literal">null</span> || <span class="keyword">typeof</span> vnode === <span class="string">"boolean"</span> ) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// 数字转换成 字符串</span></span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">typeof</span> vnode === <span class="string">"number"</span> ) vnode = <span class="built_in">String</span>( vnode )</span><br><span class="line">    <span class="comment">// 如果 vnode 是字符串，直接渲染</span></span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">typeof</span> vnode === <span class="string">"string"</span> )&#123;</span><br><span class="line">        <span class="comment">// 创建文本节点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">document</span>.createTextNode( vnode )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二种情况</span></span><br><span class="line">    <span class="comment">// vnode 是虚拟 DOM 对象</span></span><br><span class="line">    <span class="keyword">const</span> &#123; tag, attrs &#125; = vnode</span><br><span class="line">    <span class="comment">// 创建节点对象</span></span><br><span class="line">    <span class="keyword">const</span> dom = <span class="built_in">document</span>.createElement( tag )</span><br><span class="line">    <span class="comment">// 绑定属性</span></span><br><span class="line">    <span class="keyword">if</span>( attrs )&#123;</span><br><span class="line">        <span class="built_in">Object</span>.keys( attrs ).forEach( <span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> value = attrs[key]</span><br><span class="line">            setAttribute( dom,  key, value )</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 递归 渲染子节点</span></span><br><span class="line">    vnode.childrens &amp;&amp; vnode.childrens.forEach( <span class="function"><span class="params">child</span> =&gt;</span> render( child, dom ) )</span><br><span class="line">    <span class="comment">// 返回节点 并挂载子节点</span></span><br><span class="line">    <span class="keyword">return</span> container.appendChild( dom )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-实现函数组件和类组件"><a href="#4-实现函数组件和类组件" class="headerlink" title="4. 实现函数组件和类组件"></a>4. 实现函数组件和类组件</h2><p>实现思路：将函数组件封装成类组件，通过执行类组件的 render 函数得到 vnode</p><p>先看 vnode 结构：</p><figure class="highlight js"><figcaption><span>组件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"../react/index.js"</span></span><br><span class="line"><span class="keyword">const</span> ele = (</span><br><span class="line">    &lt;div className=<span class="string">"active"</span> title=<span class="string">"tan"</span>&gt;</span><br><span class="line">        hello,&lt;span&gt;react&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Home name="arr name" /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 函数组件</span></span><br><span class="line"><span class="regexp">function Home()&#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">        &lt;div className="active" title="tan"&gt;</span></span><br><span class="line"><span class="regexp">            hello,&lt;span&gt;react&lt;/</span>span&gt;</span><br><span class="line">            &#123;<span class="comment">/* &lt;Tan tan="我是传进来的参数" /&gt; */</span>&#125;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">console.log( ele )</span></span><br></pre></td></tr></table></figure><p><fancybox><img src=https://image.gslb.dawnlab.me/63dc847ab7cf8eb4764eb45a4136af2d.png alt="图片显示失败" /></fancybox></p><p>可见，<code>&lt;Home /&gt;</code> 被转换成了一个函数，此时，在 render 函数中，我们要多一个判断，并且我们将函数组件封装成类组件，方便统一管理、注入生命周期等，执行过程：</p><ol><li>判定是函数，调用 createComponent() 函数</li><li>使用 createComponent() 函数，将函数封装成类组件，返回类实例</li><li>使用 setComponentProps() 函数，设置组件的 props</li><li>调用 renderComponent() 函数，获取 vnode</li><li>使用 vnode 生成 dom 并返回渲染</li></ol><p><strong>实现代码请参考：</strong>react-dom/index.js</p><p><fancybox><img src=https://image.gslb.dawnlab.me/9d9cc84c24a612978e42a33c59e1ca1c.png alt="图片显示失败" /></fancybox></p><h2 id="5-实现生命周期"><a href="#5-实现生命周期" class="headerlink" title="5. 实现生命周期"></a>5. 实现生命周期</h2><p>在上述执行的过程中，插入生命周期。</p><p><strong>实现代码请参考：</strong>react-dom/index.js</p><h2 id="6-实现-diff-算法"><a href="#6-实现-diff-算法" class="headerlink" title="6. 实现 diff 算法"></a>6. 实现 diff 算法</h2><p>实质：与 dom 节点的 attribute 进行对比，替换数据已经变化的 DOM 节点，是 DOM 节点</p><p>实现思路：获取当前 dom 下<strong>一层</strong>的子节点，分出 vnode 下有 key 属性的节点（这里没懂）（ diffChildren 函数），遍历虚拟节点，对比是否改变，移除原组件，并在原位置插入新 dom（使用兄弟组件实现插入到原位置）</p><p><strong>实现代码请参考：</strong>react-dom/index.js，react-dom/diff.js</p><h2 id="7-实现异步-setState"><a href="#7-实现异步-setState" class="headerlink" title="7. 实现异步 setState"></a>7. 实现异步 setState</h2><p>异步 setState 可以优化整体的性能，避免不必要的渲染。</p><p>实质：使用 Object.assign() 合并多次 setState 的结果，只返回最终的结果。</p><p>实现思路：使用两个队列，一个保存 setState， 一个保存当前组件，一个组件一个组件的完成 setState，当完成 setState 后，执行 renderComponent() 函数，渲染组件</p><h2 id="8-总结"><a href="#8-总结" class="headerlink" title="8. 总结"></a>8. 总结</h2><p>跟着教程<strong><a href="https://www.bilibili.com/video/av68588169" target="_blank" rel="noopener">从0撸一个丐版React.js</a></strong>一步一步搭建而成，虽有不懂，但是收获良多。</p><p>首先，感谢视频的分享，让我有机会一步一步的学习并实践。</p><p>通过一步一步的实际操作，对 react 整体的执行流程有了一定的认识，</p><p>加油！</p><p>2020.2.23 1.03</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>javascript之DOM事件</title>
      <link href="/2020/02/22/javascript%E4%B9%8BDOM%E4%BA%8B%E4%BB%B6/"/>
      <url>/2020/02/22/javascript%E4%B9%8BDOM%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p><fancybox><img src="https://image.gslb.dawnlab.me/a3a95260bca8115d010a419ee021f85a.png" alt=""></fancybox></p><p>本文主要介绍 DOM 事件级别、DOM 事件模型、事件流、Event 对象常见的应用和自定义 DOM 事件。</p><a id="more"></a><h1 id="1-DOM-事件级别"><a href="#1-DOM-事件级别" class="headerlink" title="1. DOM 事件级别"></a>1. DOM 事件级别</h1><p>DOM 事件分为3个级别：DOM 0级事件处理，DOM 2级事件处理和DOM 3级事件处理。</p><h2 id="1-1-DOM-0级事件"><a href="#1-1-DOM-0级事件" class="headerlink" title="1.1 DOM 0级事件"></a>1.1 DOM 0级事件</h2><p><strong>el.onclick=function(){}</strong></p><figure class="highlight js"><figcaption><span>DOM 0级事件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span><br><span class="line"> btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     alert(<span class="keyword">this</span>.innerHTML);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>为元素的一种事件绑定一个方法，这些方法都在冒泡阶段执行。</p><h2 id="1-2-DOM-2级事件"><a href="#1-2-DOM-2级事件" class="headerlink" title="1.2 DOM 2级事件"></a>1.2 DOM 2级事件</h2><p><strong>el.addEventListener(event-name, callback, useCapture)</strong></p><ul><li>event-name: 事件名称，可以是标准的DOM事件</li><li>callback: 回调函数，当事件触发时，函数会被注入一个参数为当前的事件对象 event</li><li>useCapture: 默认是false，代表事件句柄在冒泡阶段执行</li></ul><figure class="highlight js"><figcaption><span>DOM 2级事件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, test, <span class="literal">false</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">e = e || <span class="built_in">window</span>.event;</span><br><span class="line">    alert((e.target || e.srcElement).innerHTML);</span><br><span class="line">    btn.removeEventListener(<span class="string">"click"</span>, test)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//IE9-:attachEvent()与detachEvent()。</span></span><br><span class="line"><span class="comment">//IE9+/chrom/FF:addEventListener()和removeEventListener()</span></span><br></pre></td></tr></table></figure><p>IE9以下的IE浏览器不支持 addEventListener()和removeEventListener()，使用 attachEvent()与detachEvent() 代替，因为IE9以下是不支持事件捕获的，所以也没有第三个参数，第一个事件名称前要加on。</p><h1 id="1-3-DOM-3级事件"><a href="#1-3-DOM-3级事件" class="headerlink" title="1.3 DOM 3级事件"></a>1.3 DOM 3级事件</h1><p>在DOM 2级事件的基础上添加了更多的事件类型。</p><ul><li>UI事件，当用户与页面上的元素交互时触发，如：load、scroll</li><li>焦点事件，当元素获得或失去焦点时触发，如：blur、focus</li><li>鼠标事件，当用户通过鼠标在页面执行操作时触发如：dblclick、mouseup</li><li>滚轮事件，当使用鼠标滚轮或类似设备时触发，如：mousewheel</li><li>文本事件，当在文档中输入文本时触发，如：textInput</li><li>键盘事件，当用户通过键盘在页面上执行操作时触发，如：keydown、keypress</li><li>合成事件，当为IME（输入法编辑器）输入字符时触发，如：compositionstart</li><li>变动事件，当底层DOM结构发生变化时触发，如：DOMsubtreeModified</li><li>动画事件，当css3 animation动画执行开始和结束时触发，如：webkitAnimationEnd mozAnimationEnd</li><li>同时DOM3级事件也允许使用者自定义一些事件。</li></ul><p><strong>说明：</strong></p><p>动画事件中不同浏览器的AnimationEnd写法：</p><ul><li>谷歌浏览器：webkitAnimationEnd</li><li>火狐浏览器：mozAnimationEnd</li><li>IE系浏览器：MSAnimationEnd</li><li>欧朋浏览器：oanimationend</li><li>通用浏览器：animationend</li></ul><h1 id="2、DOM事件模型和事件流"><a href="#2、DOM事件模型和事件流" class="headerlink" title="2、DOM事件模型和事件流"></a>2、DOM事件模型和事件流</h1><p><strong>DOM事件模型分为捕获和冒泡。</strong>一个事件发生后，会在子元素和父元素之间传播（propagation）。这种传播分成三个阶段。</p><p>（1）捕获阶段：事件从window对象自上而下向目标节点传播的阶段；<br>（2）目标阶段：真正的目标节点正在处理事件的阶段；<br>（3）冒泡阶段：事件从目标节点自下而上向window对象传播的阶段。</p><p><strong>DOM事件捕获的具体流程</strong><br><fancybox><img src="https://image.gslb.dawnlab.me/bdfc8b5d16793a07dd301bdf2e3029c5.png" alt=""></fancybox></p><p>捕获是从上到下，事件先从window对象，然后再到document（对象），然后是html标签（通过document.documentElement获取html标签），然后是body标签（通过document.body获取body标签），然后按照普通的html结构一层一层往下传，最后到达目标元素。</p><p>这一系列的事件，就构成了事件流..</p><h1 id="3、Event对象常见的应用"><a href="#3、Event对象常见的应用" class="headerlink" title="3、Event对象常见的应用"></a>3、Event对象常见的应用</h1><h2 id="3-1-阻止默认事件"><a href="#3-1-阻止默认事件" class="headerlink" title="3.1 阻止默认事件"></a>3.1 阻止默认事件</h2><p><strong>event. preventDefault()</strong></p><p>调用此方法，将阻止默认事件的触发，例如：a 标签的跳转</p><p>阻止默认事件触发的方法：</p><figure class="highlight js"><figcaption><span>阻止默认事件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 使用空的 js </span></span><br><span class="line">&lt;a href=<span class="string">"javascript:;"</span>&gt;链接&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 2. 返回 false</span></span><br><span class="line"><span class="regexp">&lt;a id="test" href="http:/</span><span class="regexp">/www.cnblogs.com"&gt;链接&lt;/</span>a&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">test.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    e = e || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 3. 使用 preventDefault</span></span><br><span class="line"><span class="regexp">&lt;a id="test" href="http:/</span><span class="regexp">/www.cnblogs.com"&gt;链接&lt;/</span>a&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">test.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    e = e || <span class="built_in">window</span>.event;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-2-阻止事件冒泡"><a href="#3-2-阻止事件冒泡" class="headerlink" title="3.2 阻止事件冒泡"></a>3.2 阻止事件冒泡</h2><p><strong>event.stopPropagation()</strong></p><p>调用此方法，事件将停止冒泡。</p><h2 id="3-3-停止事件传播"><a href="#3-3-停止事件传播" class="headerlink" title="3.3 停止事件传播"></a>3.3 停止事件传播</h2><p><strong>event.stopImmediatePropagation()</strong></p><p>调用此方法，将阻止此方法后面的方法执行。例如：一个事件绑定多个方法，方法依次调用，调用此方法后面的方法将不会执行，且阻止事件冒泡。</p><figure class="highlight js"><figcaption><span>停止事件传播 stopImmediatePropagation</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">".btn"</span>)</span><br><span class="line"><span class="comment">// 第一个事件</span></span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> e </span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"我是第一个注册的事件"</span> )</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 注册第二个事件</span></span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> e </span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"我是第二个注册的事件，我要调用 event.stopImmediatePropagation()方法"</span> )</span><br><span class="line">    e.stopImmediatePropagation()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 注册第三个事件</span></span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> e </span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"我是第三个注册的事件"</span> )</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// document 捕获阶段事件</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener( <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"document---我在捕获阶段执行"</span> )</span><br><span class="line">&#125;, <span class="literal">true</span> )</span><br><span class="line"><span class="comment">// document 冒泡阶段事件</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener( <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"document---我在冒泡阶段执行"</span> )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong><br><fancybox><img src="https://image.gslb.dawnlab.me/bc3edc164f68c3acd2a32d51e9beb0b7.png" alt=""></fancybox></p><h2 id="3-4-获取被点击的子元素"><a href="#3-4-获取被点击的子元素" class="headerlink" title="3.4 获取被点击的子元素"></a>3.4 获取被点击的子元素</h2><p><strong>event.target</strong></p><p>将被点击的子元素绑定在此属性上，我们可以用此 <code>event.target</code> + <code>data-** 自定义属性</code> 实现事件代理。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-index</span>=<span class="string">"1"</span> &gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-index</span>=<span class="string">"2"</span> &gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-index</span>=<span class="string">"3"</span> &gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-index</span>=<span class="string">"4"</span> &gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-index</span>=<span class="string">"5"</span> &gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">"ul"</span>)</span></span><br><span class="line"><span class="actionscript">    ul.addEventListener( <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log( <span class="string">"e.target:"</span> )</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.dir( e.target )</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 使用 dataset 获取绑定在元素上的标记属性（例如：元素下标）</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log( <span class="string">"e.target.dataset"</span>, e.target.dataset )</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/49d08a68cf0a0a4804c1d243ccd9deee.png" alt=""></fancybox></p><h2 id="3-5-获取当前注册事件元素"><a href="#3-5-获取当前注册事件元素" class="headerlink" title="3.5 获取当前注册事件元素"></a>3.5 获取当前注册事件元素</h2><p><strong>event.currentTarget</strong></p><p>使用该属性，获取当前注册事件的元素。</p><h1 id="4-自定义事件"><a href="#4-自定义事件" class="headerlink" title="4. 自定义事件"></a>4. 自定义事件</h1><p>可以使用两种方式自定义事件：<code>new Event( eventType )</code> 和 <code>new CustomEvent( eventType, params )</code></p><h2 id="4-1-new-Event"><a href="#4-1-new-Event" class="headerlink" title="4.1 new Event()"></a>4.1 new Event()</h2><p>语法：<code>event = new Event(eventType, eventInit);</code></p><p>一般只传递第一个参数``eventType`，后面为 Event 对象上的参数</p><h2 id="4-2-CustomEvent"><a href="#4-2-CustomEvent" class="headerlink" title="4.2 CustomEvent()"></a>4.2 CustomEvent()</h2><p>语法：<code>event = new CustomEvent(eventType, { detail：params });</code></p><p>eventType：事件名称<br>params：自定义参数</p><h2 id="4-3-合并案例"><a href="#4-3-合并案例" class="headerlink" title="4.3 合并案例"></a>4.3 合并案例</h2><figure class="highlight js"><figcaption><span>自定义事件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">".btn"</span>)</span><br><span class="line"><span class="comment">// Event 自定义事件</span></span><br><span class="line"><span class="keyword">var</span> eve = <span class="keyword">new</span> Event(<span class="string">"go"</span>)</span><br><span class="line">btn.addEventListener( <span class="string">"go"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> e </span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"我是自定义事件："</span>, e )</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// CustomEvent 事件构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCustomEvent</span>(<span class="params"> eventType = <span class="string">"mock-event"</span>, params = &#123;&#125; </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CustomEvent( eventType, &#123; <span class="attr">detail</span>: params &#125; )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// CustomEvent 事件</span></span><br><span class="line"><span class="keyword">var</span> event = createCustomEvent( <span class="string">"customGo"</span>, &#123; <span class="attr">name</span>: <span class="string">"tan"</span> &#125; )</span><br><span class="line">btn.addEventListener( <span class="string">"customGo"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> data </span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"我是传参事件------"</span>, data )</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 触发事件各个</span></span><br><span class="line">btn.addEventListener( <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"我的定义的 Click 事件"</span> )</span><br><span class="line">    btn.dispatchEvent( eve )</span><br><span class="line">    btn.dispatchEvent( event )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/b5f271429ec73092af1077f1dc0f92a8.png" alt=""></fancybox></p><h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h1><p>关于事件，需要记住 </p><ol><li><code>addEventListener()</code> 函数的使用，</li><li><code>e.preventDefault()</code> 禁止默认事件</li><li><code>e.stopPropagation()</code> 阻止冒泡</li><li><code>e.target.dataset</code> 获取 dom 中 <code>data-**</code> 自定义属性</li></ol><p>自定义时间需要了解，并且自定义事件类似观察者模式，需要手动触发事件。</p><h1 id="6-参考材料"><a href="#6-参考材料" class="headerlink" title="6. 参考材料"></a>6. 参考材料</h1><p><a href="https://juejin.im/post/5bd2e5f8e51d4524640e1304" target="_blank" rel="noopener">浪里行舟-DOM事件机制</a></p><p><a href="https://juejin.im/post/5c4bd01fe51d45522b4f6e4e" target="_blank" rel="noopener">DOM 事件详解</a></p><p><a href="https://blog.csdn.net/qappleh/article/details/97778386" target="_blank" rel="noopener">css3判断animation动画是否完成，以及在动画完成后执行事件</a></p><p><a href="https://www.cnblogs.com/xmlys/p/7716134.html" target="_blank" rel="noopener">CSS浏览器前缀兼容写法</a></p><p><a href="https://www.cnblogs.com/cwsb/p/10384219.html" target="_blank" rel="noopener">自定义事件——Event和CustomEvent</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent" target="_blank" rel="noopener">MDN-CustomEvent</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>思路清晰---一次搞懂几种content-type的区别</title>
      <link href="/2020/02/19/%E6%80%9D%E8%B7%AF%E6%B8%85%E6%99%B0-%E4%B8%80%E6%AC%A1%E6%90%9E%E6%87%82%E5%87%A0%E7%A7%8Dcontent-type%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2020/02/19/%E6%80%9D%E8%B7%AF%E6%B8%85%E6%99%B0-%E4%B8%80%E6%AC%A1%E6%90%9E%E6%87%82%E5%87%A0%E7%A7%8Dcontent-type%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>当使用 ajax 时，你是否还对 <code>setRequestHeader( &quot;content-type&quot;, &quot;*&quot; )</code> 的几种值傻傻分不清？？</p><p>不要慌，一次性记住他们…..</p><a id="more"></a><h1 id="1、Content-Type-的值类型"><a href="#1、Content-Type-的值类型" class="headerlink" title="1、Content-Type 的值类型"></a>1、Content-Type 的值类型</h1><ol><li>application/json：消息主体是序列化后的 JSON 字符串</li><li>application/x-www-form-urlencoded：数据被编码为名称/值对。这是标准的编码格式</li><li>multipart/form-data： 需要在表单中进行文件上传时，就需要使用该格式。常见的媒体格式是上传文件之时使用的</li><li>text/plain：数据以纯文本形式(text/json/xml/html)进行编码，其中不含任何控件或格式字符</li></ol><h1 id="2、application-json-和-application-x-www-form-urlencoded的区别"><a href="#2、application-json-和-application-x-www-form-urlencoded的区别" class="headerlink" title="2、application/json 和 application/x-www-form-urlencoded的区别"></a>2、application/json 和 application/x-www-form-urlencoded的区别</h1><h2 id="2-1-application-json："><a href="#2-1-application-json：" class="headerlink" title="2.1 application/json："></a>2.1 application/json：</h2><p>作用： 告诉服务器请求的主题内容是json格式的字符串，服务器端会对json字符串进行解析。<br>好处： 前端人员不需要关心数据结构的复杂度，只要是标准的 json 格式就能提交成功。</p><p><strong>使用案例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open( type, url, <span class="literal">true</span> )</span><br><span class="line">xhr.setRequestHeader( <span class="string">"Content-Type"</span> , <span class="string">"application/json"</span> )</span><br><span class="line"><span class="comment">// 传入参数是 JSON 字符串</span></span><br><span class="line">xhr.send( <span class="built_in">JSON</span>.stringify( data ) )</span><br></pre></td></tr></table></figure><h2 id="2-1-application-x-www-form-urlencoded："><a href="#2-1-application-x-www-form-urlencoded：" class="headerlink" title="2.1 application/x-www-form-urlencoded："></a>2.1 application/x-www-form-urlencoded：</h2><p>作用：在请求发送过程中会对数据进行序列化处理，以键值对形式 key1=value1&amp;key2=value2 的方式发送到服务器，<br>好处： 所有浏览器都支持<br>缺点：需要处理传入的参数为 key1=value1&amp;key2=value2 格式</p><h1 id="3、multipart-form-data"><a href="#3、multipart-form-data" class="headerlink" title="3、multipart/form-data"></a>3、multipart/form-data</h1><p>form 表单默认编码格式是：application/x-www-form-urlencoded</p><p>当表单需要发送文件或图片时，需要设置 enctype 为 multipart/form-data</p><p><strong>案例：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://**/uploadImage"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="4-使用-xhr-发送文件和图片"><a href="#4-使用-xhr-发送文件和图片" class="headerlink" title="4. 使用 xhr 发送文件和图片"></a>4. 使用 xhr 发送文件和图片</h1><p>只需将数据和文件放入 FormData 即可.</p><p><strong>案例：</strong></p><figure class="highlight js"><figcaption><span>xhr发送文件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取文件放入 FormData</span></span><br><span class="line"><span class="keyword">var</span> formdata = <span class="keyword">new</span> FormData()</span><br><span class="line"><span class="keyword">var</span> elFile = <span class="built_in">document</span>.getElementById( <span class="string">"myfile"</span> )</span><br><span class="line">elFile.addEventListener( <span class="string">"change"</span>, () =&gt; &#123;</span><br><span class="line">    formdata.append( <span class="string">"file"</span>, elFile.files[<span class="number">0</span>] )</span><br><span class="line">    <span class="comment">// 调用发送文件</span></span><br><span class="line">    sendFile()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 创建 xhr</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open( <span class="string">"post"</span>, <span class="string">"http://***/uploadImage"</span> )</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( xhr.status === <span class="number">200</span> &amp;&amp; xhr.readyState === <span class="number">4</span> )&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"请求成功----"</span> )</span><br><span class="line">    <span class="built_in">console</span>.log( xhr.response )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendFile</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    xhr.send( formdata )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h1><p>这四个属性都能设置在 from 表达上的 enctype 上，</p><p>application/json 和 application/x-www-form-urlencoded 设置在 xhr 上，主要的区别是对上传参数的格式不同</p><p>multipart/form-data 设置在 form 表单上，用于上传文件和图片.</p><h1 id="6-参考材料"><a href="#6-参考材料" class="headerlink" title="6. 参考材料"></a>6. 参考材料</h1><p><a href="https://www.jianshu.com/p/2ac9297e00f9" target="_blank" rel="noopener">关于Content-Type几种值的区别及用法</a></p><p><a href="https://www.jianshu.com/p/24799c0f0008" target="_blank" rel="noopener">http请求content-type包括几种，区别是什么？</a></p><p><a href="https://blog.csdn.net/Raywang80s/article/details/74917693" target="_blank" rel="noopener">XMLHTTP中setRequestHeader方法和参数</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>封装一个ajax</title>
      <link href="/2020/02/19/%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AAajax/"/>
      <url>/2020/02/19/%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AAajax/</url>
      
        <content type="html"><![CDATA[<p>简单的封装一个 ajax：</p><ol><li>自动处理参数</li><li>支持 get 和 post</li><li>支持取消操作</li></ol><a id="more"></a><h1 id="1-基于-XMLHttpRequest-封装"><a href="#1-基于-XMLHttpRequest-封装" class="headerlink" title="1. 基于 XMLHttpRequest 封装"></a>1. 基于 XMLHttpRequest 封装</h1><p>XMLHttpRequest 相关信息请参考：<strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener">MDN–XMLHttpRequest</a></strong></p><p><strong>XMLHttpRequest 对象主要的属性：</strong><br><fancybox><img src="https://image.gslb.dawnlab.me/4bdab618bfd707da777479a77d683171.png" alt=""></fancybox></p><h2 id="1-1-原生-XHR-创建步骤"><a href="#1-1-原生-XHR-创建步骤" class="headerlink" title="1.1 原生 XHR 创建步骤"></a>1.1 原生 XHR 创建步骤</h2><p>总共分 5 步：</p><ol><li>第一步：使用 new XMLHttpRequest() 创建 XHR 实例</li><li>第二步：使用 xhr.open() 创建一个请求，并初始化相关 http 请求信息</li><li>设置请求头</li><li>设置响应 http 状态变化的函数</li><li>调用 send 方法，发送 http 请求</li></ol><p><strong>整体结构：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myAjax</span>(<span class="params"> obj </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.url = obj.url || <span class="string">""</span></span><br><span class="line">    <span class="keyword">this</span>.type = obj.type || <span class="string">"GET"</span></span><br><span class="line">    <span class="keyword">this</span>.data = obj.data ||&#123;&#125;</span><br><span class="line">    <span class="keyword">this</span>.success = obj.success || <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.error = obj.error || <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">&#125;</span><br><span class="line">myAjax.prototype.send = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">myAjax.prototype.abort = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>完成结果：</strong></p><figure class="highlight js"><figcaption><span>ajax ---- XMLHttpRequest</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myAjax</span>(<span class="params"> obj </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.url = obj.url || <span class="string">""</span></span><br><span class="line">    <span class="keyword">this</span>.type = obj.type || <span class="string">"GET"</span></span><br><span class="line">    <span class="keyword">this</span>.data = obj.data ||&#123;&#125;</span><br><span class="line">    <span class="keyword">this</span>.success = obj.success || <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.error = obj.error || <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myAjax.prototype.send = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 将数据取出来 以 key=value 的形式保存到数组中，方便后续操作</span></span><br><span class="line">    <span class="keyword">let</span> dataArr = []</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">let</span> key <span class="keyword">in</span> <span class="keyword">this</span>.data )&#123;</span><br><span class="line">        dataArr.push( key + <span class="string">"="</span> + <span class="keyword">this</span>.data[key] )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">this</span>.type === <span class="string">"GET"</span> || <span class="keyword">this</span>.type === <span class="string">"get"</span> )&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = <span class="keyword">this</span>.url + <span class="string">"?"</span> + dataArr.join(<span class="string">"&amp;"</span>)</span><br><span class="line">        <span class="comment">// 删除尾部的 ?，当 data 为空的时候会多出来 ?</span></span><br><span class="line">        <span class="keyword">this</span>.xhr.open( <span class="keyword">this</span>.type, <span class="keyword">this</span>.url.replace(<span class="regexp">/\?$/g</span>, <span class="string">""</span>), <span class="literal">true</span> )</span><br><span class="line">        <span class="keyword">this</span>.xhr.send()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">this</span>.type === <span class="string">"POST"</span> || <span class="keyword">this</span>.type === <span class="string">"post"</span> )&#123;</span><br><span class="line">        <span class="keyword">this</span>.xhr.open( <span class="keyword">this</span>.type, <span class="keyword">this</span>.url, <span class="literal">true</span> )</span><br><span class="line">        <span class="keyword">this</span>.xhr.setRequestHeader( <span class="string">"content-type"</span>, <span class="string">"application/x-www-form-urlencoded"</span> )</span><br><span class="line">        <span class="keyword">this</span>.xhr.send( dataArr.join( <span class="string">"&amp;"</span> ) )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用箭头函数   将 this 指向当前对象</span></span><br><span class="line">    <span class="keyword">this</span>.xhr.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>( <span class="keyword">this</span>.xhr.readyState === <span class="number">4</span> &amp;&amp; </span><br><span class="line">            <span class="comment">// 200 是请求成功，304 重定向使用缓存资源</span></span><br><span class="line">            ( <span class="keyword">this</span>.xhr.status === <span class="number">200</span> || <span class="keyword">this</span>.xhr.status === <span class="number">304</span> ) )&#123;</span><br><span class="line">                <span class="keyword">if</span>( <span class="keyword">this</span>.success &amp;&amp; <span class="keyword">this</span>.success <span class="keyword">instanceof</span> <span class="built_in">Function</span> )&#123;</span><br><span class="line">                    <span class="keyword">var</span> res = <span class="keyword">this</span>.xhr.responseText</span><br><span class="line">                    <span class="keyword">if</span>( <span class="keyword">typeof</span> res === <span class="string">"string"</span> )&#123;</span><br><span class="line">                        <span class="keyword">this</span>.success( <span class="built_in">JSON</span>.parse( res ) )</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">myAjax.prototype.abort = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"已经取消请求..."</span> )</span><br><span class="line">    <span class="keyword">this</span>.xhr.abort()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-基于-fetch-封装"><a href="#2-基于-fetch-封装" class="headerlink" title="2. 基于 fetch 封装"></a>2. 基于 fetch 封装</h1><p>若果你不知道 fetch 的使用，请参考</p><ol><li><strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WindowOrWorkerGlobalScope/fetch" target="_blank" rel="noopener">MDN-fetch 文档</a></strong></li><li><strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="noopener">MDN-fetch 使用相关</a></strong></li></ol><p><strong>fetch 第二个参数选项：</strong></p><ol><li>method: 请求使用的方法，如 GET、POST。</li><li>headers: 请求的头信息，形式为 Headers 的对象或包含 ByteString 值的对象字面量。</li><li>body: 请求的 body 信息：可能是一个 Blob、BufferSource、FormData、URLSearchParams 或者 USVString 对象。注意 GET 或 HEAD 方法的请求不能包含 body 信息。</li><li>mode: 请求的模式，如 cors、 no-cors 或者 same-origin。</li><li>credentials: 请求的 credentials，如 omit、same-origin 或者 include。为了在当前域名内自动发送 cookie ， 必须提供这个选项， 从 Chrome 50 开始， 这个属性也可以接受 FederatedCredential 实例或是一个 PasswordCredential 实例。</li><li>cache:  请求的 cache 模式: default 、 no-store 、 reload 、 no-cache 、 force-cache 或者 only-if-cached 。</li><li>redirect: 可用的 redirect 模式: follow (自动重定向), error (如果产生重定向将自动终止并且抛出一个错误), 或者 manual (手动处理重定向). 在Chrome中，Chrome 47之前的默认值是 follow，从 Chrome 47开始是 manual。</li><li>referrer: 一个 USVString 可以是 no-referrer、client或一个 URL。默认是 client。</li><li>referrerPolicy: 指定了HTTP头部referer字段的值。可能为以下值之一： no-referrer、 no-referrer-when-downgrade、 origin、 origin-when-cross-origin、 unsafe-url 。</li><li>integrity: 包括请求的  subresource integrity 值</li><li>signal: 用于取消请求</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFetch</span>(<span class="params"> obj </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.url = obj.url || <span class="string">""</span></span><br><span class="line">    <span class="keyword">this</span>.type = obj.type || <span class="string">"GET"</span></span><br><span class="line">    <span class="keyword">this</span>.data = obj.data ||&#123;&#125;</span><br><span class="line">    <span class="keyword">this</span>.success = obj.success || <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.error = obj.error || <span class="literal">null</span></span><br><span class="line">    <span class="comment">// 用于取消 fetch 请求</span></span><br><span class="line">    <span class="keyword">this</span>.controller = <span class="keyword">new</span> AbortController()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myFetch.prototype.send = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 将数据取出来 以 key=value 的形式保存到数组中，方便后续操作</span></span><br><span class="line">    <span class="keyword">let</span> dataArr = []</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">let</span> key <span class="keyword">in</span> <span class="keyword">this</span>.data )&#123;</span><br><span class="line">        dataArr.push( key + <span class="string">"="</span> + <span class="keyword">this</span>.data[key] )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">this</span>.type === <span class="string">"GET"</span> || <span class="keyword">this</span>.type === <span class="string">"get"</span> )&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = <span class="keyword">this</span>.url + <span class="string">"?"</span> + dataArr.join(<span class="string">"&amp;"</span>)</span><br><span class="line">        <span class="comment">// 删除尾部的 ?，当 data 为空的时候会多出来 ?</span></span><br><span class="line">        fetch( <span class="keyword">this</span>.url.replace(<span class="regexp">/\?$/g</span>, <span class="string">""</span>), &#123;</span><br><span class="line">            mode: <span class="string">"cors"</span>,</span><br><span class="line">            method: <span class="string">"GET"</span>,</span><br><span class="line">            signal: <span class="keyword">this</span>.controller.signal</span><br><span class="line">        &#125;).then( <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> res.json()</span><br><span class="line">        &#125;).then( <span class="function"><span class="params">resObj</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.success( resObj )</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">this</span>.type === <span class="string">"POST"</span> || <span class="keyword">this</span>.type === <span class="string">"post"</span> )&#123;</span><br><span class="line">        fetch( <span class="keyword">this</span>.url, &#123;</span><br><span class="line">            mode: <span class="string">"cors"</span>,</span><br><span class="line">            headers: &#123;</span><br><span class="line">                <span class="string">"Content-Type"</span> : <span class="string">"application/x-www-form-urlencoded"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            body: dataArr.join(<span class="string">"&amp;"</span>),</span><br><span class="line">            method: <span class="string">"POST"</span>,</span><br><span class="line">            signal: <span class="keyword">this</span>.controller.signal</span><br><span class="line">        &#125;).then( <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log( <span class="string">"新鲜的数据："</span> ,res )</span><br><span class="line">            <span class="keyword">return</span> res.json()</span><br><span class="line">        &#125;).then( <span class="function"><span class="params">resObj</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.success( resObj )</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myFetch.prototype.abort = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"取消请求--"</span> )</span><br><span class="line">    <span class="keyword">this</span>.controller.abort()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h1><p>XMLHttp<br>使用原生 XMLHttpRequest 创建 ajax 的步骤分 5 步，一定要记住，</p><ol><li>使用 new XMLHttpRequest() 创建 xhr 实例</li><li>调用 open 方法初始化请求信息</li><li>设置 请求头</li><li>设置请求响应函数</li><li>调用 send 方法发送请求</li></ol><h1 id="4-关于发送文件和图片"><a href="#4-关于发送文件和图片" class="headerlink" title="4. 关于发送文件和图片"></a>4. 关于发送文件和图片</h1><p>发送文件和图片，需要搭配 <code>FormData</code></p><p>直接将 FormData 作为参数发送即可。</p><p><strong>案例:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取文件放入 FormData</span></span><br><span class="line"><span class="keyword">var</span> formdata = <span class="keyword">new</span> FormData()</span><br><span class="line"><span class="keyword">var</span> elFile = <span class="built_in">document</span>.getElementById( <span class="string">"myfile"</span> )</span><br><span class="line">elFile.addEventListener( <span class="string">"change"</span>, () =&gt; &#123;</span><br><span class="line">    formdata.append( <span class="string">"file"</span>, elFile.files[<span class="number">0</span>] )</span><br><span class="line">    <span class="comment">// 调用发送文件</span></span><br><span class="line">    sendFile()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 创建 xhr</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open( <span class="string">"post"</span>, <span class="string">"http://***/uploadImage"</span> )</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( xhr.status === <span class="number">200</span> &amp;&amp; xhr.readyState === <span class="number">4</span> )&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"请求成功----"</span> )</span><br><span class="line">    <span class="built_in">console</span>.log( xhr.response )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendFile</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    xhr.send( formdata )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-参考材料"><a href="#5-参考材料" class="headerlink" title="5. 参考材料"></a>5. 参考材料</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener">MDN–XMLHttpRequest</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WindowOrWorkerGlobalScope/fetch" target="_blank" rel="noopener">MDN-fetch 文档</a></p><p><a href="https://blog.csdn.net/hlinghling/article/details/52624757" target="_blank" rel="noopener">创建ajax过程</a></p><p><a href="https://blog.csdn.net/sinat_35767703/article/details/67633058" target="_blank" rel="noopener">AJAX实现步骤,XMLHttpRequest对象的方法</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>页面布局之居中</title>
      <link href="/2020/02/18/%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80%E4%B9%8B%E5%B1%85%E4%B8%AD/"/>
      <url>/2020/02/18/%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80%E4%B9%8B%E5%B1%85%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<p>水平居中 + 垂直居中 + 水平垂直居中</p><a id="more"></a><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>下文的所有 css 都是基于如下 html 结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"son"</span>&gt;</span>son<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>go–go–go—-</strong></p><h1 id="1-水平居中"><a href="#1-水平居中" class="headerlink" title="1. 水平居中"></a>1. 水平居中</h1><h2 id="1-1-使用-margin-0-auto"><a href="#1-1-使用-margin-0-auto" class="headerlink" title="1.1 使用 margin: 0 auto"></a>1.1 使用 margin: 0 auto</h2><p><strong>形成原理：</strong></p><ol><li>元素为块级元素</li><li>元素需要设置宽度</li><li>margin: 0 auto</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">38px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><fancybox><img src="https://image.gslb.dawnlab.me/0731902bacfad07794514d226c60bc97.png" alt=""></fancybox></p><h2 id="1-2-使用-text-align-center"><a href="#1-2-使用-text-align-center" class="headerlink" title="1.2 使用 text-align:center"></a>1.2 使用 text-align:center</h2><p><strong>形成原理：</strong></p><ol><li>子元素为行内元素（可以使用 display: inline-block 实现转换）</li><li>父元素设置 text-align:center</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">38px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-使用-flex-布局"><a href="#1-3-使用-flex-布局" class="headerlink" title="1.3 使用 flex 布局"></a>1.3 使用 flex 布局</h2><p><strong>形成原理：</strong></p><ol><li>父元素使用 flex 布局</li><li>父元素设置 justify-content: center</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">38px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-使用-absolute-transform"><a href="#1-4-使用-absolute-transform" class="headerlink" title="1.4 使用 absolute + transform"></a>1.4 使用 absolute + transform</h2><p><strong>形成原理：</strong></p><ol><li>子元素绝对定位 position: absolute;</li><li>以父元素宽度为基准向右偏移 50%，设置 left: 50%;</li><li>基于自己的宽度向左偏移 50%，设置：transform: translate( -50%, 0 );</li></ol><p><strong>存在问题：</strong></p><p>因为使用了绝对定位，元素脱离文档流，父元素捕获不到子元素高度导致父元素高度塌陷…</p><p>如果子元素是动态高度，则只能通过 js 获取子元素高度，再设置父元素高度.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">38px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>( -50%, 0 );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/48ff91bfc7d24ef9bb18b6a4ae5c17be.png" alt=""></fancybox></p><h2 id="1-5-使用-absolute-负margin"><a href="#1-5-使用-absolute-负margin" class="headerlink" title="1.5 使用 absolute + 负margin"></a>1.5 使用 absolute + 负margin</h2><p><strong>形成原理：</strong></p><ol><li>子元素绝对定位 position: absolute;</li><li>以父元素宽度为基准向右偏移 50%，设置 left: 50%;</li><li>需要设置固定宽度</li><li>使用负 margin ，基于自己的宽度向左偏移 50% 宽度，margin-left: -0.5 * width;</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">38px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">81px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">150px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-6-使用-absolute-width-margin"><a href="#1-6-使用-absolute-width-margin" class="headerlink" title="1.6 使用 absolute + width + margin"></a>1.6 使用 absolute + width + margin</h2><p><strong>形成原理：</strong></p><ol><li>子元素绝对定位 position: absolute;</li><li>设置子元素宽度</li><li>设置左右偏移为 0，left:0; right:0;</li><li>设置 margin 上下为 0，左右自适应占满整行. margin: 0 auto;</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">38px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">81px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-7-水平居中总结"><a href="#1-7-水平居中总结" class="headerlink" title="1.7 水平居中总结"></a>1.7 水平居中总结</h2><p>总共使用了 6 总方法，还有一种没有使用，就是使用 grid 实现，</p><p>三种使用绝对定位，但是绝对定位会导致父元素高度塌陷，需谨慎使用（其实也不算了…哈哈哈）</p><p>最推荐 flex 实现，兼容性优良，实现简单可靠.</p><h1 id="2-垂直居中"><a href="#2-垂直居中" class="headerlink" title="2. 垂直居中"></a>2. 垂直居中</h1><h2 id="2-1-行内元素的实现"><a href="#2-1-行内元素的实现" class="headerlink" title="2.1 行内元素的实现"></a>2.1 行内元素的实现</h2><p>行内元素 –&gt; 使用 line-height: height 实现</p><p><strong>实现原理：</strong></p><ol><li>父元素固定高度，并设置行高为高度值：line-height: height</li><li>子元素必须是行内元素（可以使用 display: inline-block 实现转换）</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">800px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">800px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-使用-flex-布局"><a href="#2-2-使用-flex-布局" class="headerlink" title="2.2 使用 flex 布局"></a>2.2 使用 flex 布局</h2><p><strong>实现原理：</strong></p><ol><li>父元素使用 flex 布局</li><li>父元素设置 align-items: center;</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-使用-position：absolute"><a href="#2-3-使用-position：absolute" class="headerlink" title="2.3 使用 position：absolute"></a>2.3 使用 position：absolute</h2><p>三种方式，</p><ol><li>absolute + transform</li><li>absolute + -margin</li><li>absolute + margin: auto 0</li></ol><h2 id="2-4-总结"><a href="#2-4-总结" class="headerlink" title="2.4 总结"></a>2.4 总结</h2><p>垂直居中还有表格、grid 和 vertical-align 可以实现。</p><p>推荐使用 flex 布局实现，简单易理解.</p><h1 id="3-水平垂直居中"><a href="#3-水平垂直居中" class="headerlink" title="3. 水平垂直居中"></a>3. 水平垂直居中</h1><h2 id="3-1-使用-absolute-margin"><a href="#3-1-使用-absolute-margin" class="headerlink" title="3.1 使用 absolute + margin"></a>3.1 使用 absolute + margin</h2><p><strong>实现原理：</strong></p><ol><li>父元素使用定位（除了 static 定位都行）</li><li>子元素使用绝对定位</li><li>上下左右偏移为 0</li><li>设置 margin: auto 占满整个父元素，居中</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-使用-absolute-transform"><a href="#3-2-使用-absolute-transform" class="headerlink" title="3.2 使用 absolute + transform"></a>3.2 使用 absolute + transform</h2><ol><li>父元素使用定位（除了 static 定位都行）</li><li>子元素使用绝对定位</li><li>上左各偏移基于父元素的 50%</li><li>使用 transform 再拉回多的偏移 transform: translate( -50%, -50% );</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    padding: <span class="number">0</span>;</span><br><span class="line">    margin: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">.parent&#123;</span><br><span class="line">    background-color: #ccc;</span><br><span class="line">    padding: <span class="number">20</span>px;</span><br><span class="line">    height: <span class="number">600</span>px;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.son&#123;</span><br><span class="line">    font-size: <span class="number">50</span>px;</span><br><span class="line">    line-height: <span class="number">100</span>px;</span><br><span class="line">    color: #ccc;</span><br><span class="line">    background-color: aquamarine;</span><br><span class="line">    text-align: center;</span><br><span class="line">    width: <span class="number">300</span>px;</span><br><span class="line">    height: <span class="number">100</span>px;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: <span class="number">50</span>%;</span><br><span class="line">    left: <span class="number">50</span>%;</span><br><span class="line">    transform: translate( <span class="number">-50</span>%, <span class="number">-50</span>% );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-使用-absolute-margin"><a href="#3-2-使用-absolute-margin" class="headerlink" title="3.2 使用 absolute + -margin"></a>3.2 使用 absolute + -margin</h2><p>原理同上，需要知道子元素的高度，</p><p>负 margin 的值等于高度的一半</p><h2 id="3-3-使用-flex-布局"><a href="#3-3-使用-flex-布局" class="headerlink" title="3.3 使用 flex 布局"></a>3.3 使用 flex 布局</h2><p><strong>实现原理：</strong></p><ol><li>父元素使用 flex 布局</li><li>设置属性水平居中：justify-content: center;</li><li>设置属性垂直居中：align-items: center;</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(117, 117, 117);</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h1><p>个人最喜欢 flex 布局.推荐多使用 flex 布局.</p><p>加油！！</p><h1 id="5-参考材料"><a href="#5-参考材料" class="headerlink" title="5. 参考材料"></a>5. 参考材料</h1><p><a href="https://juejin.im/post/58f818bbb123db006233ab2a" target="_blank" rel="noopener">16种方法实现水平居中垂直居中</a></p><p><a href="https://blog.csdn.net/linayangoo/article/details/88528774" target="_blank" rel="noopener">CSS实现文本，DIV垂直居中</a></p><p><a href="https://juejin.im/post/58e3a5a0a0bb9f0069fc16bb" target="_blank" rel="noopener">一劳永逸的搞定 flex 布局</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>页面布局之三栏布局</title>
      <link href="/2020/02/18/%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80%E4%B9%8B%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80/"/>
      <url>/2020/02/18/%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80%E4%B9%8B%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<p><fancybox><img src="https://image.gslb.dawnlab.me/43c66317465dc346967bc541fc0ca7e8.png" alt=""></fancybox></p><p>实现三栏布局….</p><a id="more"></a><h1 id="三栏布局的定义"><a href="#三栏布局的定义" class="headerlink" title="三栏布局的定义"></a>三栏布局的定义</h1><p>三栏布局，顾名思义就是两边固定，中间自适应。</p><p>开写…..</p><h1 id="1-使用-BFC"><a href="#1-使用-BFC" class="headerlink" title="1. 使用 BFC"></a>1. 使用 BFC</h1><p>实现原理：BFC 元素不会与浮动元素重叠。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">            font-size: 30px;</span><br><span class="line">            color: rgb(224, 224, 224);</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 185px;</span><br><span class="line">        &#125;</span><br><span class="line">        h1&#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 80px;</span><br><span class="line">            color: rgb(38, 52, 99);</span><br><span class="line">            font-size: 28px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>, <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">            width: 180px;</span><br><span class="line">            height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">            background-color: rgb(104, 104, 104);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">            float: right;</span><br><span class="line">            background-color: rgb(133, 133, 133);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span>&#123;</span></span><br><span class="line">            overflow: hidden;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: rgb(112, 112, 112);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>三栏布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 先浮动，再创建 BFC --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-使用-float-margin-实现"><a href="#2-使用-float-margin-实现" class="headerlink" title="2. 使用 float + margin 实现"></a>2. 使用 float + margin 实现</h1><p>实现原理：使用 margin 替代浮动元素占据的位置。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">            font-size: 30px;</span><br><span class="line">            color: rgb(224, 224, 224);</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 185px;</span><br><span class="line">        &#125;</span><br><span class="line">        h1&#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 80px;</span><br><span class="line">            color: rgb(38, 52, 99);</span><br><span class="line">            font-size: 28px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>, <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">            width: 180px;</span><br><span class="line">            height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">            background-color: rgb(104, 104, 104);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">            float: right;</span><br><span class="line">            background-color: rgb(133, 133, 133);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 修改此行代码即可 */</span></span></span><br><span class="line">            margin: 0px 190px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: rgb(112, 112, 112);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>三栏布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3-flex-实现"><a href="#3-flex-实现" class="headerlink" title="3. flex 实现"></a>3. flex 实现</h1><p>实现原理：父元素使用 flex ，子元素定义 flex: 1 或 flex: auto 会自动填充宽度。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">            font-size: 30px;</span><br><span class="line">            color: rgb(224, 224, 224);</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 185px;</span><br><span class="line">        &#125;</span><br><span class="line">        h1&#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 80px;</span><br><span class="line">            color: rgb(38, 52, 99);</span><br><span class="line">            font-size: 28px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>, <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">            width: 180px;</span><br><span class="line">            height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">            background-color: rgb(104, 104, 104);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">            background-color: rgb(133, 133, 133);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span>&#123;</span></span><br><span class="line">            flex: 1;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: rgb(112, 112, 112);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.warp</span> &#123;</span></span><br><span class="line">            display: flex;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>三栏布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="4-使用-absolute-margin-实现"><a href="#4-使用-absolute-margin-实现" class="headerlink" title="4. 使用 absolute + margin 实现"></a>4. 使用 absolute + margin 实现</h1><p>实现原理：同 float + margin 一样。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">            font-size: 30px;</span><br><span class="line">            color: rgb(224, 224, 224);</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 185px;</span><br><span class="line">        &#125;</span><br><span class="line">        h1&#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 80px;</span><br><span class="line">            color: rgb(38, 52, 99);</span><br><span class="line">            font-size: 28px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>, <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">            width: 180px;</span><br><span class="line">            height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">            background-color: rgb(104, 104, 104);</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 0;</span><br><span class="line">            left: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">            background-color: rgb(133, 133, 133);</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 0;</span><br><span class="line">            right: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span>&#123;</span></span><br><span class="line">            height: 200px;</span><br><span class="line">            margin: 0px 200px;</span><br><span class="line">            background-color: rgb(112, 112, 112);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.warp</span> &#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>三栏布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="5-使用-Table-布局实现"><a href="#5-使用-Table-布局实现" class="headerlink" title="5. 使用 Table 布局实现"></a>5. 使用 Table 布局实现</h1><p>实现原理：父元素展示为 table，子元素展示为 table-cell</p><p><strong>注意：</strong>父元素宽度设置为 100% </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">            font-size: 30px;</span><br><span class="line">            color: rgb(224, 224, 224);</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 185px;</span><br><span class="line">        &#125;</span><br><span class="line">        h1&#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 80px;</span><br><span class="line">            color: rgb(38, 52, 99);</span><br><span class="line">            font-size: 28px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>, <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">            width: 180px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            display: table-cell;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">            background-color: rgb(104, 104, 104);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">            background-color: rgb(133, 133, 133);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span>&#123;</span></span><br><span class="line">            display: table-cell;</span><br><span class="line">            background-color: rgb(112, 112, 112);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.warp</span> &#123;</span></span><br><span class="line">            display: table;</span><br><span class="line">            width: 100%;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>三栏布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="6-使用-inner-block-calc-实现"><a href="#6-使用-inner-block-calc-实现" class="headerlink" title="6. 使用 inner-block + calc 实现"></a>6. 使用 inner-block + calc 实现</h1><p>实现原理：当展示为 inner-block 时需要指定宽度，此时就使用 calc 计算宽度</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">            font-size: 30px;</span><br><span class="line">            color: rgb(224, 224, 224);</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 185px;</span><br><span class="line">        &#125;</span><br><span class="line">        h1&#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 80px;</span><br><span class="line">            color: rgb(38, 52, 99);</span><br><span class="line">            font-size: 28px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>, <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">            width: 180px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            display: inline-block;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">            background-color: rgb(104, 104, 104);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">            background-color: rgb(133, 133, 133);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span>&#123;</span></span><br><span class="line">            background-color: rgb(112, 112, 112);</span><br><span class="line">            width: calc( 100% - 400px );</span><br><span class="line">            height: 200px;</span><br><span class="line">            display: inline-block;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>三栏布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="7-使用-grid-布局"><a href="#7-使用-grid-布局" class="headerlink" title="7. 使用 grid 布局"></a>7. 使用 grid 布局</h1><p>实现原理：grid 可以使用 1fr 划分等分和自适应</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">            font-size: 30px;</span><br><span class="line">            color: rgb(224, 224, 224);</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 185px;</span><br><span class="line">        &#125;</span><br><span class="line">        h1&#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 80px;</span><br><span class="line">            color: rgb(38, 52, 99);</span><br><span class="line">            font-size: 28px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>, <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">            height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">            background-color: rgb(104, 104, 104);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">            background-color: rgb(133, 133, 133);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span>&#123;</span></span><br><span class="line">            background-color: rgb(112, 112, 112);</span><br><span class="line">            height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.warp</span> &#123;</span></span><br><span class="line">            display: grid;</span><br><span class="line">            grid-template-columns: 200px 1fr 200px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>三栏布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="8-圣杯布局（难使）"><a href="#8-圣杯布局（难使）" class="headerlink" title="8. 圣杯布局（难使）"></a>8. 圣杯布局（难使）</h1><p>实现原理：使用负 margin 使浮动元素重新定位，结合 position 定位元素….</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">            font-size: 30px;</span><br><span class="line">            color: rgb(224, 224, 224);</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 185px;</span><br><span class="line">        &#125;</span><br><span class="line">        h1&#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 80px;</span><br><span class="line">            color: rgb(38, 52, 99);</span><br><span class="line">            font-size: 28px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>, <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">            height: 200px;</span><br><span class="line">            width: 180px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">            background-color: rgb(122, 122, 122);</span><br><span class="line">            float: left;</span><br><span class="line">            position: relative;</span><br><span class="line">            margin-left: -100%;</span><br><span class="line">            left: -200px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">            background-color: rgb(133, 133, 133);</span><br><span class="line">            position: relative;</span><br><span class="line">            float: left;</span><br><span class="line">            margin-left: -200px;</span><br><span class="line">            right: -220px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span>&#123;</span></span><br><span class="line">            background-color: rgb(112, 112, 112);</span><br><span class="line">            height: 200px;</span><br><span class="line">            width: 100%;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.warp</span> &#123;</span></span><br><span class="line">            margin: 0px 200px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>三栏布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>最后还有一个双飞翼布局实现，但是代码布局写起来不直观，且 css 搭配复杂，不推荐……</p><p>需要知道 margin 为负值时的结果..</p><p>总的来说，还是不难的….</p><h1 id="参考材料"><a href="#参考材料" class="headerlink" title="参考材料"></a>参考材料</h1><p><a href="https://juejin.im/post/5daebfc2518825502a44602a#heading-0" target="_blank" rel="noopener">面试官：请实现三栏布局，尽可能多的方式</a></p><p><a href="https://zhuanlan.zhihu.com/p/25070186?refer=learncoding" target="_blank" rel="noopener">详解 CSS 七种三栏布局技巧</a></p><p><a href="https://blog.csdn.net/twoto3_/article/details/52250602" target="_blank" rel="noopener">margin为负值产生的影响和常见布局应用</a></p><p><a href="https://www.cnblogs.com/Anita-meng/p/7803464.html" target="_blank" rel="noopener">margin负值的作用</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css之BFC</title>
      <link href="/2020/02/17/css%E4%B9%8BBFC/"/>
      <url>/2020/02/17/css%E4%B9%8BBFC/</url>
      
        <content type="html"><![CDATA[<p><fancybox><img src="https://image.gslb.dawnlab.me/d51bb30b65a731d78f2344ca8bb237a7.png" alt=""></fancybox></p><p>从 BFC 解决的问题看待 BFC…..</p><a id="more"></a><h1 id="1-BFC是什么？"><a href="#1-BFC是什么？" class="headerlink" title="1. BFC是什么？"></a>1. BFC是什么？</h1><p>查阅了一些资料，觉得这个解释很合理：</p><p><code>Block fomatting context</code> = <code>block-level box</code> + <code>Formatting Context</code></p><p><strong>BFC 定义</strong></p><p>BFC(Block formatting context)直译为”块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。 </p><h1 id="2-BFC的作用"><a href="#2-BFC的作用" class="headerlink" title="2. BFC的作用"></a>2. BFC的作用</h1><ol><li>解决 margin 重叠问题（父子重叠、兄弟重叠）</li><li>和浮动元素产生边界</li><li>解决浮动元素的父元素高度塌陷</li></ol><p>总的来说，就是 BFC 布局规则的作用….</p><h1 id="3-BFC布局规则："><a href="#3-BFC布局规则：" class="headerlink" title="3. BFC布局规则："></a>3. BFC布局规则：</h1><ol><li>内部的 Box 会在垂直方向，一个接一个地放置。</li><li>Box垂直方向的距离由 margin 决定。属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠</li><li>每个元素的 margin box 的左边， 与包含块 border box 的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。（这说明BFC中子元素不会超出他的包含块，而 position 为 absolute 的元素可以超出他的包含块边界）</li><li>BFC的区域不会与 float box 重叠。</li><li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li><li>计算 BFC 的高度时，浮动元素也参与计算</li></ol><h1 id="4-哪些元素会生成BFC"><a href="#4-哪些元素会生成BFC" class="headerlink" title="4. 哪些元素会生成BFC?"></a>4. 哪些元素会生成BFC?</h1><ol><li>根元素</li><li>float属性不为none</li><li>position为absolute或fixed</li><li>display为inline-block, table-cell, table-caption, flex, inline-flex</li><li>overflow不为visible</li></ol><h1 id="5-BFC-的使用场景对应布局规则"><a href="#5-BFC-的使用场景对应布局规则" class="headerlink" title="5. BFC 的使用场景对应布局规则"></a>5. BFC 的使用场景对应布局规则</h1><h2 id="5-1-清除-margin-重叠"><a href="#5-1-清除-margin-重叠" class="headerlink" title="5.1 清除 margin 重叠"></a>5.1 清除 margin 重叠</h2><p>由布局规则第二条：</p><blockquote><p>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠</p></blockquote><p><strong>margin 重叠示例</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line">        padding: 0;</span><br><span class="line">        margin: 0;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span>, <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line">        font-size: 30px;</span><br><span class="line">        text-align: center;</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        padding: 20px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        width: 300px;</span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 10<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        background-color: aquamarine;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line">        margin: 50px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line">        margin: 20px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span>box1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span>box2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>运行效果</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/e2d29a13723fd265c05b02759f8fae00.png" alt=""></fancybox></p><p><strong>形成 BFC 解决重叠</strong></p><p>在 box2 外包一个 wrap 元素，并形成 BFC。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line">        padding: 0;</span><br><span class="line">        margin: 0;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span>, <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line">        font-size: 30px;</span><br><span class="line">        text-align: center;</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        padding: 20px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        width: 300px;</span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 10<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        background-color: aquamarine;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line">        margin: 50px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line">        margin: 20px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.warp</span> &#123;</span></span><br><span class="line">        overflow: hidden;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span>box1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span>box2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/c217069127bca09162acdd90b0a81a25.png" alt=""></fancybox></p><h2 id="5-2-和浮动元素产生边界"><a href="#5-2-和浮动元素产生边界" class="headerlink" title="5.2 和浮动元素产生边界"></a>5.2 和浮动元素产生边界</h2><p>由布局规则第四条：</p><blockquote><p>BFC的区域不会与float box重叠。</p></blockquote><p><strong>情况示例</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line">        padding: 0;</span><br><span class="line">        margin: 0;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.warp</span> &#123;</span></span><br><span class="line">        background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.float</span>&#123;</span></span><br><span class="line">        float: left;</span><br><span class="line">        width: 40px;</span><br><span class="line">        height: 40px;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-box"</span>&gt;</span></span><br><span class="line">        我是一些文字，我有很多的文字-------------------------------</span><br><span class="line">        我是一些文字，我有很多的文字-------------------------------</span><br><span class="line">        我是一些文字，我有很多的文字-------------------------------</span><br><span class="line">        我是一些文字，我有很多的文字-------------------------------</span><br><span class="line">        ---------------------------------------------------------</span><br><span class="line">        -----------</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/c30f6d04059be6f2b2692e21976922d8.png" alt=""></fancybox></p><p><strong>形成 BFC 和浮动元素产生边界</strong></p><p>让 text-box 形成 BFC，使他浮动元素产生边界。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    * &#123;</span><br><span class="line">        padding: <span class="number">0</span>;</span><br><span class="line">        margin: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    .warp &#123;</span><br><span class="line">        background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line">    .float&#123;</span><br><span class="line">        float: left;</span><br><span class="line">        width: <span class="number">40</span>px;</span><br><span class="line">        height: <span class="number">40</span>px;</span><br><span class="line">        background-color: #ccc;</span><br><span class="line">    &#125;</span><br><span class="line">    .text-box&#123;</span><br><span class="line">        overflow: auto;</span><br><span class="line">        background-color: paleturquoise;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;div class="warp"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="float"&gt;&lt;/</span>div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"text-box"</span>&gt;</span><br><span class="line">        我是一些文字，我有很多的文字-------------------------------</span><br><span class="line">        我是一些文字，我有很多的文字-------------------------------</span><br><span class="line">        我是一些文字，我有很多的文字-------------------------------</span><br><span class="line">        我是一些文字，我有很多的文字-------------------------------</span><br><span class="line">        ---------------------------------------------------------</span><br><span class="line">        -----------</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/a533764b0fa4c1f11e2cc04c9f11900b.png" alt=""></fancybox></p><h2 id="5-3-解决浮动元素的父元素高度塌陷"><a href="#5-3-解决浮动元素的父元素高度塌陷" class="headerlink" title="5.3 解决浮动元素的父元素高度塌陷"></a>5.3 解决浮动元素的父元素高度塌陷</h2><p>由布局规则第六条：</p><blockquote><p>计算 BFC 的高度时，浮动元素也参与计算</p></blockquote><p><strong>高度塌陷的情况：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line">        padding: 0;</span><br><span class="line">        margin: 0;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.warp</span> &#123;</span></span><br><span class="line">        background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.float</span>&#123;</span></span><br><span class="line">        float: left;</span><br><span class="line">        width: 40px;</span><br><span class="line">        height: 40px;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/cff0f5d101678dfa39b05da53e814c2e.png" alt=""></fancybox></p><p><strong>父元素形成 BFC 解决高度塌陷</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line">        padding: 0;</span><br><span class="line">        margin: 0;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.warp</span> &#123;</span></span><br><span class="line">        background-color: red;</span><br><span class="line">        overflow: auto;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.float</span>&#123;</span></span><br><span class="line">        float: left;</span><br><span class="line">        width: 40px;</span><br><span class="line">        height: 40px;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/7cf82919a6374ee38b10edb6dde709b3.png" alt=""></fancybox></p><h1 id="6-参考材料"><a href="#6-参考材料" class="headerlink" title="6. 参考材料"></a>6. 参考材料</h1><p><a href="https://www.html.cn/qa/css3/13757.html" target="_blank" rel="noopener">CSS什么是BFC？</a></p><p><a href="https://github.com/zuopf769/notebook/blob/master/fe/BFC%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/README.md" target="_blank" rel="noopener">史上最全面、最透彻的BFC原理剖析</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context" target="_blank" rel="noopener">MDN-块格式化上下文</a></p><h1 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h1><figure class="highlight html"><figcaption><span>父元素形成 BFC 解决高度塌陷</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.warp</span> &#123;</span></span><br><span class="line">            background-color: red;</span><br><span class="line">            overflow: auto;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.float</span>&#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">            width: 40px;</span><br><span class="line">            height: 40px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css之盒模型</title>
      <link href="/2020/02/17/css%E4%B9%8B%E7%9B%92%E6%A8%A1%E5%9E%8B/"/>
      <url>/2020/02/17/css%E4%B9%8B%E7%9B%92%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p><fancybox><img src="https://image.gslb.dawnlab.me/fc2a80e8075489dd5f57b4c6262a8113.png" alt=""></fancybox></p><p>盒子模型…</p><a id="more"></a><h1 id="1-简单盒模型"><a href="#1-简单盒模型" class="headerlink" title="1. 简单盒模型"></a>1. 简单盒模型</h1><p>我在查资料的时候，看到一篇文章很好的说明了两种模型的关系：</p><blockquote><p>通常情况下，被更多人认知的盒模型就是简单盒模型，简单盒模型在早期IE时期有一种怪异模式下的解析方式，也就是现在的border-box，后来W3C制定的标准以后规定在标准解析模式下使用标准盒模型(content-box)。</p><footer><strong>你真的了解盒模型吗？</strong><cite><a href="https://rainey.space/2016/07/02/Ni_Zhen_De_Liao_Jie_He_Mo_Xing_Ma/" target="_blank" rel="noopener">rainey.space/2016/07/02/Ni_Zhen_De_Liao_Jie_He_Mo_Xing_Ma</a></cite></footer></blockquote><p>文中有这样一个段子：</p><blockquote><p>IE：我觉得盒模型应该是这样的，blahblah。<br>W3C：明显应该是这样的才对，blahblah。<br>结果是 IE 在怪异模式下用了「不标准」的盒模型，标准模式下用了「标准」的盒模型。<br>围观群众：听说 IE 的盒模型不标准。<br>……多年过去……<br>W3C：感觉还是 IE 的那个模型比较好。但我们已经回不去了……算了加个属性支持一下 IE 那种模式吧。<br><code>box-sizing</code> 这货就是用来擦屁股的，我从来没见过有人用 <code>padding-box</code> 的……<br>作者：顾轶灵<br>链接：<a href="https://www.zhihu.com/question/25509268/answer/30949718" target="_blank" rel="noopener">https://www.zhihu.com/question/25509268/answer/30949718</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><h1 id="2-测试代码"><a href="#2-测试代码" class="headerlink" title="2. 测试代码"></a>2. 测试代码</h1><p><fancybox><img src="https://image.gslb.dawnlab.me/55a3a646889a1ae518708c376cc60805.png" alt=""></fancybox></p><p>代码放在文末</p><p><strong>运行结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/415425ebeafaf5ae1cf5a73ec42a31ee.png" alt=""></fancybox></p><h1 id="3-box-sizing-content-box"><a href="#3-box-sizing-content-box" class="headerlink" title="3. box-sizing: content-box"></a>3. box-sizing: content-box</h1><p><fancybox><img src="https://image.gslb.dawnlab.me/4cac638ea37d79552dc885573710f8b1.png" alt=""></fancybox></p><h1 id="4-box-sizing-border-box"><a href="#4-box-sizing-border-box" class="headerlink" title="4. box-sizing: border-box"></a>4. box-sizing: border-box</h1><p><fancybox><img src="https://image.gslb.dawnlab.me/0b50d7702ec405a4f4ab30fd35323861.png" alt=""></fancybox></p><h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h1><p>在浏览器中，box-sizing 默认是 content-box</p><ol><li><p>content-box（标准盒模型）<br>width = 内容的宽度<br>height = 内容的高度</p></li><li><p>border-box（怪异盒模型）<br>width = border + padding + 内容的宽度<br>height = border + padding + 内容的高度</p></li></ol><h1 id="6-参考材料"><a href="#6-参考材料" class="headerlink" title="6. 参考材料"></a>6. 参考材料</h1><p><a href="https://rainey.space/2016/07/02/Ni_Zhen_De_Liao_Jie_He_Mo_Xing_Ma/" target="_blank" rel="noopener">你真的了解盒模型吗？</a></p><h1 id="7-测试代码"><a href="#7-测试代码" class="headerlink" title="7. 测试代码"></a>7. 测试代码</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.content-box</span>, <span class="selector-class">.border-box</span> &#123;</span></span><br><span class="line">            font-size: 30px;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">            display: flex;</span><br><span class="line">            align-items: center;</span><br><span class="line">            justify-content: center;</span><br><span class="line">            padding: 20px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            width: 300px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 10<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">            background-color: aquamarine;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.content-box</span> &#123;</span></span><br><span class="line">            margin: 80px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.border-box</span> &#123;</span></span><br><span class="line">            margin: 30px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content-box"</span>&gt;</span>margin: 80px<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-box"</span>&gt;</span>margin: 30px<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法之排序</title>
      <link href="/2020/02/15/%E7%AE%97%E6%B3%95%E4%B9%8B%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/02/15/%E7%AE%97%E6%B3%95%E4%B9%8B%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>总结常用排序算法.</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学数据结构已经是大二上学期的事了，</p><p>写一下常用的排序算法。</p><h1 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1. 冒泡排序"></a>1. 冒泡排序</h1><p><fancybox><img src="https://image.gslb.dawnlab.me/1a58b4df14ae64a31288c7957ea43070.png" alt=""></fancybox></p><h2 id="1-1-编程思路"><a href="#1-1-编程思路" class="headerlink" title="1.1 编程思路"></a>1.1 编程思路</h2><p>使用两层循环，</p><ul><li>外层循环：执行 i 次，每一次排好一个元素。</li><li>内层循环：每执行一次，就挑选出数组中第 i 个位置的元素，并将该元素放到 i 位置。</li></ul><h2 id="1-2-编程要点"><a href="#1-2-编程要点" class="headerlink" title="1.2 编程要点"></a>1.2 编程要点</h2><p>在内层循环，相邻元素依次比较，把最大或最小元素放到最后。</p><h2 id="1-3-代码实现"><a href="#1-3-代码实现" class="headerlink" title="1.3 代码实现"></a>1.3 代码实现</h2><figure class="highlight js"><figcaption><span>冒泡排序</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [ <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">6</span> ]</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param &#123; array &#125; arr 数组</span></span><br><span class="line"><span class="comment"> * @param &#123; boolean &#125; asc 是否升序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bobble</span>(<span class="params"> arr, asc = true </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i ++ )&#123;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr.length; j ++ )&#123;</span><br><span class="line">            <span class="comment">// 升序</span></span><br><span class="line">            <span class="keyword">if</span>( asc )&#123;</span><br><span class="line">                <span class="keyword">if</span>( arr[j] &lt; arr[j + <span class="number">1</span>] )&#123;</span><br><span class="line">                    [ arr[j+<span class="number">1</span>], arr[j] ] = [ arr[j], arr[j+<span class="number">1</span>] ]</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">// 降序</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>( arr[j+<span class="number">1</span>] &lt; arr[j] )&#123;</span><br><span class="line">                    [ arr[j+<span class="number">1</span>], arr[j] ] = [ arr[j], arr[j+<span class="number">1</span>] ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">`外层循环第<span class="subst">$&#123; i &#125;</span>次执行的结果：`</span>,arr )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( bobble( arr, <span class="literal">true</span> ) )</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><fancybox><img src="https://image.gslb.dawnlab.me/a236cf5691694704cd23494516c97198.png" alt=""></fancybox></p><p>根据代码可知，代码有待优化。</p><h2 id="1-4-代码优化"><a href="#1-4-代码优化" class="headerlink" title="1. 4 代码优化"></a>1. 4 代码优化</h2><p>优化点：</p><ol><li>可知，外层循环每执行一次，就有一个元素在尾部排好序，则在内部循环中，可以减少后面 i 次不必要的比较。</li><li>当外层循环执行到最后一次时，只有一个元素，则可以不必再比较，则外层循环可以减 1 </li></ol><figure class="highlight js"><figcaption><span>冒泡排序优化</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bobble</span>(<span class="params"> arr, asc = true </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i ++ )&#123;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j ++ )&#123;</span><br><span class="line">            <span class="comment">// 升序</span></span><br><span class="line">            <span class="keyword">if</span>( asc )&#123;</span><br><span class="line">                <span class="keyword">if</span>( arr[j] &lt; arr[j + <span class="number">1</span>] )&#123;</span><br><span class="line">                    [ arr[j+<span class="number">1</span>], arr[j] ] = [ arr[j], arr[j+<span class="number">1</span>] ]</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">// 降序</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>( arr[j+<span class="number">1</span>] &lt; arr[j] )&#123;</span><br><span class="line">                    [ arr[j+<span class="number">1</span>], arr[j] ] = [ arr[j], arr[j+<span class="number">1</span>] ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">`外层循环第<span class="subst">$&#123; i &#125;</span>次执行的结果：`</span>,arr )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><fancybox><img src="https://image.gslb.dawnlab.me/4eb2f917381073e959cd342fcc5f4454.png" alt=""></fancybox></p><h1 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2. 选择排序"></a>2. 选择排序</h1><p><fancybox><img src="https://image.gslb.dawnlab.me/f37218b2ce6f2f518bb3e438b3082db1.png" alt=""></fancybox></p><h2 id="2-1-编程思路"><a href="#2-1-编程思路" class="headerlink" title="2.1 编程思路"></a>2.1 编程思路</h2><p>从未排序的部分选择最大或最小的值，将其排在有序序列的前或后。</p><ul><li>升序：选择未排序部分的最小值，与排序部分后第一个元素交换</li><li>降序：选择未排序部分的最大值，与排序部分后第一个元素交换</li></ul><p><strong>实现：</strong>使用两层循环</p><ol><li>外层循环：执行 i - 1 次，将内层循环挑选出的元素放到已排序部分的尾部。</li><li>内层循环：挑选出未排序部分最小值或最大值的下标。</li></ol><h2 id="2-2-编程要点"><a href="#2-2-编程要点" class="headerlink" title="2.2 编程要点"></a>2.2 编程要点</h2><ol><li>将数组用外层循环分为两段</li><li>每次外层循环时，使用一个 flagIndex 标记来标记内层循环挑选出来的元素的下标</li><li>外层循环将挑选出来的元素放到排好序的末尾</li></ol><h2 id="2-3-代码实现"><a href="#2-3-代码实现" class="headerlink" title="2.3  代码实现"></a>2.3  代码实现</h2><figure class="highlight js"><figcaption><span>选择排序</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [ <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">6</span> ]</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param &#123; array &#125; arr 数组</span></span><br><span class="line"><span class="comment"> * @param &#123; boolean &#125; asc 是否升序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectSort</span>(<span class="params"> arr, asc = true </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i ++ )&#123;</span><br><span class="line">        <span class="comment">// 记住未排序部分的最小值或最大值的下标</span></span><br><span class="line">        <span class="keyword">let</span> flagIndex = i</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">let</span> j = i; j &lt; arr.length; j ++ )&#123;</span><br><span class="line">            <span class="keyword">if</span>( asc )&#123;</span><br><span class="line">                <span class="keyword">if</span>( arr[flagIndex] &gt; arr[j] )&#123;</span><br><span class="line">                    flagIndex = j</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>( arr[flagIndex] &lt; arr[j] )&#123;</span><br><span class="line">                    flagIndex = j</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        [ arr[flagIndex], arr[i] ] = [ arr[i], arr[flagIndex] ]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( selectSort( arr, <span class="literal">false</span> ) )</span><br></pre></td></tr></table></figure><h1 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3. 插入排序"></a>3. 插入排序</h1><p><fancybox><img src="https://image.gslb.dawnlab.me/f8e978f9c8fceeae5dc707da9e8b342d.png" alt=""></fancybox></p><h2 id="3-1-编程思路"><a href="#3-1-编程思路" class="headerlink" title="3.1 编程思路"></a>3.1 编程思路</h2><p>将数组以外层循环次数为基准分成两段，数组前段：已经排好序；数组后端：未排序</p><p>将未排序部分的第一个元素插入到排好序的部分中。</p><p><strong>实现思路：</strong>使用两层循环</p><ol><li>外层循环：执行 i - 1 次，每一次将后面的一个元素排进前面部分。</li><li>内层循环：将未排序部分的第一个元素插入到排好序的部分中</li></ol><h2 id="3-2-编程要点"><a href="#3-2-编程要点" class="headerlink" title="3.2 编程要点"></a>3.2 编程要点</h2><p>内层循环：已排序部分的后一个元素向前<strong>单向冒泡</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [ <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">6</span> ]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insetSort</span>(<span class="params"> arr </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i ++ )&#123;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">let</span> j = i + <span class="number">1</span>; j &gt;= <span class="number">0</span>; j -- )&#123;</span><br><span class="line">            <span class="comment">// 单向冒泡</span></span><br><span class="line">            <span class="keyword">if</span>( arr[j] &lt; arr[ j - <span class="number">1</span> ] )&#123;</span><br><span class="line">                [ arr[ j - <span class="number">1</span> ], arr[j] ] = [ arr[j], arr[ j - <span class="number">1</span> ] ]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( insetSort( arr ) )</span><br></pre></td></tr></table></figure><h1 id="4-快速排序"><a href="#4-快速排序" class="headerlink" title="4. 快速排序"></a>4. 快速排序</h1><p><fancybox><img src="https://image.gslb.dawnlab.me/cc11726a27ac11a43d2e140a6004f32d.png" alt=""></fancybox></p><h2 id="4-1-编程思路"><a href="#4-1-编程思路" class="headerlink" title="4.1 编程思路"></a>4.1 编程思路</h2><p>寻找一个中点，将原数组分为三部分</p><ol><li>第一部分：元素的值都比中点的值小</li><li>第二部分：当前元素</li><li>第三部分：元素的值都比中点的值大</li></ol><p>依次递归，当分出数组的长度小于等于 1 时，返回数组</p><p>最后把三部分合并到一起。</p><p><strong>实现思路：</strong></p><p>使用三个变量保存三部分的结果，最后合并到一起。</p><h2 id="4-2-编程要点"><a href="#4-2-编程要点" class="headerlink" title="4.2 编程要点"></a>4.2 编程要点</h2><p>将原数组分成三部分保存下来，返回合并的值。</p><h2 id="4-3-代码实现"><a href="#4-3-代码实现" class="headerlink" title="4.3  代码实现"></a>4.3  代码实现</h2><figure class="highlight js"><figcaption><span>快速排序</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [ <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">6</span> ]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quick</span>(<span class="params"> arr </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( arr.length &lt;= <span class="number">1</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> arr </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> pointIndex = <span class="built_in">Math</span>.floor( arr.length / <span class="number">2</span> )</span><br><span class="line">    <span class="keyword">let</span> pointValue = arr.splice( pointIndex, <span class="number">1</span> )[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">let</span> lArr = []</span><br><span class="line">    <span class="keyword">let</span> rArr = []</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i ++ )&#123;</span><br><span class="line">        arr[i] &gt; pointValue ? rArr.push( arr[i] ) : lArr.push( arr[i] )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [ ...quick(lArr), pointValue, ...quick(rArr) ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( quick( arr ) )</span><br></pre></td></tr></table></figure><h1 id="5-快速排序（原数组操作方式）"><a href="#5-快速排序（原数组操作方式）" class="headerlink" title="5. 快速排序（原数组操作方式）"></a>5. 快速排序（原数组操作方式）</h1><p><fancybox><img src="https://image.gslb.dawnlab.me/a29a951f083c80f8506d235edbc0f7a4.png" alt=""></fancybox></p><h2 id="5-1-编程思路"><a href="#5-1-编程思路" class="headerlink" title="5.1 编程思路"></a>5.1 编程思路</h2><p>在原数组上操作，取一个中值，操作原素组，将原数组以该中值为基点分成两部分，记录下标，重复进行此操作，当开始的下标和结束的下标相等时结束递归，最后，整个数组就排序成功。</p><h2 id="5-2-编程要点"><a href="#5-2-编程要点" class="headerlink" title="5.2 编程要点"></a>5.2 编程要点</h2><ol><li>将原数组以中值为基点分成三部分。</li><li>每次递归，传入正确的下标</li><li>获取中值下标函数的编写</li></ol><p><strong>获取中值下标函数</strong></p><p>作用：将数组段以左起点为中点，将此段数组分成三段，返回中值的下标。</p><p>思路：</p><ol><li>取出起点的值作为中点</li><li>使用变量 j 为起始值的下标</li><li>使用一个循环，循环将此段数组分为三段（满足条件–&gt;交换位置–&gt;j++）</li><li>返回中值下标 j</li></ol><h2 id="5-3-代码实现"><a href="#5-3-代码实现" class="headerlink" title="5.3  代码实现"></a>5.3  代码实现</h2><figure class="highlight js"><figcaption><span>快速排序（操作原数组方式）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [ <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">6</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函数的作用：获取中值下标</span></span><br><span class="line"><span class="comment"> * 以该段数组尾部的值作为基准，将数组分为两半，返回基准值的下标</span></span><br><span class="line"><span class="comment"> * @param &#123; Array &#125; arr  原素组</span></span><br><span class="line"><span class="comment"> * @param &#123; number &#125; start 操作开始的地方</span></span><br><span class="line"><span class="comment"> * @param &#123; number &#125; end 操作结束的地方</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCenterIndex</span>(<span class="params"> arr, start, end </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> j = start</span><br><span class="line">    <span class="keyword">let</span> pValue = arr[end]</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">let</span> i = start; i &lt;= end; i ++ )&#123;</span><br><span class="line">        <span class="keyword">if</span>( arr[i] &lt;= pValue )&#123;</span><br><span class="line">            [ arr[i], arr[j] ] = [ arr[j], arr[i] ]</span><br><span class="line">            j ++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> j - <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params"> arr, start = <span class="number">0</span>, end = arr.length <span class="number">-1</span> </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( end - start &lt; <span class="number">1</span> ) <span class="keyword">return</span> arr</span><br><span class="line">    <span class="keyword">let</span> centerIndex = getCenterIndex( arr, start, end )</span><br><span class="line">    <span class="comment">// 将左右两边依次排序</span></span><br><span class="line">    quickSort( arr, start, centerIndex - <span class="number">1</span> )</span><br><span class="line">    quickSort( arr, centerIndex + <span class="number">1</span>, end )</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( quickSort( arr ) )</span><br></pre></td></tr></table></figure><h1 id="6-归并排序"><a href="#6-归并排序" class="headerlink" title="6. 归并排序"></a>6. 归并排序</h1><p><fancybox><img src="https://image.gslb.dawnlab.me/6521052efb10fdb70ec72da8bbde203f.png" alt=""></fancybox></p><h2 id="6-1-编程思路"><a href="#6-1-编程思路" class="headerlink" title="6.1 编程思路"></a>6.1 编程思路</h2><ol><li>使用递归将数组递归拆分直至只有一个元素</li><li>将数组依次合并</li></ol><h2 id="6-2-编程要点"><a href="#6-2-编程要点" class="headerlink" title="6.2 编程要点"></a>6.2 编程要点</h2><p>使用两个函数：</p><ol><li>分函数：将数组进行拆分，直到只有一个元素为止</li><li>合函数：使用队列的思想，将两个两个的数组合并成一个数组</li></ol><h2 id="6-3-代码实现"><a href="#6-3-代码实现" class="headerlink" title="6.3  代码实现"></a>6.3  代码实现</h2><figure class="highlight js"><figcaption><span>归并排序</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [ <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">6</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 归并排序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params"> arr </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( arr.length &lt; <span class="number">2</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> middle = <span class="built_in">Math</span>.floor( arr.length / <span class="number">2</span> )</span><br><span class="line">    <span class="keyword">let</span> left = arr.slice( <span class="number">0</span>, middle )</span><br><span class="line">    <span class="keyword">let</span> right = arr.slice( middle )</span><br><span class="line">    <span class="comment">// 先分再和</span></span><br><span class="line">    <span class="keyword">return</span> merge( mergeSort( left ), mergeSort( right ) )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将分开的数组合并</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params"> l, r </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="comment">// 依次用第一个元素对比 小的元素放到</span></span><br><span class="line">    <span class="keyword">while</span>( l.length &amp;&amp; r.length )&#123;</span><br><span class="line">        <span class="keyword">if</span>( l[<span class="number">0</span>] &lt;= r[<span class="number">0</span>] )&#123;</span><br><span class="line">            res.push( l.shift() )</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.push( r.shift() )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将剩下的元素放到 res 中</span></span><br><span class="line">    <span class="keyword">while</span>( l.length ) res.push( l.shift() )</span><br><span class="line">    <span class="keyword">while</span>( r.length ) res.push( r.shift() )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( mergeSort( arr ) )</span><br></pre></td></tr></table></figure><h1 id="7-未完待续……"><a href="#7-未完待续……" class="headerlink" title="7. 未完待续……"></a>7. 未完待续……</h1><h2 id="7-1-桶排序"><a href="#7-1-桶排序" class="headerlink" title="7.1 桶排序"></a>7.1 桶排序</h2><h2 id="7-2-计数排序"><a href="#7-2-计数排序" class="headerlink" title="7.2 计数排序"></a>7.2 计数排序</h2><h2 id="7-3-希尔排序"><a href="#7-3-希尔排序" class="headerlink" title="7.3 希尔排序"></a>7.3 希尔排序</h2><h1 id="8-参考材料"><a href="#8-参考材料" class="headerlink" title="8. 参考材料"></a>8. 参考材料</h1><p><a href="https://juejin.im/post/5d371aa6e51d455d850d3bbe" target="_blank" rel="noopener">JavaScript 数据结构与算法之美 - 归并排序、快速排序、希尔排序、堆排序</a></p><p><a href="https://juejin.im/post/5d75f77e5188253e4b2f0d3d" target="_blank" rel="noopener">手写算法并记住它：快速排序（最易理解版）</a></p><p><a href="https://juejin.im/post/5d75b4d45188250c992d5919" target="_blank" rel="noopener">手写算法并记住它：快速排序（5行代码简单版）</a></p><p><a href="https://juejin.im/post/5d72201df265da03ca11906d" target="_blank" rel="noopener">手写算法并记住它：插入排序</a></p><p><a href="https://juejin.im/post/5d6f14c5e51d4561f17a5130" target="_blank" rel="noopener">手写算法并记住它：选择排序</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>思路清晰--前端性能优化</title>
      <link href="/2020/02/14/%E6%80%9D%E8%B7%AF%E6%B8%85%E6%99%B0-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2020/02/14/%E6%80%9D%E8%B7%AF%E6%B8%85%E6%99%B0-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="1-原则"><a href="#1-原则" class="headerlink" title="1. 原则"></a>1. 原则</h1><ol><li>多使用内存、缓存或其他方法来存储</li><li>减少 cpu 计算，减少 http 网络请求</li></ol><h1 id="2-从哪里入手"><a href="#2-从哪里入手" class="headerlink" title="2. 从哪里入手"></a>2. 从哪里入手</h1><ol><li>加载页面和静态资源</li><li>页面渲染</li></ol><h2 id="2-1-加载资源优化"><a href="#2-1-加载资源优化" class="headerlink" title="2.1 加载资源优化"></a>2.1 加载资源优化</h2><ol><li>静态资源的压缩和合并</li><li>静态资源缓存</li><li>使用 CDN 让资源加载更快</li><li>使用 SSR 后端渲染，数据直接输出到 HTML 中</li></ol><h2 id="2-2-渲染优化"><a href="#2-2-渲染优化" class="headerlink" title="2.2 渲染优化"></a>2.2 渲染优化</h2><ol><li>CSS 放前面，JS 放后面</li><li>懒加载（图片懒加载、下拉加载更多）</li><li>减少 DOM 查询，对 DOM 查询做缓存</li><li>减少 DOM 操作，多个操作尽量合并在一起执行（例如：插入列表）</li><li>使用事件节流与防抖</li><li>尽早执行操作（ 如：DOMContentLoaded ）</li></ol><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h1><p>简略的概述了一下前端性能的优化。</p><h1 id="4-资源推荐"><a href="#4-资源推荐" class="headerlink" title="4. 资源推荐"></a>4. 资源推荐</h1><p>框架打包优化</p><p><a href="https://juejin.im/post/5cd4d991e51d453a4a357e69" target="_blank" rel="noopener">🚀 记一次前端性能优化</a></p><p><a href="https://csspod.com/frontend-performance-best-practices/" target="_blank" rel="noopener">前端性能优化最佳实践</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mobx与mobx-react实现todoList</title>
      <link href="/2020/02/11/mobx%E4%B8%8Emobx-react%E5%AE%9E%E7%8E%B0todoList/"/>
      <url>/2020/02/11/mobx%E4%B8%8Emobx-react%E5%AE%9E%E7%8E%B0todoList/</url>
      
        <content type="html"><![CDATA[<p>使用 mobx 结合 react 搭建的小 demo….</p><a id="more"></a><p>先看效果图：</p><p><fancybox><img src="https://image.gslb.dawnlab.me/330531fde85d66b06ad388bb580c1fcb.png" alt=""></fancybox></p><p><fancybox><img src="https://image.gslb.dawnlab.me/14ac7263bb6a30480b9833b07e708fb0.png" alt=""></fancybox></p><p>预览地址：<a href="https://curtaintan.github.io/mobx-todoList/react/" target="_blank" rel="noopener">TodoList</a><br>github 地址：<a href="https://github.com/curtainTan/mobx-todoList" target="_blank" rel="noopener">mobx-react — todoList</a></p><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>本文主要介绍 mobx-react 与 mobx 的使用，最后完成 todolist。</p><p>此 demo 全部用 class 组件搭建完成，如需使用 hooks ，请参考<a href="https://mobx-react.js.org/" target="_blank" rel="noopener">mobx与react-hooks</a></p><h1 id="2-环境准备"><a href="#2-环境准备" class="headerlink" title="2. 环境准备"></a>2. 环境准备</h1><p>需要在<a href="http://blog.curtaintan.club/2020/02/11/mobx-%E7%AE%80%E6%98%8E%E5%AD%A6%E4%B9%A0/">mobx—简明学习</a>的基础上。</p><p><strong>安装 react一套</strong>：</p><p><code>yarn add react react-dom prop-types</code></p><p><strong>安装 babel-react相关插件</strong></p><p><code>yarn add @babel/preset-react</code></p><p><strong>安装 mobx-react</strong></p><p><code>yarn add mobx-react</code></p><p><strong>配置 webpack.config.js 文件</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/3e9514b9386a865aef4f966afab7f411.png" alt=""></fancybox></p><p>配置完成，开始编写文件。</p><h1 id="3-mobx-react-说明："><a href="#3-mobx-react-说明：" class="headerlink" title="3. mobx-react 说明："></a>3. mobx-react 说明：</h1><p>看 <a href="https://github.com/mobxjs/mobx-react" target="_blank" rel="noopener">mobx-react 官方文档</a></p><p>可知有如下 api：</p><ol><li>observer(componentClass)</li><li>Observer —- Observer是一个React组件，它将观察者应用于组件中的匿名区域。</li><li>useLocalStore hook</li><li>useAsObservableSource hook</li><li>Server Side Rendering with useStaticRendering（服务端）</li><li>PropTypes</li><li>Provider and inject</li><li>disposeOnUnmount(componentInstance, propertyKey | function | function[])</li></ol><p>可见，有两种 api，一种是针对 componentClass 的，一种是针对 hooks 的。</p><p>我们使用 componentClass，所以主要用到：</p><ol><li>observer(componentClass)   使类重新render</li><li>PropTypes                  判定proptype</li><li>Provider and inject        提供 store 和 注入对应props</li></ol><p>具体的使用，请阅读 <strong><a href="https://github.com/mobxjs/mobx-react" target="_blank" rel="noopener"> 官方文档 </a></strong>， 官方文档写得蛮详细的。</p><h1 id="4-开始编写"><a href="#4-开始编写" class="headerlink" title="4. 开始编写"></a>4. 开始编写</h1><p>文件结构：<br><fancybox><img src="https://image.gslb.dawnlab.me/d3bc60216a0eeede72d6328d81258ed7.png" alt=""></fancybox></p><h2 id="4-1-store-js"><a href="#4-1-store-js" class="headerlink" title="4.1 store.js"></a>4.1 store.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observable, action, computed, observe &#125; <span class="keyword">from</span> <span class="string">"mobx"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span> </span>&#123;</span><br><span class="line">    id = <span class="built_in">Math</span>.random()</span><br><span class="line">    @observable title = <span class="string">""</span></span><br><span class="line">    @observable finished = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">constructor</span>( title )&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title</span><br><span class="line">    &#125;</span><br><span class="line">    @action.bound toggle()&#123;</span><br><span class="line">        <span class="keyword">this</span>.finished = !<span class="keyword">this</span>.finished</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">    @observable todos = []</span><br><span class="line">    disposers = []</span><br><span class="line">    @action.bound createTodo( title )&#123;</span><br><span class="line">        <span class="keyword">this</span>.todos.unshift( <span class="keyword">new</span> Todo( title ) )</span><br><span class="line">    &#125;</span><br><span class="line">    @computed <span class="keyword">get</span> left()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.todos.filter( <span class="function"><span class="params">todo</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> !todo.finished</span><br><span class="line">        &#125;).length</span><br><span class="line">    &#125;</span><br><span class="line">    @action.bound removeTodo( todo )&#123;</span><br><span class="line">        <span class="keyword">this</span>.todos.remove( todo )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        observe( <span class="keyword">this</span>.todos, change =&gt; &#123;</span><br><span class="line">            <span class="keyword">this</span>.disposers.forEach( <span class="function"><span class="params">disposer</span> =&gt;</span> disposer() )</span><br><span class="line">            <span class="keyword">this</span>.disposers = []</span><br><span class="line">            <span class="keyword">for</span>( <span class="keyword">let</span> todo <span class="keyword">of</span> change.object )&#123;</span><br><span class="line">                <span class="keyword">var</span> disposer = observe( todo, change =&gt; &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log( change )</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="keyword">this</span>.disposers.push( disposer )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Store()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ss = &#123;</span><br><span class="line">    store</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ss</span><br></pre></td></tr></table></figure><h2 id="4-2-index-jsx"><a href="#4-2-index-jsx" class="headerlink" title="4.2 index.jsx"></a>4.2 index.jsx</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span></span><br><span class="line"><span class="keyword">import</span> &#123; observer, Provider &#125; <span class="keyword">from</span> <span class="string">"mobx-react"</span></span><br><span class="line"><span class="keyword">import</span> &#123; trace &#125; <span class="keyword">from</span> <span class="string">"mobx"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> TodoHeader <span class="keyword">from</span> <span class="string">"./conponent/TodoHeader.jsx"</span></span><br><span class="line"><span class="keyword">import</span> TodoView <span class="keyword">from</span> <span class="string">"./conponent/TodoView.jsx"</span></span><br><span class="line"><span class="keyword">import</span> TodoFooter <span class="keyword">from</span> <span class="string">"./conponent/TodoFooter.jsx"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ss <span class="keyword">from</span> <span class="string">"./store.js"</span></span><br><span class="line"></span><br><span class="line">@observer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoList</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        trace()</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">"todo-list"</span> &gt;</span><br><span class="line">                &lt;TodoHeader /&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;TodoView /&gt;</span><br><span class="line">                &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">                &lt;TodoFooter /</span>&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render( (</span></span><br><span class="line"><span class="regexp">    &lt;Provider &#123; ...ss &#125; &gt;</span></span><br><span class="line"><span class="regexp">        &lt;TodoList /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/Provider&gt;</span></span><br><span class="line"><span class="regexp">), document.querySelector("#root") )</span></span><br></pre></td></tr></table></figure><h2 id="4-3-TodoFooter-jsx"><a href="#4-3-TodoFooter-jsx" class="headerlink" title="4.3 TodoFooter.jsx"></a>4.3 TodoFooter.jsx</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span></span><br><span class="line"><span class="keyword">import</span> &#123; observer, inject &#125; <span class="keyword">from</span> <span class="string">"mobx-react"</span></span><br><span class="line"><span class="keyword">import</span> &#123; trace &#125; <span class="keyword">from</span> <span class="string">"mobx"</span></span><br><span class="line"></span><br><span class="line">@inject( <span class="function"><span class="params">allStore</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        left: allStore.store.left</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">@observer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoFooter</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        trace()</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;footer&gt;</span><br><span class="line">                &#123; <span class="keyword">this</span>.props.left &#125; items unfinished...</span><br><span class="line">            &lt;<span class="regexp">/footer&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default TodoFooter</span></span><br></pre></td></tr></table></figure><h2 id="4-4-TodoHeader-jsx"><a href="#4-4-TodoHeader-jsx" class="headerlink" title="4.4 TodoHeader.jsx"></a>4.4 TodoHeader.jsx</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span></span><br><span class="line"><span class="keyword">import</span> &#123; observer, inject &#125; <span class="keyword">from</span> <span class="string">"mobx-react"</span></span><br><span class="line"></span><br><span class="line">@inject( <span class="string">"store"</span> )</span><br><span class="line">@observer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoHeader</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        inputValue : <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleSubmit = <span class="function">(<span class="params"> e </span>) =&gt;</span> &#123;</span><br><span class="line">        e.preventDefault()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> store = <span class="keyword">this</span>.props.store</span><br><span class="line">        <span class="keyword">var</span> inputValue = <span class="keyword">this</span>.state.inputValue</span><br><span class="line"></span><br><span class="line">        store.createTodo( inputValue )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.setState(&#123; <span class="attr">inputValue</span>: <span class="string">""</span> &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    handleChange = <span class="function">(<span class="params"> e </span>) =&gt;</span> &#123;</span><br><span class="line">        e.persist()</span><br><span class="line">        <span class="keyword">var</span> inputValue = e.target.value</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            inputValue: inputValue</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;header&gt;</span><br><span class="line">                &lt;form onSubmit=&#123; <span class="keyword">this</span>.handleSubmit &#125; &gt;</span><br><span class="line">                    &lt;input </span><br><span class="line">                    type=<span class="string">"text"</span> </span><br><span class="line">                    onChange=&#123; e =&gt; <span class="keyword">this</span>.handleChange( e )&#125; </span><br><span class="line">                    value=&#123; <span class="keyword">this</span>.state.inputValue &#125;</span><br><span class="line">                    className=<span class="string">"input"</span></span><br><span class="line">                    placeholder=<span class="string">" what deeds to be finished? "</span></span><br><span class="line">                    /&gt;</span><br><span class="line">                &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>header&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> TodoHeader</span><br></pre></td></tr></table></figure><h2 id="4-5-TodoView-jsx"><a href="#4-5-TodoView-jsx" class="headerlink" title="4.5 TodoView.jsx"></a>4.5 TodoView.jsx</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, Fragment &#125; <span class="keyword">from</span> <span class="string">"react"</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">"prop-types"</span></span><br><span class="line"><span class="keyword">import</span> &#123; observer, inject &#125; <span class="keyword">from</span> <span class="string">"mobx-react"</span></span><br><span class="line"></span><br><span class="line">@inject( <span class="string">"store"</span> )</span><br><span class="line">@observer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoView</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">const</span> store = <span class="keyword">this</span>.props.store</span><br><span class="line">        <span class="keyword">const</span> &#123; todos &#125; = store</span><br><span class="line">        <span class="keyword">return</span> todos.map( <span class="function"><span class="params">todo</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                &lt;li key=&#123; todo.id &#125; className=<span class="string">"todo-item"</span>&gt;</span><br><span class="line">                    &lt;TodoItem todo=&#123; todo &#125; /&gt;</span><br><span class="line">                    &lt;span className=<span class="string">"delete"</span> onClick=&#123; e =&gt; store.removeTodo( todo ) &#125; &gt;X&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>li&gt;</span><br><span class="line">            )</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@observer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoItem</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">        todo: PropTypes.shape(&#123;</span><br><span class="line">            id: PropTypes.number.isRequired,</span><br><span class="line">            title: PropTypes.string.isRequired,</span><br><span class="line">            finished: PropTypes.bool.isRequired</span><br><span class="line">        &#125;).isRequired</span><br><span class="line">    &#125;</span><br><span class="line">    handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.props.todo.toggle()</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">const</span> todo = <span class="keyword">this</span>.props.todo</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;Fragment&gt;</span><br><span class="line">                &lt;input </span><br><span class="line">                type=<span class="string">"checkbox"</span> </span><br><span class="line">                className=<span class="string">"toggle"</span> </span><br><span class="line">                checked=&#123; todo.finished &#125; </span><br><span class="line">                onChange=&#123; <span class="keyword">this</span>.handleClick &#125; /&gt;</span><br><span class="line">                &lt;span className=&#123;[<span class="string">"title"</span>, todo.finished &amp;&amp; <span class="string">"finished"</span>].join(<span class="string">" "</span>)&#125; &gt;</span><br><span class="line">                    &#123; todo.title &#125;</span><br><span class="line">                &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>Fragment&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> TodoView</span><br></pre></td></tr></table></figure><h2 id="4-6-html-文件内添加-css-样式"><a href="#4-6-html-文件内添加-css-样式" class="headerlink" title="4.6 html 文件内添加 css 样式"></a>4.6 html 文件内添加 css 样式</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.input</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.todo-item</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.todo-item</span> <span class="selector-class">.toggle</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.todo-item</span> <span class="selector-class">.title</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.todo-item</span> <span class="selector-class">.title</span><span class="selector-class">.finished</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: line-through;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.todo-item</span> <span class="selector-class">.delete</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">footer</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">22px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-性能优化"><a href="#5-性能优化" class="headerlink" title="5. 性能优化"></a>5. 性能优化</h1><p><strong>提升性能三大法则：</strong></p><ol><li>细粒度拆分视图组件</li><li>使用专用组件处理列表</li><li>尽可能晚的结构可观察数据</li></ol><p>上面三大法则，你在上面的代码中，能找到在哪里吗？？</p><p>还有其他的优化点：</p><ol><li>尽早的绑定函数（不要传匿名函数和箭头函数）</li><li>不要使用数组的索引作为 key</li><li>使用小组件</li></ol><p>详情参考：<a href="https://cn.mobx.js.org/best/react-performance.html" target="_blank" rel="noopener">优化 React 组件渲染</a></p><h1 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h1><p>当得到一些点拨过后，再去阅读官方文档，就会收获更多，</p><p>当然也要学会阅读官方文档，官方文档写得都蛮好的。</p><p>写下这篇文章，也算是总结了一下 mobx 相关的知识.</p><p><strong>加油，写下这篇文章希望对你有帮助，与君共勉！！</strong></p><p>有时间，我会把 class 版本改成 hook 版本的。</p><h1 id="7-参考材料"><a href="#7-参考材料" class="headerlink" title="7. 参考材料"></a>7. 参考材料</h1><p><a href="https://www.imooc.com/video/17455" target="_blank" rel="noopener">茵风泳月–mobx入门基础教程</a></p><p><a href="https://cn.mobx.js.org/" target="_blank" rel="noopener">mobx—-官网</a></p><p><a href="https://github.com/mobxjs/mobx-react" target="_blank" rel="noopener">mobx-react 文档</a></p><p><a href="https://mobx-react.js.org/" target="_blank" rel="noopener">mobx-react 官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> mobx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mobx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mobx--简明学习</title>
      <link href="/2020/02/11/mobx-%E7%AE%80%E6%98%8E%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/02/11/mobx-%E7%AE%80%E6%98%8E%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p><fancybox><img src="https://image.gslb.dawnlab.me/6e7e66ff9996ffb60b60ef4706ceb9f2.png" alt=""></fancybox></p><p>mobx 简明学习与实践….</p><a id="more"></a><p><strong>前置环境准备：</strong>请参考：<strong><a href="http://blog.curtaintan.club/2020/02/10/es6-Decorator/">es6—Decorator</a></strong>,并使用 <code>yarn add mobx</code> 安装 mobx 模块。</p><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p><em>学习前，建议仔细阅读一遍 <strong><a href="https://cn.mobx.js.org/" target="_blank" rel="noopener">MobX 介绍</a></strong> 了解 mobx 运行机制。</em></p><p>先看 mobx 官网的文档目录：<br><fancybox><img src="https://image.gslb.dawnlab.me/ec3dc09eacd9da06d5254f2d0355517a.png" alt=""></fancybox></p><p>可以看到，整个库，需要我们学习的就只有三个主要的点：</p><ol><li>observable 相关 —– 创建观察数据</li><li>对 observables 作出响应 —– 数据改变时的响应操作</li><li>改变 observables</li></ol><p>还有一个工具函数。</p><h1 id="2-observable-相关-—-创建被观察数据"><a href="#2-observable-相关-—-创建被观察数据" class="headerlink" title="2. observable 相关 —- 创建被观察数据"></a>2. observable 相关 —- 创建被观察数据</h1><p>创建可观察数据的方式有两种：</p><ol><li>使用 observable 函数构建</li><li>使用 @observable 装饰类构建</li></ol><h2 id="2-1-使用-observable-函数构建"><a href="#2-1-使用-observable-函数构建" class="headerlink" title="2.1 使用 observable 函数构建"></a>2.1 使用 observable 函数构建</h2><figure class="highlight js"><figcaption><span>observable 函数构建可观察的数据</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> value = observable(<span class="string">"value"</span>)</span><br><span class="line"><span class="keyword">const</span> list = observable([<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>])</span><br><span class="line"><span class="keyword">const</span> map = observable.map(&#123; <span class="attr">key</span>: <span class="string">"value"</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 observable.box()</span></span><br><span class="line"><span class="keyword">const</span> cityName = observable.box(<span class="string">"tan"</span>)</span><br></pre></td></tr></table></figure><h2 id="2-1-使用-observable-装饰类构建"><a href="#2-1-使用-observable-装饰类构建" class="headerlink" title="2.1 使用 @observable 装饰类构建"></a>2.1 使用 @observable 装饰类构建</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">    @observable num = <span class="number">22</span></span><br><span class="line">    @observable str = <span class="string">"string"</span></span><br><span class="line">    @observable bool = <span class="literal">false</span></span><br><span class="line">    @observable obj = &#123;</span><br><span class="line">        name: <span class="string">"tan"</span>,</span><br><span class="line">        age: <span class="number">12</span></span><br><span class="line">    &#125;</span><br><span class="line">    @observable array = []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-对-observables-作出响应"><a href="#3-对-observables-作出响应" class="headerlink" title="3. 对 observables 作出响应"></a>3. 对 observables 作出响应</h1><p>有 4 个 api 处理响应：</p><ol><li>computed 和 @computed 函数内依赖的观察项改变时，自动执行，类似 vue 中的 computed</li><li>autorun( fn, { options } ): 函数内的依赖项改变时，自动执行</li><li>when( fn, fn ): 第一个函数内依赖项改变时执行第一个函数，第一个函数返回 true 时，执行第二个函数</li><li>reaction( fn, fn ): 第一个函数返回一个数组，数组中值的改变时，执行第二个函数</li></ol><p>observer 和 @observer 修饰 react 类，用于更新视图</p><p><strong>代码：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/12691c66d2e142ff96b024157e974bfe.png" alt=""></fancybox></p><p>代码放在文章尾部</p><p><strong>运行结果：</strong><br><fancybox><img src="https://image.gslb.dawnlab.me/3cb216864da9253115ef5c162a1d09c6.png" alt=""></fancybox></p><h1 id="4-action-–改变–-observables"><a href="#4-action-–改变–-observables" class="headerlink" title="4. action –改变– observables"></a>4. action –改变– observables</h1><p>我们可以直接通过 store 来修改属性，但是每一次属性的改变，响应操作都会执行，当我们需要一次性执多个属性的改变的时候，响应操作就会执行多次，但是我们只需要执行一次就够了，那怎么解决呢？？此时 action 就出场了。</p><p>action 主要有：</p><ol><li>action( fn ): fn — 创建一个 action 函数</li><li>@action - fn : 修饰类方法，使其变成 action 方法</li><li>@action.bound : 修饰类方法，绑定 this</li><li>runInAction(name?, thunk)： 直接运行 action 操作，搭配 @action 可执行异步</li></ol><p><strong>案例：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/14079b48e3c40c775f1c3c9c9d351800.png" alt=""></fancybox><br>代码放在文章底部</p><p><strong>测试结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/67b0553703743d9e422da1752a5b2d5b.png" alt=""></fancybox></p><h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h1><p><em>工具函数就自行看官方文档了。</em></p><p>对比着 mobx 的运行流程图：</p><p><fancybox><img src="https://image.gslb.dawnlab.me/6e7e66ff9996ffb60b60ef4706ceb9f2.png" alt=""></fancybox></p><p>我们就可以很轻易的理解各个 api 之间的关系了。</p><h1 id="6-参考材料"><a href="#6-参考材料" class="headerlink" title="6. 参考材料"></a>6. 参考材料</h1><p><a href="https://cn.mobx.js.org/" target="_blank" rel="noopener">mobx—-官网</a></p><p>推荐大家去观看此教程，非常好的教程。<br><a href="https://www.imooc.com/video/17455" target="_blank" rel="noopener">茵风泳月–mobx入门基础教程</a></p><h1 id="7-文中使用代码："><a href="#7-文中使用代码：" class="headerlink" title="7. 文中使用代码："></a>7. 文中使用代码：</h1><h2 id="测试相应的代码"><a href="#测试相应的代码" class="headerlink" title="测试相应的代码"></a>测试相应的代码</h2><figure class="highlight js"><figcaption><span>测试副作用</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observable, computed, autorun, when, reaction &#125; <span class="keyword">from</span> <span class="string">"mobx"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">    @observable num = <span class="number">22</span></span><br><span class="line">    @observable str = <span class="string">"string"</span></span><br><span class="line">    @observable bool = <span class="literal">false</span></span><br><span class="line">    @observable obj = &#123;</span><br><span class="line">        name: <span class="string">"tan"</span>,</span><br><span class="line">        age: <span class="number">12</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @computed <span class="keyword">get</span> mixed()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.obj.age + <span class="string">"-----"</span> + <span class="keyword">this</span>.str</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> store = <span class="keyword">new</span> Store()</span><br><span class="line"><span class="comment">// 测试 computed</span></span><br><span class="line"><span class="keyword">var</span> foo =  computed( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> store.str + <span class="string">"/"</span> + store.obj.age</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log( foo.get() )</span><br><span class="line"><span class="built_in">console</span>.log( store.mixed )</span><br><span class="line"></span><br><span class="line">foo.observe( <span class="function"><span class="keyword">function</span>(<span class="params"> change </span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"computed 值改变："</span> )</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"修改值："</span>, change )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试 autorun </span></span><br><span class="line">autorun( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"autorun运行："</span> )</span><br><span class="line">    <span class="built_in">console</span>.log( store.str + <span class="string">"/"</span> + store.obj.age )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试 wen</span></span><br><span class="line">when( <span class="function"><span class="params">()</span>=&gt;</span> store.bool , ()=&gt; <span class="built_in">console</span>.log( <span class="string">"变成 true 了..."</span> ) )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试 reaction</span></span><br><span class="line">reaction( <span class="function"><span class="params">()</span> =&gt;</span> [ store.str, store.obj.age ], </span><br><span class="line">          arr =&gt; <span class="built_in">console</span>.log( <span class="string">"reaction 运行："</span>,arr ) )</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"开始测试：------- wen ------"</span> )</span><br><span class="line">store.bool = <span class="literal">true</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"开始测试：------- 其他三个 ------"</span> )</span><br><span class="line">store.obj.age = <span class="number">13</span></span><br></pre></td></tr></table></figure><h2 id="测试-action"><a href="#测试-action" class="headerlink" title="测试 action"></a>测试 action</h2><figure class="highlight js"><figcaption><span>测试 action </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observable, action, reaction &#125; <span class="keyword">from</span> <span class="string">"mobx"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">    @observable num = <span class="number">22</span></span><br><span class="line">    @observable str = <span class="string">"string"</span></span><br><span class="line">    @observable bool = <span class="literal">false</span></span><br><span class="line">    @observable obj = &#123;</span><br><span class="line">        name: <span class="string">"tan"</span>,</span><br><span class="line">        age: <span class="number">12</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @action bar()&#123;</span><br><span class="line">        <span class="keyword">this</span>.str = <span class="string">"修改值了--"</span></span><br><span class="line">        <span class="keyword">this</span>.num = <span class="number">89</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> store = <span class="keyword">new</span> Store()</span><br><span class="line">reaction( <span class="function"><span class="params">()</span> =&gt;</span> [ store.str, store.obj.age ], </span><br><span class="line">         arr =&gt; <span class="built_in">console</span>.log( <span class="string">"reaction 运行："</span>,arr ) )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不用 action 改变值</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"不用 action 改变值："</span> )</span><br><span class="line">store.obj.age = <span class="number">11</span></span><br><span class="line">store.str = <span class="string">"你好---"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 @action</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"使用 action 修饰器改变多个值"</span> )</span><br><span class="line">store.bar()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 action   执行</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"使用 action 修饰器改变多个值"</span> )</span><br><span class="line">action( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    store.str = <span class="string">"ppppppp"</span></span><br><span class="line">    store.obj.age = <span class="number">45</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mobx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mobx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>es6---Decorator</title>
      <link href="/2020/02/10/es6-Decorator/"/>
      <url>/2020/02/10/es6-Decorator/</url>
      
        <content type="html"><![CDATA[<p>搭建可使用 Decorator 的环境，并学习 Decorator 。</p><a id="more"></a><h1 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h1><ol><li>安装插件：</li></ol><p><strong>webpack ：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add webpack webpack-cli</span><br></pre></td></tr></table></figure><p><strong>babel ：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add @babel/cli @babel/core @babel/preset-env babel-loader</span><br></pre></td></tr></table></figure><p><strong>babel 装饰器相关插件：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add @babel/plugin-proposal-decorators babel-plugin-transform-<span class="class"><span class="keyword">class</span>-<span class="title">properties</span></span></span><br></pre></td></tr></table></figure><p><strong>webpack.config.js 配置</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/6daf0e45f415f634d1d7e6fd084f9054.png" alt=""></fancybox></p><p>配置代码放在文章末尾。</p><p><strong>配置 package.json</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"webpack"</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>环境配置完毕，运行 <code>yarn dev</code> 就可以将文件编译好。</p><p>新建一个html文件，引入编译好的 js 文件，环境配置基本完成。</p><p><strong>目录结构：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/ad660f54c86b4d30f9fe7d93c7f3483a.png" alt=""></fancybox></p><h1 id="2-开始书写代码"><a href="#2-开始书写代码" class="headerlink" title="2. 开始书写代码"></a>2. 开始书写代码</h1><p>编写 bundle.js</p><h2 id="2-1-类的装饰："><a href="#2-1-类的装饰：" class="headerlink" title="2.1 类的装饰："></a>2.1 类的装饰：</h2><p><strong>代码设计：</strong><br><fancybox><img src="https://image.gslb.dawnlab.me/0653a511ca0ddb772e26aa5bf1d669b6.png" alt=""></fancybox></p><p><strong>运行结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/2de3ec69dcadd741363c8900ad824c22.png" alt=""></fancybox></p><h2 id="2-2-类方法的修饰"><a href="#2-2-类方法的修饰" class="headerlink" title="2.2 类方法的修饰"></a>2.2 类方法的修饰</h2><p><strong>代码设计：</strong><br><fancybox><img src="https://image.gslb.dawnlab.me/dc114028d6ae3eceb45a0dfdf92ee224.png" alt=""></fancybox></p><p><strong>运行结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/97f7d88203ca25ced8007e485edb6b72.png" alt=""></fancybox></p><h2 id="2-2-类属性的修饰"><a href="#2-2-类属性的修饰" class="headerlink" title="2.2 类属性的修饰"></a>2.2 类属性的修饰</h2><p><strong>代码设计：</strong><br><fancybox><img src="https://image.gslb.dawnlab.me/77917f3081af6e5790e9d41fc217aea7.png" alt=""></fancybox></p><p><strong>运行结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/ecf3285bee122202661e7b9f28be9b5d.png" alt=""></fancybox></p><p><strong>注：</strong></p><p>可以在 js 文件头部编写 <code>&quot;use strict&quot;</code>来使用严格模式，</p><p>使用严格模式后，当修改不可修改的属性时，就会打断操作并报错。</p><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h1><p>装饰器不能用修饰函数，因为函数存在变量提升。</p><h1 id="4-参考材料"><a href="#4-参考材料" class="headerlink" title="4. 参考材料"></a>4. 参考材料</h1><p><a href="https://www.imooc.com/video/17455" target="_blank" rel="noopener">茵风泳月–mobx入门基础教程</a></p><p><a href="http://es6.ruanyifeng.com/#docs/decorator#%E7%B1%BB%E7%9A%84%E8%A3%85%E9%A5%B0" target="_blank" rel="noopener">阮一峰–es6 基础入门</a></p><h1 id="5-代码"><a href="#5-代码" class="headerlink" title="5. 代码"></a>5. 代码</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义类修饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"> target </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> desc = <span class="built_in">Object</span>.getOwnPropertyDescriptors( target.prototype )</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">const</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys( desc ) )&#123;</span><br><span class="line">        <span class="keyword">if</span>( key === <span class="string">"constuctor"</span> )&#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> func = desc[key].value</span><br><span class="line">        <span class="keyword">if</span>( <span class="keyword">typeof</span> func === <span class="string">"function"</span> )&#123;</span><br><span class="line">            <span class="built_in">Object</span>.defineProperty( target.prototype, key, &#123;</span><br><span class="line">                value( ...arg )&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log( <span class="string">"加之前"</span>, key )</span><br><span class="line">                    <span class="keyword">const</span> ret = func.apply( <span class="keyword">this</span>, arg )</span><br><span class="line">                    <span class="built_in">console</span>.log( <span class="string">"相加----结果："</span>, ret )</span><br><span class="line">                    <span class="built_in">console</span>.log( <span class="string">"加之后"</span>, key )</span><br><span class="line">                    <span class="keyword">return</span> ret</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 属性修饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readonly</span>(<span class="params"> target, key, desc </span>)</span>&#123;</span><br><span class="line">    desc.writable = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法修饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validate</span>(<span class="params"> target, key, desc </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> func = desc.value</span><br><span class="line">    desc.value = <span class="function"><span class="keyword">function</span>(<span class="params"> ...arg </span>)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">let</span> num <span class="keyword">of</span> arg )&#123;</span><br><span class="line">            <span class="keyword">if</span>( <span class="keyword">typeof</span> num !== <span class="string">"number"</span> )&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`"<span class="subst">$&#123; num &#125;</span> " 不是一个数字..`</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">"函数里面的装饰器-----函数的操作---"</span> )</span><br><span class="line">        <span class="keyword">return</span> func.apply( <span class="keyword">this</span>, [ <span class="number">4</span>, <span class="number">7</span> ] )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@log</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Numberic</span> </span>&#123;</span><br><span class="line">    @readonly PI = <span class="number">3.1315926</span></span><br><span class="line">    <span class="comment">// 修饰方法</span></span><br><span class="line">    add( ...nums )&#123;</span><br><span class="line">        <span class="keyword">return</span> nums.reduce( <span class="function">(<span class="params"> p, n </span>) =&gt;</span> ( p + n ), <span class="number">0</span> )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="keyword">new</span> Numberic().add( <span class="number">1</span>, <span class="number">2</span> ) )</span><br><span class="line"><span class="keyword">var</span> ss =  <span class="keyword">new</span> Numberic()</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"修改数据前："</span>, ss )</span><br><span class="line">ss.PI = <span class="number">99</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"修改数据后："</span>, ss )</span><br></pre></td></tr></table></figure><h2 id="5-1-环境配置代码："><a href="#5-1-环境配置代码：" class="headerlink" title="5.1 环境配置代码："></a>5.1 环境配置代码：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    mode: <span class="string">"development"</span>,</span><br><span class="line">    <span class="comment">// 入口文件</span></span><br><span class="line">    entry: path.resolve( __dirname, <span class="string">"./src/mobx.js"</span> ),</span><br><span class="line">    <span class="comment">// 打包输出文件</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve( __dirname, <span class="string">"mobx"</span> ),</span><br><span class="line">        filename: <span class="string">"main.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                use: &#123;</span><br><span class="line">                    loader: <span class="string">"babel-loader"</span>,</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        presets: [ <span class="string">"@babel/preset-env"</span> ],</span><br><span class="line">                        <span class="comment">// 配置 babel 插件</span></span><br><span class="line">                        plugins: [ </span><br><span class="line">                            [<span class="string">"@babel/plugin-proposal-decorators"</span>, &#123; <span class="string">"legacy"</span>: <span class="literal">true</span> &#125;], </span><br><span class="line">                            <span class="string">"transform-class-properties"</span></span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 配置 map 文件</span></span><br><span class="line">    devtool: <span class="string">"inline-source-map"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式（五）---装饰器模式</title>
      <link href="/2020/02/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%94%EF%BC%89-%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/02/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%94%EF%BC%89-%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><fancybox><img src="https://image.gslb.dawnlab.me/124991d344285d28139138d6d1a00a7d.png" alt=""></fancybox></p><p>手写一个装饰器模式。</p><a id="more"></a><h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h1><p><strong>装饰器模式的目的：</strong></p><ol><li>为对象添加新功能</li><li>不改变其原有的结构和功能</li></ol><h1 id="2-代码演示"><a href="#2-代码演示" class="headerlink" title="2. 代码演示"></a>2. 代码演示</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    draw() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"画一个圆形"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(circle)&#123;</span><br><span class="line">        <span class="keyword">this</span>.circle = circle;</span><br><span class="line">    &#125;</span><br><span class="line">    draw() &#123;</span><br><span class="line">        <span class="keyword">this</span>.circle.draw();</span><br><span class="line">        <span class="keyword">this</span>.setRedBorder(<span class="keyword">this</span>.circle);</span><br><span class="line">    &#125;</span><br><span class="line">    setBorder(circle) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"设置边框"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试代码</span></span><br><span class="line"><span class="keyword">let</span> circle = <span class="keyword">new</span> Circle();</span><br><span class="line"><span class="keyword">let</span> dec = <span class="keyword">new</span> Decorator(circle);</span><br><span class="line">dec.setRedBorder();</span><br></pre></td></tr></table></figure><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h1><p>装饰器小情景：手机又照相的功能，我们可以在手机摄像头前装饰一个放大镜，手机在具有照相的基础还有放大的功能。</p><p><strong>本质：</strong>在执行真正的操作前后，可以进行其他的操作</p><h1 id="4-参考材料"><a href="#4-参考材料" class="headerlink" title="4. 参考材料"></a>4. 参考材料</h1><p><a href="https://github.com/MuYunyun/blog/blob/master/BasicSkill/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F.md" target="_blank" rel="noopener">装饰者模式</a></p><p><a href="https://www.jianshu.com/p/398f0e8f2699" target="_blank" rel="noopener">JS设计模式-装饰器模式</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式（四）---发布订阅模式</title>
      <link href="/2020/02/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%9B%EF%BC%89-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/02/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%9B%EF%BC%89-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><fancybox><img src="https://image.gslb.dawnlab.me/03749b735b8f8f8ea84314ccbf236dbb.png" alt=""></fancybox></p><p>我看了很多关于发布订阅模式与观察者模式的文章，有点朋友认为观察者模式就是发布订阅模式，根据我看了这么多的文章的总结，他们确实是不一样的。</p><p>在vue中，emit和on方法。他们都似乎不约而同的自带了发布订阅属性一般，让开发变得更加高效好用起来。</p><p>今天就写一个发布订阅。</p><a id="more"></a><h1 id="1-情景模拟："><a href="#1-情景模拟：" class="headerlink" title="1. 情景模拟："></a>1. 情景模拟：</h1><p>当我们在注册虎扑的时候，软件会让我们选择我们感兴趣的板块，例如：唱、跳、rap、篮球…..</p><p>当我们选择自己喜欢的版块时，我们就订阅了相关板块的消息。</p><p>当此板块内有热门消息时，虎扑就会给我们推送此消息，他不会把其他板块的消息推送给我们。</p><h1 id="2-分析："><a href="#2-分析：" class="headerlink" title="2. 分析："></a>2. 分析：</h1><p>我们可以抽象出三个对象，一个发布者，一个调度中心，一个订阅者</p><p>发布者：我就是在不同板块发送热门消息的</p><p>调度中心：存下所有板块，与板块对应的订阅者</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个函数：接收消息并给相关板块所有的订阅者发送消息</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个函数：移除订阅者</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个函数：添加订阅者</p><p>订阅者：自己的属性</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个函数：订阅消息</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个函数：取消订阅消息</p><p>画出 UML 类图就是文章前的图片。</p><h1 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h1><p><fancybox><img src="https://image.gslb.dawnlab.me/584ee200caf26a8c25c9ec5232c3996b.png" alt=""></fancybox></p><p>真实代码放在文章末尾。</p><p><strong>结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/122ac8c8cbcff112954ff8a7cd4063a1.png" alt=""></fancybox></p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h1><p><strong>什么是发布订阅模式：</strong></p><blockquote><p>发布-订阅是一种消息范式，消息的发送者（称为发布者）不会将消息直接发送给特定的接收者（称为订阅者）。而是将发布的消息分为不同的类别，无需了解哪些订阅者（如果有的话）可能存在。同样的，订阅者可以表达对一个或多个类别的兴趣，只接收感兴趣的消息，无需了解哪些发布者（如果有的话）存在。</p><footer><strong>维基百科</strong><cite><a href="https://zh.wikipedia.org/wiki/%E5%8F%91%E5%B8%83/%E8%AE%A2%E9%98%85" target="_blank" rel="noopener">zh.wikipedia.org/wiki/%E5%8F%91%E5%B8%83/%E8%AE%A2%E9%98%85</a></cite></footer></blockquote><p><strong>说说我的理解：</strong></p><p>发布订阅模式可以理解成三个对象，一个是发布者，一个是订阅者，一个是调度中心。</p><p>为什么需要一个调度中心？因为订阅者的订阅是有一定要求的，而不是接收所有发布的消息，</p><p>所以调度中心就是将消息分别发送给订阅者。订阅者不会接收到没有订阅的消息。</p><p><strong>观察者模式：</strong></p><p>观察者只有两个对象，一个观察者、一个被观察者，被观察者只要作出变化（不论什么变化），所有的观察者都会接受到消息。</p><h1 id="5-参考材料"><a href="#5-参考材料" class="headerlink" title="5. 参考材料"></a>5. 参考材料</h1><p><a href="https://juejin.im/post/5b125ad3e51d450688133f22#heading-1" target="_blank" rel="noopener">发布订阅模式，在工作中它的能量超乎你的想象</a></p><p><a href="https://juejin.im/post/5bb1bb616fb9a05d2b6dccfa" target="_blank" rel="noopener">谈谈观察者模式和发布订阅模式</a></p><p><a href="https://blog.csdn.net/a469516684/article/details/86082844" target="_blank" rel="noopener">EventBus—思考观察者模式与发布订阅者模式</a></p><p><a href="https://juejin.im/post/5b2e65fee51d4558df370532" target="_blank" rel="noopener">JavaScript中发布/订阅模式的理解</a></p><h1 id="6-代码："><a href="#6-代码：" class="headerlink" title="6. 代码："></a>6. 代码：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发布者   传入调度中心实例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Publisher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>( dispatch )&#123;</span><br><span class="line">        <span class="keyword">this</span>.dispatch = dispatch</span><br><span class="line">    &#125;</span><br><span class="line">    publish()&#123;</span><br><span class="line">        <span class="keyword">let</span> arg = <span class="built_in">Array</span>.from( <span class="built_in">arguments</span> )</span><br><span class="line">        <span class="keyword">let</span> event = arg.shift()</span><br><span class="line">        <span class="keyword">this</span>.dispatch.emit( event, arg )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调度中心</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dispatcher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.eventObj = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    on( event, fn )&#123;</span><br><span class="line">        <span class="keyword">if</span>( !<span class="keyword">this</span>.eventObj[event] )&#123;</span><br><span class="line">            <span class="keyword">this</span>.eventObj[event] = []</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.eventObj[event].push( fn )</span><br><span class="line">    &#125;</span><br><span class="line">    emit( type, arg )&#123;</span><br><span class="line">        <span class="keyword">let</span> funs = <span class="keyword">this</span>.eventObj[type]</span><br><span class="line">        <span class="keyword">if</span>( !funs || funs.length === <span class="number">0</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        funs.forEach( <span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            item.apply( <span class="keyword">this</span>, arg )</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    remove( type, fn )&#123;</span><br><span class="line">        <span class="keyword">let</span> fns = <span class="keyword">this</span>.eventObj[ type ]</span><br><span class="line">        <span class="keyword">if</span>( !fns ) <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span>( !fn )&#123;</span><br><span class="line">            <span class="keyword">delete</span> <span class="keyword">this</span>.eventObj[type]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.eventObj[ type ] = fns.filter( <span class="function"><span class="params">item</span> =&gt;</span> item !== fn )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 订阅者类   传入 dispatch 和 自己的属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subscriber</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>( dispatch, name )&#123;</span><br><span class="line">        <span class="keyword">this</span>.dispatch = dispatch</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    fn = <span class="function">(<span class="params"> msg </span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">`我是<span class="subst">$&#123; <span class="keyword">this</span>.name &#125;</span>:`</span> ,<span class="string">"收到订阅的消息："</span>, msg )</span><br><span class="line">    &#125;</span><br><span class="line">    subscrib( type, fn )&#123;</span><br><span class="line">        <span class="keyword">this</span>.dispatch.on( type, fn, <span class="keyword">this</span> )</span><br><span class="line">    &#125;</span><br><span class="line">    removeSubscrib( type, fn )&#123;</span><br><span class="line">        <span class="keyword">this</span>.dispatch.remove( type, fn )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">let</span> dispatch = <span class="keyword">new</span> Dispatcher()</span><br><span class="line"><span class="keyword">let</span> pub = <span class="keyword">new</span> Publisher( dispatch )</span><br><span class="line"><span class="keyword">let</span> sub1 = <span class="keyword">new</span> Subscriber( dispatch, <span class="string">"sub1"</span> )</span><br><span class="line"><span class="keyword">let</span> sub2 = <span class="keyword">new</span> Subscriber( dispatch, <span class="string">"sub2"</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅消息</span></span><br><span class="line">sub1.subscrib( <span class="string">"篮球"</span>, sub1.fn )</span><br><span class="line">sub2.subscrib( <span class="string">"篮球"</span>, sub2.fn )</span><br><span class="line">sub2.subscrib( <span class="string">"足球"</span>, sub2.fn )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布消息</span></span><br><span class="line">pub.publish( <span class="string">"篮球"</span>, <span class="string">"乔丹去世了---"</span> )</span><br><span class="line">pub.publish( <span class="string">"足球"</span>, <span class="string">"国足能进世界杯吗？？"</span> )</span><br><span class="line"><span class="comment">// 取消订阅</span></span><br><span class="line">sub1.removeSubscrib( <span class="string">"篮球"</span>, sub1.fn )</span><br><span class="line">pub.publish( <span class="string">"篮球"</span>, <span class="string">"这里有一些NBA相关的信息"</span> )</span><br></pre></td></tr></table></figure><h2 id="通用代码："><a href="#通用代码：" class="headerlink" title="通用代码："></a>通用代码：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> event = &#123;</span><br><span class="line">    list: &#123;&#125;,</span><br><span class="line">    on(key, fn) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.list[key]) &#123;</span><br><span class="line">            <span class="keyword">this</span>.list[key] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.list[key].push(fn);</span><br><span class="line">    &#125;,</span><br><span class="line">    emit() &#123;</span><br><span class="line">        <span class="keyword">let</span> key = [].shift.call(<span class="built_in">arguments</span>),</span><br><span class="line">            fns = <span class="keyword">this</span>.list[key];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!fns || fns.length === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fns.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> &#123;</span><br><span class="line">            fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    remove(key, fn) &#123;</span><br><span class="line">        <span class="comment">// 这回我们加入了取消订阅的方法</span></span><br><span class="line">        <span class="keyword">let</span> fns = <span class="keyword">this</span>.list[key];</span><br><span class="line">        <span class="comment">// 如果缓存列表中没有函数，返回false</span></span><br><span class="line">        <span class="keyword">if</span> (!fns) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 如果没有传对应函数的话</span></span><br><span class="line">        <span class="comment">// 就会将key值对应缓存列表中的函数都清空掉</span></span><br><span class="line">        <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">            fns &amp;&amp; (fns.length = <span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 遍历缓存列表，看看传入的fn与哪个函数相同</span></span><br><span class="line">            <span class="comment">// 如果相同就直接从缓存列表中删掉即可</span></span><br><span class="line">            fns.forEach(<span class="function">(<span class="params">cb, i</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (cb === fn) &#123;</span><br><span class="line">                    fns.splice(i, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cat</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'一起喵喵喵'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'一起旺旺旺'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">event.on(<span class="string">'pet'</span>, data =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'接收数据'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br><span class="line">event.on(<span class="string">'pet'</span>, cat);</span><br><span class="line">event.on(<span class="string">'pet'</span>, dog);</span><br><span class="line"><span class="comment">// 取消dog方法的订阅</span></span><br><span class="line">event.remove(<span class="string">'pet'</span>, dog);</span><br><span class="line"><span class="comment">// 发布</span></span><br><span class="line">event.emit(<span class="string">'pet'</span>, [<span class="string">'二哈'</span>, <span class="string">'波斯猫'</span>]);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    接收数据</span></span><br><span class="line"><span class="comment">    [ '二哈', '波斯猫' ]</span></span><br><span class="line"><span class="comment">    一起喵喵喵</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>摘自：</strong></p><p><strong><a href="https://juejin.im/post/5b125ad3e51d450688133f22#heading-4" target="_blank" rel="noopener">发布订阅模式，在工作中它的能量超乎你的想象</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式（三）--代理模式</title>
      <link href="/2020/02/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%89%EF%BC%89-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/02/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%89%EF%BC%89-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><fancybox><img src="https://image.gslb.dawnlab.me/8151655788e5ad17587fdc36a060bfb2.png" alt=""></fancybox></p><p>写一个代理模式.</p><a id="more"></a><h1 id="1-情景"><a href="#1-情景" class="headerlink" title="1. 情景"></a>1. 情景</h1><p>情景: 小明追女生 A</p><ul><li>非代理模式: 小明 =花=&gt; 女生A</li><li>代理模式: 小明 =花=&gt; 让女生A的好友B帮忙 =花=&gt; 女生A</li></ul><h1 id="2-代理模式的特点"><a href="#2-代理模式的特点" class="headerlink" title="2. 代理模式的特点"></a>2. 代理模式的特点</h1><ul><li>代理对象和本体对象具有一致的接口, 对使用者友好</li></ul><blockquote><p>常用的虚拟代理形式：某一个花销很大的操作，可以通过虚拟代理的方式延迟到这种需要它的时候才去创建（例：使用虚拟代理实现图片懒加载）<br>图片懒加载的方式：先通过一张loading图占位，然后通过异步的方式加载图片，等图片加载好了再把完成的图片加载到img标签里面。</p><footer><strong>考拉海购前端团队</strong><cite><a href="https://juejin.im/post/59df4f74f265da430f311909" target="_blank" rel="noopener">juejin.im/post/59df4f74f265da430f311909</a></cite></footer></blockquote><h1 id="3-代码设计"><a href="#3-代码设计" class="headerlink" title="3. 代码设计"></a>3. 代码设计</h1><p><fancybox><img src="https://image.gslb.dawnlab.me/1477504b420fce64b3cd68ebed8e9c00.png" alt=""></fancybox></p><h1 id="4-es6-代理模式-—-Proxy"><a href="#4-es6-代理模式-—-Proxy" class="headerlink" title="4. es6 代理模式 —- Proxy"></a>4. es6 代理模式 —- Proxy</h1><p><strong>目的：在操作前可以进行其他的操作（对数据加工等）。</strong></p><p><strong>代码设计</strong><br><fancybox><img src="https://image.gslb.dawnlab.me/017a9c46002a617e370af1ffc6a158ec.png" alt=""></fancybox></p><p><strong>运行结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/60e895dd1bc44e25965c0350cd5a0efe.png" alt=""></fancybox></p><p>案例参考：</p><ul><li><a href="https://juejin.im/post/5a5227ce6fb9a01c927e85c4" target="_blank" rel="noopener">ES6中的代理模式—–Proxy</a></li><li><a href="http://es6.ruanyifeng.com/#docs/proxy" target="_blank" rel="noopener">阮一峰– es6 入门</a></li></ul><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h1><p>代理模式，总的来说，是在操作前，可以进行其他的操作。</p><h1 id="5-参考材料"><a href="#5-参考材料" class="headerlink" title="5. 参考材料"></a>5. 参考材料</h1><p><a href="https://github.com/MuYunyun/blog/blob/master/BasicSkill/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.md" target="_blank" rel="noopener">BasicSkill–代理模式</a></p><p><a href="https://juejin.im/post/59df4f74f265da430f311909#heading-2" target="_blank" rel="noopener">JavaScript设计模式</a></p><p><a href="https://www.cnblogs.com/mn6364/p/10990874.html" target="_blank" rel="noopener">js –代理模式</a></p><h1 id="6-代码"><a href="#6-代码" class="headerlink" title="6. 代码"></a>6. 代码</h1><figure class="highlight js"><figcaption><span>图片懒加载</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 真实的对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealImg</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.imgNode = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>)</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild( <span class="keyword">this</span>.imgNode )</span><br><span class="line">    &#125;</span><br><span class="line">    setSrc( src )&#123;</span><br><span class="line">        <span class="keyword">this</span>.imgNode.src = src</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 代理对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyImg</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.realImg = <span class="keyword">new</span> RealImg()</span><br><span class="line">    &#125;</span><br><span class="line">    setSrc( src )&#123;</span><br><span class="line">        <span class="keyword">this</span>.realImg.setSrc(<span class="string">"http://seopic.699pic.com/photo/40007/8839.jpg_wh1200.jpg"</span>)</span><br><span class="line">        <span class="keyword">let</span> img = <span class="keyword">new</span> Image()</span><br><span class="line">        img.src = src</span><br><span class="line">        img.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.realImg.setSrc( src )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> proxyImg = <span class="keyword">new</span> ProxyImg()</span><br><span class="line">proxyImg.setSrc( <span class="string">"http://seopic.699pic.com/photo/40006/7735.jpg_wh1200.jpg"</span> )</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式（二）--观察者模式</title>
      <link href="/2020/02/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/02/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><fancybox><img src="https://image.gslb.dawnlab.me/97ffbb5c36692b1f63a62b517db84ff8.png" alt=""></fancybox></p><p>写一个观察者模式。</p><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><strong>意图：</strong> 定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</p><p><strong>主要解决：</strong> 一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作。</p><p><strong>何时使用：</strong> 一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知，进行广播通知。</p><p><strong>关键代码：</strong> 在抽象类里有一个 ArrayList&lt;\Observer&gt; 存放观察者们。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight js"><figcaption><span>观察者模式</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 观察者模式</span></span><br><span class="line"><span class="comment"> * state 状态</span></span><br><span class="line"><span class="comment"> * observers &#123; Observer &#125;  保存所有的观察者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = <span class="number">0</span></span><br><span class="line">        <span class="keyword">this</span>.observers = []</span><br><span class="line">    &#125;</span><br><span class="line">    getState()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.state</span><br><span class="line">    &#125;</span><br><span class="line">    setState( state )&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state</span><br><span class="line">        <span class="keyword">this</span>.notifyAllObservers()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通知所有的观察者</span></span><br><span class="line">    notifyAllObservers()&#123;</span><br><span class="line">        <span class="keyword">this</span>.observers.forEach( <span class="function"><span class="params">observer</span> =&gt;</span> &#123;</span><br><span class="line">            observer.update()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加观察者</span></span><br><span class="line">    attach( observer )&#123;</span><br><span class="line">        <span class="keyword">this</span>.observers.push( observer )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 观察者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>( name, subject )&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">        <span class="keyword">this</span>.subject = subject</span><br><span class="line">        <span class="keyword">this</span>.subject.attach( <span class="keyword">this</span> )</span><br><span class="line">    &#125;</span><br><span class="line">    update()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">`<span class="subst">$&#123; <span class="keyword">this</span>.name &#125;</span> -- update, state: <span class="subst">$&#123; <span class="keyword">this</span>.subject.getState() &#125;</span>`</span> )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> Subject()</span><br><span class="line"><span class="keyword">let</span> o1 = <span class="keyword">new</span> Observer( <span class="string">"o1"</span>, s )</span><br><span class="line"><span class="keyword">let</span> o2 = <span class="keyword">new</span> Observer( <span class="string">"o2"</span>, s )</span><br><span class="line"></span><br><span class="line">s.setState( <span class="number">11</span> )</span><br><span class="line">s.setState( <span class="number">12</span> )</span><br><span class="line"><span class="built_in">console</span>.log( s )</span><br></pre></td></tr></table></figure><p><strong>测试结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/a7763467be0e62af3e014f19169dbf1c.png" alt=""></fancybox></p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>观察者模式的要点主要是将观察者放在被观察者里面，当状态变化后，就依次通知观察者。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://juejin.im/post/5cb534386fb9a0685727e1eb#heading-72" target="_blank" rel="noopener">超全的设计模式简介（45种）—观察者模式</a></p><p><a href="https://juejin.im/post/5afe6430518825428630bc4d" target="_blank" rel="noopener">JavaScript 中常见设计模式整理</a></p><p><a href="https://juejin.im/post/5bb1bb616fb9a05d2b6dccfa" target="_blank" rel="noopener">谈谈观察者模式和发布订阅模式</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式（一）--单例模式</title>
      <link href="/2020/02/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/02/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><fancybox><img src="https://image.gslb.dawnlab.me/b9bb7ddf819be28cee3cbe3dfb440e9a.png" alt=""></fancybox></p><p>写一个单例模式。</p><a id="more"></a><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>确保一个类只有一个实例，使每次获取的实例都是同一个。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>( name )&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    getName()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">    &#125;</span><br><span class="line">    setName( data )&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = data</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取单例的方法   ---   使用闭包获取单例</span></span><br><span class="line">Store.getInstance = (</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> instance</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"> name </span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>( !instance )&#123;</span><br><span class="line">                instance = <span class="keyword">new</span> Store( name )</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> instance</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> store1 = Store.getInstance( <span class="string">"你好"</span> )</span><br><span class="line"><span class="keyword">let</span> store2 = Store.getInstance( <span class="string">"你好----"</span> )</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( store1 )</span><br><span class="line"><span class="built_in">console</span>.log( store2 )</span><br><span class="line"><span class="built_in">console</span>.log( store1 === store2 )</span><br></pre></td></tr></table></figure><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p><fancybox><img src="https://image.gslb.dawnlab.me/a3f69ad1bf9019e1d04d1d15b54eea25.png" alt=""></fancybox></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>单例模式运用非常广泛，只要在代码中涉及到只存在一个实例，就可以使用单例模式，</p><p>vuex 和 redux 就是使用单例模式构建。</p><p><strong>写一个单例模式的要点：</strong></p><ol><li>使用一个特定函数来获取单例，</li><li>此函数使用闭包来确保但会单例是唯一的，</li><li>使用函数柯理化–接收传入参数</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://juejin.im/post/59df4f74f265da430f311909" target="_blank" rel="noopener">JavaScript设计模式</a></p><p><a href="https://juejin.im/post/5e021eb96fb9a01628014095#heading-0" target="_blank" rel="noopener">JavaScript设计模式es6（23种)</a></p><p><a href="https://juejin.im/post/5afe6430518825428630bc4d" target="_blank" rel="noopener">JavaScript 中常见设计模式整理</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>javascript之防抖与节流</title>
      <link href="/2020/02/07/javascript%E4%B9%8B%E8%8A%82%E6%B5%81%E4%B8%8E%E9%98%B2%E6%8A%96/"/>
      <url>/2020/02/07/javascript%E4%B9%8B%E8%8A%82%E6%B5%81%E4%B8%8E%E9%98%B2%E6%8A%96/</url>
      
        <content type="html"><![CDATA[<p>写一个防抖与节流。</p><a id="more"></a><h1 id="1-防抖"><a href="#1-防抖" class="headerlink" title="1. 防抖"></a>1. 防抖</h1><p><strong>什么是防抖：</strong></p><p>当一个事件触发后，在 n 秒后才执行相关函数，如果在 n 秒内再次触发事件，则在新事件 n 秒后才执行相关函数。</p><p><strong>函数功能设计与实现原理：</strong></p><p>用户可以根据需求自传定义执行函数、间隔时间、是否立即执行来传入对应的参数。</p><p>使用闭包函数，设置一个定时器作为标志放在闭包内，使用函数柯理化接收传入参数。</p><p><strong>代码：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 防抖函数</span></span><br><span class="line"><span class="comment"> * @param fn 回调函数 </span></span><br><span class="line"><span class="comment"> * @param time  间隔时间 type number</span></span><br><span class="line"><span class="comment"> * @param immediate  立刻执行 type boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params"> fn, time, immediate = false </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timeount</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( timeount )&#123; clearTimeout( timeount ) &#125;</span><br><span class="line">        <span class="keyword">if</span>( immediate &amp;&amp; !timeount )&#123; fn.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> ) &#125;</span><br><span class="line"></span><br><span class="line">        timeount = setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 此处运用函数柯理化 arguments 为调用函数时的参数</span></span><br><span class="line">            fn.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> )</span><br><span class="line">            <span class="comment">// 此处放开注释-会让每一次执行完后，第一次都会立即执行一次</span></span><br><span class="line">            <span class="comment">// timeount = null</span></span><br><span class="line">        &#125;, time || <span class="number">500</span> )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><figure class="highlight js"><figcaption><span>自建html文件测试</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">go</span>(<span class="params"> e </span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( e )</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.addEventListener( <span class="string">"mousemove"</span>, debounce( go, <span class="number">500</span>, <span class="literal">false</span> ) )</span><br><span class="line"><span class="comment">// 自传参数</span></span><br><span class="line">debounce( go, <span class="number">500</span>, <span class="literal">false</span> )( <span class="string">"我是自己传进去的参数--"</span> )</span><br></pre></td></tr></table></figure><h1 id="2-节流"><a href="#2-节流" class="headerlink" title="2. 节流"></a>2. 节流</h1><p><strong>什么是节流：</strong></p><p>节流，就是指连续触发事件但是在 n 秒中只执行一次函数。 节流会稀释函数的执行频率。</p><p><strong>代码：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 节流函数</span></span><br><span class="line"><span class="comment"> * @param fn 回调函数 </span></span><br><span class="line"><span class="comment"> * @param time  间隔时间 type number</span></span><br><span class="line"><span class="comment"> * @param immediate  立刻执行 type boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params"> fn, time, immediate = false </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timeount</span><br><span class="line">    <span class="keyword">let</span> isFrist = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( immediate &amp;&amp; isFrist )&#123;</span><br><span class="line">            fn.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> )</span><br><span class="line">            isFrist = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( !timeount )&#123;</span><br><span class="line">            timeount = setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                fn.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> )</span><br><span class="line">                timeount = <span class="literal">null</span></span><br><span class="line">            &#125;, time || <span class="number">500</span> )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><figure class="highlight js"><figcaption><span>自建html文件测试</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">go</span>(<span class="params"> e </span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( e )</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.addEventListener( <span class="string">"mousemove"</span>, throttle( go, <span class="number">500</span>, <span class="literal">true</span> ) )</span><br><span class="line"><span class="comment">// 自传参数</span></span><br><span class="line">throttle( go, <span class="number">500</span>, <span class="literal">false</span> )( <span class="string">"我是自己传进去的参数--"</span> )</span><br></pre></td></tr></table></figure><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>防抖和节流在代码中被使用的频率还是蛮大的，</p><p>函数的编写有借鉴，也有自己的思考，感觉自己思考过后，才会对函数有更深的理解。</p><p>防抖可以运用在：</p><ol><li>window 的 resize、scroll</li><li>mousedown、mousemove</li><li>keyup、keydown</li><li>搜索自动弹出 搜索联想</li></ol><p><strong>防抖函数要点：</strong> </p><ol><li>每一次触发事件，都要清除定时器，并重置 timeout 定时器。</li></ol><p><strong>节流函数要点：</strong></p><ol><li>每次执行完函数后，都要把标志置为null</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.wclimb.site/2018/06/12/JavaScript%E4%B9%8B%E8%8A%82%E6%B5%81%E4%B8%8E%E9%98%B2%E6%8A%96/" target="_blank" rel="noopener">wclimb–JavaScript之节流与防抖</a></p><p><a href="https://juejin.im/post/5b651dc15188251aa30c8669#heading-1" target="_blank" rel="noopener">函数防抖和节流</a></p><p><a href="https://github.com/mqyqingfeng/Blog/issues/26" target="_blank" rel="noopener">JavaScript专题之跟着 underscore 学节流</a></p><p><a href="https://github.com/mqyqingfeng/Blog/issues/22" target="_blank" rel="noopener">JavaScript专题之跟着underscore学防抖</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript之继承</title>
      <link href="/2020/02/06/javascript%E4%B9%8B%E7%BB%A7%E6%89%BF/"/>
      <url>/2020/02/06/javascript%E4%B9%8B%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<p>在 es6 之前，javaScript 不能使用 extends 来显式继承的，所以，继承需要程序员手动完成。</p><p>那么，让我们来看一看 js 中的各种继承方式吧。</p><a id="more"></a><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><p><strong>原型链</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/627d52b1dd9158ac087c6926fa640060.png" alt=""></fancybox></p><p>我们需要了解原型和原型链，需要知道构造函数与原型对象之间的关系，<strong>需要知道原型对象是一个对象，它有个属性 constructor 就是构造函数</strong></p><p><strong>Object.creact() 方法</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/b4f1756d75bcc34f54a294483a66dc4b.png" alt=""></fancybox></p><p>传入原型对象，返回原型对象和属性。</p><h1 id="1-原型链继承"><a href="#1-原型链继承" class="headerlink" title="1. 原型链继承"></a>1. 原型链继承</h1><p><strong>原理说明：</strong></p><p>就是将已经 new 出来的对象实例的 prototype 变成父对象，从而，把父对象的属性和方法都继承到了当前对象的 prototype 上，当前对象的实例本身没有父对象的属性与方法，当调用这些方法时，他会自动到此对象的 prototype 上依次去找，直到找到 null 为止，这就称为原型链继承。</p><p><strong>实现</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"> name=<span class="string">"tan"</span>, age=<span class="number">18</span> </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">    <span class="keyword">this</span>.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123; <span class="keyword">this</span>.name &#125;</span> can run...`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"> id = <span class="number">12</span> </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id</span><br><span class="line">    <span class="keyword">this</span>.study = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">`<span class="subst">$&#123;name&#125;</span> can study...`</span> )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 修改原型对象，并改回构造函数</span></span><br><span class="line">Student.prototype = <span class="keyword">new</span> Person()</span><br><span class="line">Student.prototype.constuctor = Student</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> S = <span class="keyword">new</span> Student( <span class="number">12</span> )</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"实例S："</span>, S )</span><br><span class="line">S.run()</span><br><span class="line"><span class="built_in">console</span>.log( S <span class="keyword">instanceof</span> Student )</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/5b77c39e7e80254643a77e540c08d2bc.png" alt=""></fancybox></p><p><strong>1.1 总结：</strong></p><p>由上面的例子可见，当继承的对象需要传参时，极度不灵活，因为 prototype 是一个父类的实例。</p><p>故：此继承方法适合继承方法，而不适合继承属性。</p><h1 id="2-借用构造函数继承"><a href="#2-借用构造函数继承" class="headerlink" title="2. 借用构造函数继承"></a>2. 借用构造函数继承</h1><p><strong>原理说明：</strong></p><p>在构造函数中，改变父类构造函数的 this 并执行构造函数。</p><p><strong>实现：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"> name=<span class="string">"tan"</span>, age=<span class="number">18</span> </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">    <span class="keyword">this</span>.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123; <span class="keyword">this</span>.name &#125;</span> can run...`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"> id = <span class="number">12</span>, name, age </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id</span><br><span class="line">    <span class="keyword">this</span>.study = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">`<span class="subst">$&#123;name&#125;</span> can study...`</span> )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 改变父类构造函数并传参执行 也可以使用 apply 改变 this</span></span><br><span class="line">    Person.call( <span class="keyword">this</span>, name, age )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> S = <span class="keyword">new</span> Student( <span class="number">12</span>, <span class="string">"yu"</span>, <span class="number">12</span> )</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"实例S："</span>, S )</span><br><span class="line">S.run()</span><br><span class="line"><span class="built_in">console</span>.log( S <span class="keyword">instanceof</span> Student )</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/a7999c1a9cdfab68f8ae86cc86d88d62.png" alt=""></fancybox></p><p><strong>总结：</strong></p><p>可以传参给父类构造函数了，<strong>但是此方法不能继承父类原型链（ prototype ）上的方法和参数。</strong></p><h1 id="3-组合继承"><a href="#3-组合继承" class="headerlink" title="3. 组合继承"></a>3. 组合继承</h1><p><strong>原理说明：</strong></p><p>将上面两种方法结合起来，目的是继承到父类原型链上的方法。</p><p><strong>实现：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"> name=<span class="string">"tan"</span>, age=<span class="number">18</span> </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">    <span class="keyword">this</span>.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123; <span class="keyword">this</span>.name &#125;</span> can run...`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"> id = <span class="number">12</span>, name, age </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id</span><br><span class="line">    <span class="keyword">this</span>.study = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">`<span class="subst">$&#123;name&#125;</span> can study...`</span> )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 改变父类构造函数并传参执行</span></span><br><span class="line">    Person.call( <span class="keyword">this</span>, name, age )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承父类原型链</span></span><br><span class="line">Student.prototype = <span class="keyword">new</span> Person()</span><br><span class="line">Student.prototype.constuctor = Student</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> S = <span class="keyword">new</span> Student( <span class="number">12</span>, <span class="string">"yu"</span>, <span class="number">17</span> )</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"实例S："</span>, S )</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"getName:"</span>, S.getName() )</span><br><span class="line"><span class="built_in">console</span>.log( S <span class="keyword">instanceof</span> Student )</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/f18ca84e1634386e03844b02aad5fa56.png" alt=""></fancybox></p><p><strong>总结：</strong></p><p>很好的继承了父类，并继承了原型链，但是多了一些属性在原型链上。下面我们将解决这个问题。</p><h1 id="4-组合继承变种——借用原型链继承"><a href="#4-组合继承变种——借用原型链继承" class="headerlink" title="4. 组合继承变种——借用原型链继承"></a>4. 组合继承变种——借用原型链继承</h1><p><strong>原理说明：</strong></p><p>将子类的原型链指向父类的原型链，达到继承父类原型链的目的：</p><p><strong>实现：</strong></p><figure class="highlight js"><figcaption><span>修改组合继承的代码：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承父类原型链</span></span><br><span class="line">Student.prototype = <span class="keyword">new</span> Person()</span><br><span class="line">Student.prototype.constuctor = Student</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改为：</span></span><br><span class="line">Student.prototype = <span class="built_in">Object</span>.create( Person.prototype )</span><br><span class="line">Student.prototype.constuctor = Student</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/ce5b33cd24674bed978d5f7be537ae9f.png" alt=""></fancybox></p><p><strong>总结：</strong></p><p>完美的继承了父类，干净利索。</p><h1 id="5-ES6-类继承-extends"><a href="#5-ES6-类继承-extends" class="headerlink" title="5. ES6 类继承 extends"></a>5. ES6 类继承 extends</h1><p><strong>实现说明：</strong><br>extends 关键字主要用于类声明或者类表达式中，以创建一个类，该类是另一个类的子类。其中 constructor 表示构造函数，一个类中只能有一个构造函数，有多个会报出 SyntaxError 错误,如果没有显式指定构造方法，则会添加默认的 constructor 方法，使用 super 方法传参到父类构造函数。</p><p><strong>实现：</strong></p><figure class="highlight js"><figcaption><span>es6 extends 继承</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>( name="tan", age=18 )&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">        <span class="keyword">this</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">    run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123; <span class="keyword">this</span>.name &#125;</span> can run...`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    getName = <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>( id, name, age )&#123;</span><br><span class="line">        <span class="keyword">super</span>( name, age )</span><br><span class="line">        <span class="keyword">this</span>.id = id</span><br><span class="line">    &#125;</span><br><span class="line">    study = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">`<span class="subst">$&#123;name&#125;</span> can study...`</span> )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> S = <span class="keyword">new</span> Student( <span class="number">12</span>, <span class="string">"yu"</span>, <span class="number">17</span> )</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"实例S："</span>, S )</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"getName:"</span>, S.getName() )</span><br><span class="line"><span class="built_in">console</span>.log( S <span class="keyword">instanceof</span> Student )</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/6bc2d58fc1bc6f70f0b8b91a872349a8.png" alt=""></fancybox></p><p><strong>总结：</strong></p><p>简单、完美</p><h1 id="疑问："><a href="#疑问：" class="headerlink" title="疑问："></a>疑问：</h1><p>在第四种继承方式中，为什么不能直接改成 <code>Student.prototype = Person.prototype</code>，而要使用 <code>Object.create( Person.prototype )</code>,</p><p>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"> name=<span class="string">"tan"</span>, age=<span class="number">18</span> </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">    <span class="keyword">this</span>.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123; <span class="keyword">this</span>.name &#125;</span> can run...`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"> id = <span class="number">12</span>, name, age </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id</span><br><span class="line">    <span class="keyword">this</span>.study = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">`<span class="subst">$&#123;name&#125;</span> can study...`</span> )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 改变父类构造函数并传参执行</span></span><br><span class="line">    Person.call( <span class="keyword">this</span>, name, age )</span><br><span class="line">&#125;</span><br><span class="line">Student.prototype = Person.prototype</span><br><span class="line">Student.prototype.constuctor = Student</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> S = <span class="keyword">new</span> Student( <span class="number">12</span>, <span class="string">"yu"</span>, <span class="number">17</span> )</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"实例S："</span>, S )</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"getName:"</span>, S.getName() )</span><br><span class="line"><span class="built_in">console</span>.log( S <span class="keyword">instanceof</span> Student )</span><br></pre></td></tr></table></figure><p><strong>结果是：</strong></p><p><fancybox><img src="https://image.gslb.dawnlab.me/9a8a7524d0471e4b79bfedb1db5fd12e.png" alt=""></fancybox></p><p>如果你知道原因，请在下方评论区给我留言。感谢！</p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>尽管继承方式五花八门，但是继承的目的却是不变的：</p><ol><li>将父类属性和方法复制到当前类 ( 在构造函数内改变父类构造函数的this并执行 )</li><li>继承父类的原型链  （ 修改构造函数的 prototype 指向父类的 prototype  ）</li></ol><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://juejin.im/post/5ad6efeb5188255c272275e1" target="_blank" rel="noopener">看了都知道继承也就那么回事儿</a></p><p><a href="https://juejin.im/post/5bcb2e295188255c55472db0#heading-0" target="_blank" rel="noopener">JavaScript常用八种继承方案</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript 之 new 的实现</title>
      <link href="/2020/02/06/javascript%20%E4%B9%8B%20new%20%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2020/02/06/javascript%20%E4%B9%8B%20new%20%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>网上有很多讲原型、原型链、new 的执行与实现的文章，我也看了很多。</p><p>本文描述一下 new 的执行过程与手写实现一个 new 的实现。</p><a id="more"></a><h1 id="1-new-的执行过程"><a href="#1-new-的执行过程" class="headerlink" title="1. new 的执行过程"></a>1. new 的执行过程</h1><p><fancybox><img src="https://image.gslb.dawnlab.me/1854fef99c105a5ec081cb921de59aeb.png" alt=""></fancybox></p><p>我们以上图为例阐述 new 的执行过程。</p><ol><li>创建一个中间对象</li><li>将该中间对象的原型指向构造函数的原型</li><li>将构造函数的 this 指向该中间对象并执行</li><li>返回该中间对象，即返回实例对象</li></ol><h1 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2. 代码实现"></a>2. 代码实现</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myNew</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 取出传入参数</span></span><br><span class="line">    <span class="keyword">let</span> argArray = <span class="built_in">Array</span>.from( <span class="built_in">arguments</span> )</span><br><span class="line">    <span class="comment">// 取出构造函数与需要传入构造函数的参数</span></span><br><span class="line">    <span class="keyword">let</span> constructorFun = argArray.shift()</span><br><span class="line">    <span class="comment">// 创建中间函数</span></span><br><span class="line">    <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">    <span class="comment">// 将该中间对象的原型指向构造函数的原型</span></span><br><span class="line">    obj.__proto__ = constructorFun.prototype</span><br><span class="line">    <span class="comment">// 绑定 this 并传入参数执行</span></span><br><span class="line">    constructorFun.apply( obj, argArray )</span><br><span class="line">    <span class="comment">// 返回创建的对象</span></span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-运行测试"><a href="#3-运行测试" class="headerlink" title="3. 运行测试"></a>3. 运行测试</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"> name, age </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myNew</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> argArray = <span class="built_in">Array</span>.from( <span class="built_in">arguments</span> )</span><br><span class="line">    <span class="keyword">let</span> constructorFun = argArray.shift()</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">    obj.__proto__ = constructorFun.prototype</span><br><span class="line">    constructorFun.apply( obj, argArray )</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"myNew："</span>,myNew( Animal, <span class="string">"dog"</span>, <span class="string">"12"</span> ) )</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"new："</span>, <span class="keyword">new</span> Animal( <span class="string">"cat"</span>, <span class="string">"11"</span> ) )</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><fancybox><img src="https://s2.ax1x.com/2020/02/06/1ybPDx.png" alt=""></fancybox></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>写出 new 的执行过程与实现，基本算是考察对 prototype 原型链的理解。</p><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://github.com/amandakelake/blog/issues/37" target="_blank" rel="noopener">彻底捋清楚 new 的实现</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>思路清晰---写一个深拷贝</title>
      <link href="/2020/01/31/%E6%80%9D%E8%B7%AF%E6%B8%85%E6%99%B0-%E5%86%99%E4%B8%80%E4%B8%AA%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
      <url>/2020/01/31/%E6%80%9D%E8%B7%AF%E6%B8%85%E6%99%B0-%E5%86%99%E4%B8%80%E4%B8%AA%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<p>写一个深拷贝，考虑数组、对象和循环引用。</p><a id="more"></a><h1 id="1-准备两个对象"><a href="#1-准备两个对象" class="headerlink" title="1.准备两个对象"></a>1.准备两个对象</h1><ul><li>无循环引用的对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> target = &#123;</span><br><span class="line">    field1: <span class="string">"string"</span>,</span><br><span class="line">    field2: <span class="number">33</span>,</span><br><span class="line">    field3: <span class="literal">undefined</span>,</span><br><span class="line">    field4: <span class="literal">null</span>,</span><br><span class="line">    field5: &#123;</span><br><span class="line">        child: <span class="string">"child"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    field6: [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ],</span><br><span class="line">    field7: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="keyword">this</span>.field1 )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>有循环引用的对象<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> target = &#123;</span><br><span class="line">    field1: <span class="string">"string"</span>,</span><br><span class="line">    field2: <span class="number">33</span>,</span><br><span class="line">    field3: <span class="literal">undefined</span>,</span><br><span class="line">    field4: <span class="literal">null</span>,</span><br><span class="line">    field5: &#123;</span><br><span class="line">        child: <span class="string">"child"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    field6: [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ],</span><br><span class="line">    field7: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="keyword">this</span>.field1 )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">target.target = target</span><br></pre></td></tr></table></figure></li></ul><h1 id="2-使用-JSON-parse-JSON-stringify"><a href="#2-使用-JSON-parse-JSON-stringify" class="headerlink" title="2.使用 JSON.parse(JSON.stringify())"></a>2.使用 JSON.parse(JSON.stringify())</h1><h2 id="2-1复制一个无循环引用的对象，代码如下："><a href="#2-1复制一个无循环引用的对象，代码如下：" class="headerlink" title="2.1复制一个无循环引用的对象，代码如下："></a>2.1复制一个无循环引用的对象，代码如下：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> target = &#123;</span><br><span class="line">    field1: <span class="string">"string"</span>,</span><br><span class="line">    field2: <span class="number">33</span>,</span><br><span class="line">    field3: <span class="literal">undefined</span>,</span><br><span class="line">    field4: <span class="literal">null</span>,</span><br><span class="line">    field5: &#123;</span><br><span class="line">        child: <span class="string">"child"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    field6: [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ],</span><br><span class="line">    field7: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="keyword">this</span>.field1 )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> res = <span class="built_in">JSON</span>.parse( <span class="built_in">JSON</span>.stringify( target ) )</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"target: "</span>, target )</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"res: "</span>, res )</span><br></pre></td></tr></table></figure><p>得到的结果是：</p><p><fancybox><img src="https://s2.ax1x.com/2020/02/04/1DMAET.png" alt=""></fancybox></p><p><strong>总结</strong>：可见，JSON.stringify() 不能处理undefined和function。</p><h2 id="2-2复制一个循环应用的对象"><a href="#2-2复制一个循环应用的对象" class="headerlink" title="2.2复制一个循环应用的对象"></a>2.2复制一个循环应用的对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> target = &#123;</span><br><span class="line">    field1: <span class="string">"string"</span>,</span><br><span class="line">    field2: <span class="number">33</span>,</span><br><span class="line">    field3: <span class="literal">undefined</span>,</span><br><span class="line">    field4: <span class="literal">null</span>,</span><br><span class="line">    field5: &#123;</span><br><span class="line">        child: <span class="string">"child"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    field6: [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ],</span><br><span class="line">    field7: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="keyword">this</span>.field1 )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">target.target = target</span><br><span class="line"><span class="keyword">var</span> res = <span class="built_in">JSON</span>.parse( <span class="built_in">JSON</span>.stringify( target ) )</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"target: "</span>, target )</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"res: "</span>, res )</span><br></pre></td></tr></table></figure><p>结果：<br><fancybox><img src="https://s2.ax1x.com/2020/02/04/1DMOMR.png" alt=""></fancybox></p><p><strong>总结</strong>：可见，JSON.stringify() 不能处理处理循环引用的结构</p><h1 id="3-手写一个深拷贝"><a href="#3-手写一个深拷贝" class="headerlink" title="3.手写一个深拷贝"></a>3.手写一个深拷贝</h1><h2 id="3-1浅拷贝"><a href="#3-1浅拷贝" class="headerlink" title="3.1浅拷贝"></a>3.1浅拷贝</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params"> target </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cloneTarget = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">let</span> key <span class="keyword">in</span> target )&#123;</span><br><span class="line">        cloneTarget[key] = target[key]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cloneTarget</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是一个浅拷贝，没有考虑数组与对象。</p><h2 id="3-2-考虑对象"><a href="#3-2-考虑对象" class="headerlink" title="3.2 考虑对象"></a>3.2 考虑对象</h2><p>我们可以使用 typeof 来判断数据类型：</p><blockquote><p>typeof可以查看数据的类型有 7 种：<br>typeof 12345 === number<br>typeof “999” === string<br>typeof {} === object  null   []<br>typeof undefined === undefined<br>typeof true === boolean<br>typeof symbol(23) === symbol<br>typeof console.log === function</p><footer><strong>typeof小提示</strong></footer></blockquote><p>使用递归处理引用对象的拷贝：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params"> target </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">typeof</span> target === <span class="string">"object"</span> )&#123;</span><br><span class="line">        <span class="keyword">let</span> cloneTarget = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">let</span> key <span class="keyword">in</span> target )&#123;</span><br><span class="line">            cloneTarget[key] = clone( target[key] )</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cloneTarget</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> target</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><fancybox><img src="https://s2.ax1x.com/2020/02/04/1DO80K.png" alt=""></fancybox></p><p><strong>总结</strong></p><p>因为typeof会把数组识别成object，所以，代码还需要再度改进。</p><h2 id="3-3-考虑数组"><a href="#3-3-考虑数组" class="headerlink" title="3.3 考虑数组"></a>3.3 考虑数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params"> target </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">typeof</span> target === <span class="string">"object"</span> )&#123;</span><br><span class="line">        <span class="keyword">let</span> cloneTarget = <span class="built_in">Array</span>.isArray( target ) ? [] : &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">let</span> key <span class="keyword">in</span> target )&#123;</span><br><span class="line">            cloneTarget[key] = clone( target[key] )</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cloneTarget</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> target</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试结果：</strong></p><p><fancybox><img src="https://s2.ax1x.com/2020/02/04/1DzROA.png" alt=""></fancybox></p><p><strong>总结：</strong></p><p>可见，数组也可以复制了，下面我们要解决循环引用。</p><h2 id="3-4-考虑循环引用"><a href="#3-4-考虑循环引用" class="headerlink" title="3.4 考虑循环引用"></a>3.4 考虑循环引用</h2><p>当学习过设计模式后，我们会发现，有很多情况存在循环引用的问题，所以，在深拷贝时，循环引用的问题是必须要解决的。</p><p>解决循环引用问题，我们可以额外开辟一个存储空间，来存储当前对象和拷贝对象的对应关系，当需要拷贝当前对象时，先去存储空间中找，有没有拷贝过这个对象，如果有的话直接返回，如果没有的话继续拷贝，这样就巧妙化解的循环引用的问题。</p><p>—引用自：<a href="https://juejin.im/post/5d6aa4f96fb9a06b112ad5b1#heading-5" target="_blank" rel="noopener">如何写出一个惊艳面试官的深拷贝?</a></p><p>es6中，有这样一种数据结构叫 Map，他能将对象作为键，这样，我们就能很好的保存对象，并判断对象是否被拷贝过了。</p><p>整体流程如下：</p><ol><li>是对象，检查map中是否存在此对象</li><li>存在—-返回保存在map中的键</li><li>不存在—将值存入map，键的值使用当前cloneTarget（这里其实用什么都行）</li><li>继续递归拷贝，并传入此时的map</li></ol><p>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params"> target, map = new Map(</span>) )</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">typeof</span> target === <span class="string">"object"</span> )&#123;</span><br><span class="line">        <span class="keyword">var</span> cloneTarget = <span class="built_in">Array</span>.isArray( target ) ? [] : &#123;&#125;</span><br><span class="line">        <span class="keyword">if</span>( map.get( target ) )&#123;</span><br><span class="line">            <span class="keyword">return</span> map.get( target )</span><br><span class="line">        &#125;</span><br><span class="line">        map.set( target, cloneTarget )</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">let</span> key <span class="keyword">in</span> target )&#123;</span><br><span class="line">            cloneTarget[key] = clone( target[key], map )</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cloneTarget</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> target</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：<br><fancybox><img src="https://s2.ax1x.com/2020/02/05/1rJSNq.png" alt=""></fancybox></p><p>可以看见，已经解决了循环引用的问题。</p><h2 id="3-5-简单性能优化"><a href="#3-5-简单性能优化" class="headerlink" title="3.5 简单性能优化"></a>3.5 简单性能优化</h2><p>使用 WeakMap 数据结构，将复制对象属性的强引用变为弱引用。</p><p>WeakMap的作用，请参考 <a href="http://es6.ruanyifeng.com/#docs/set-map#WeakMap" target="_blank" rel="noopener">es6 WeakMap</a>.</p><p>修改后的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params"> target, map = new WeakMap(</span>) )</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">typeof</span> target === <span class="string">"object"</span> )&#123;</span><br><span class="line">        <span class="keyword">var</span> cloneTarget = <span class="built_in">Array</span>.isArray( target ) ? [] : &#123;&#125;</span><br><span class="line">        <span class="keyword">if</span>( map.get( target ) )&#123;</span><br><span class="line">            <span class="keyword">return</span> map.get( target )</span><br><span class="line">        &#125;</span><br><span class="line">        map.set( target, cloneTarget )</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">let</span> key <span class="keyword">in</span> target )&#123;</span><br><span class="line">            cloneTarget[key] = clone( target[key], map )</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cloneTarget</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> target</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，我们就完成了一个简单的深拷贝，解决了对象、数组、循环引用的问题。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>总结一下写出一个深拷贝的过程：</p><ol><li>需要传入两个参数，一个是拷贝目标，一个是作为拷贝过属性的容器 WeakMap </li><li>判断拷贝目标是否一个对象 或是 数组</li><li>是 使用 WeakMap 判断是否已经拷贝，并递归拷贝每个属性</li><li>不是 直接返回此属性的值</li></ol><p>js中还有很多其他的数据结构，比如 Set 和 Map，这里就不做继续的深入了，</p><p>如果你想继续深入深拷贝，你可以参考：<a href="https://juejin.im/post/5d6aa4f96fb9a06b112ad5b1#heading-5" target="_blank" rel="noopener">如何写出一个惊艳面试官的深拷贝?</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://juejin.im/post/5d6aa4f96fb9a06b112ad5b1#heading-5" target="_blank" rel="noopener">如何写出一个惊艳面试官的深拷贝?</a></p><p><a href="http://es6.ruanyifeng.com/#docs/set-map#WeakMap" target="_blank" rel="noopener">阮一峰 es6</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>思路清晰---socket.io的总结</title>
      <link href="/2020/01/30/%E6%80%9D%E8%B7%AF%E6%B8%85%E6%99%B0-socket-io%E7%9A%84%E6%80%BB%E7%BB%93/"/>
      <url>/2020/01/30/%E6%80%9D%E8%B7%AF%E6%B8%85%E6%99%B0-socket-io%E7%9A%84%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><fancybox><img src="https://s2.ax1x.com/2020/01/31/11oObQ.png" alt=""></fancybox></p><p>思路清晰的使用socket.io…..</p><a id="more"></a><h1 id="引入："><a href="#引入：" class="headerlink" title="引入："></a>引入：</h1><h2 id="先看官网api："><a href="#先看官网api：" class="headerlink" title="先看官网api："></a>先看官网api：</h2><p><img src="https://s2.ax1x.com/2020/01/31/13JEmd.png" alt=""></p><p>可以看见，主要有这三个对象：server，namespace和socket</p><p>如果你掌握了这三个对象，那么你就已经基本学会socket.io的使用了。</p><h2 id="在服务端，我们会写出这样的socket-io服务端代码："><a href="#在服务端，我们会写出这样的socket-io服务端代码：" class="headerlink" title="在服务端，我们会写出这样的socket.io服务端代码："></a>在服务端，我们会写出这样的socket.io服务端代码：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)     <span class="comment">// 引入koa</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()          <span class="comment">// 创建一个koa实例</span></span><br><span class="line"><span class="comment">// 引入http模块，并在Server函数中传入app的回调函数</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>).Server( app.callback() )</span><br><span class="line"><span class="comment">// 引入socket.io   传入http，并配置socket</span></span><br><span class="line"><span class="keyword">const</span> IO = <span class="built_in">require</span>(<span class="string">"socket.io"</span>)( http, &#123;</span><br><span class="line">  pingTimeout: <span class="number">1000</span> * <span class="number">10</span>,</span><br><span class="line">  pingInterval: <span class="number">1000</span> * <span class="number">2.5</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 默认命名空间（"/"）总线IO监听连接事件  当前IO为默认命名空间</span></span><br><span class="line">IO.on( <span class="string">"connection"</span>, ( socket ) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 当前socket连接收到event事件，触发callback函数</span></span><br><span class="line">    socket.on( <span class="string">"event"</span>, callBack )</span><br><span class="line">    <span class="comment">// 向当前socket连接客户端触发event事件，返回数据sendData</span></span><br><span class="line">    socket.emit( <span class="string">"event"</span>, sendData )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于如下代码：</span></span><br><span class="line"><span class="keyword">var</span> mainSpace = IO.of(<span class="string">"/"</span>)</span><br><span class="line">mainSpace.on( <span class="string">"connection"</span>, ( socket ) =&gt; &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看了上面的代码，不难发现socket.io暴露两个对象供我们使用，一个是当前命名空间总线IO，一个是当前连接的socket，他们的关系如图：</p><p><fancybox><img src="https://s2.ax1x.com/2020/01/31/13JX38.png" alt=""></fancybox></p><p>这里就不得不说一下命名空间了</p><h1 id="关于命名空间（namespace）："><a href="#关于命名空间（namespace）：" class="headerlink" title="关于命名空间（namespace）："></a>关于命名空间（namespace）：</h1><p>默认命名空间：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">amespace &#123;</span><br><span class="line">  name: <span class="string">'/'</span>,</span><br><span class="line">  server:</span><br><span class="line">   Server &#123;</span><br><span class="line">     nsps: &#123; <span class="string">'/'</span>: [Circular] &#125;,</span><br><span class="line">     parentNsps: <span class="built_in">Map</span> &#123;&#125;,</span><br><span class="line">     _path: <span class="string">'/socket.io'</span>,</span><br><span class="line">     _serveClient: <span class="literal">true</span>,</span><br><span class="line">     parser:</span><br><span class="line">      &#123; <span class="attr">protocol</span>: <span class="number">4</span>,</span><br><span class="line">        types: [<span class="built_in">Array</span>],</span><br><span class="line">        CONNECT: <span class="number">0</span>,</span><br><span class="line">        DISCONNECT: <span class="number">1</span>,</span><br><span class="line">        EVENT: <span class="number">2</span>,</span><br><span class="line">        ACK: <span class="number">3</span>,</span><br><span class="line">        ERROR: <span class="number">4</span>,</span><br><span class="line">        BINARY_EVENT: <span class="number">5</span>,</span><br><span class="line">        BINARY_ACK: <span class="number">6</span>,</span><br><span class="line">        Encoder: [<span class="built_in">Function</span>: Encoder],</span><br><span class="line">        Decoder: [<span class="built_in">Function</span>: Decoder] &#125;,</span><br><span class="line">     encoder: Encoder &#123;&#125;,</span><br><span class="line">     _adapter: [<span class="built_in">Function</span>: Adapter],</span><br><span class="line">     _origins: <span class="string">'*:*'</span>,</span><br><span class="line">     sockets: [Circular],</span><br><span class="line">     eio:</span><br><span class="line">      Server &#123;</span><br><span class="line">        clients: &#123;&#125;,</span><br><span class="line">        clientsCount: <span class="number">0</span>,</span><br><span class="line">        wsEngine: <span class="string">'ws'</span>,</span><br><span class="line">        pingTimeout: <span class="number">5000</span>,</span><br><span class="line">        pingInterval: <span class="number">25000</span>,</span><br><span class="line">        upgradeTimeout: <span class="number">10000</span>,</span><br><span class="line">        maxHttpBufferSize: <span class="number">100000000</span>,</span><br><span class="line">        transports: [<span class="built_in">Array</span>],</span><br><span class="line">        allowUpgrades: <span class="literal">true</span>,</span><br><span class="line">        allowRequest: [<span class="built_in">Function</span>: bound ],</span><br><span class="line">        cookie: <span class="string">'io'</span>,</span><br><span class="line">        cookiePath: <span class="string">'/'</span>,</span><br><span class="line">        cookieHttpOnly: <span class="literal">true</span>,</span><br><span class="line">        perMessageDeflate: [<span class="built_in">Object</span>],</span><br><span class="line">        httpCompression: [<span class="built_in">Object</span>],</span><br><span class="line">        initialPacket: [<span class="built_in">Array</span>],</span><br><span class="line">        ws: [<span class="built_in">Object</span>],</span><br><span class="line">        _events: [<span class="built_in">Object</span>],</span><br><span class="line">        _eventsCount: <span class="number">1</span> &#125;,</span><br><span class="line">     httpServer:</span><br><span class="line">      Server &#123;</span><br><span class="line">        domain: <span class="literal">null</span>,</span><br><span class="line">        _events: [<span class="built_in">Object</span>],</span><br><span class="line">        _eventsCount: <span class="number">5</span>,</span><br><span class="line">        _maxListeners: <span class="literal">undefined</span>,</span><br><span class="line">        _connections: <span class="number">0</span>,</span><br><span class="line">        _handle: <span class="literal">null</span>,</span><br><span class="line">        _usingSlaves: <span class="literal">false</span>,</span><br><span class="line">        _slaves: [],</span><br><span class="line">        _unref: <span class="literal">false</span>,</span><br><span class="line">        allowHalfOpen: <span class="literal">true</span>,</span><br><span class="line">        pauseOnConnect: <span class="literal">false</span>,</span><br><span class="line">        httpAllowHalfOpen: <span class="literal">false</span>,</span><br><span class="line">        timeout: <span class="number">120000</span>,</span><br><span class="line">        keepAliveTimeout: <span class="number">5000</span>,</span><br><span class="line">        _pendingResponseData: <span class="number">0</span>,</span><br><span class="line">        maxHeadersCount: <span class="literal">null</span>,</span><br><span class="line">        [<span class="built_in">Symbol</span>(asyncId)]: <span class="number">-1</span> &#125;,</span><br><span class="line">     engine:</span><br><span class="line">      Server &#123;</span><br><span class="line">        clients: &#123;&#125;,</span><br><span class="line">        clientsCount: <span class="number">0</span>,</span><br><span class="line">        wsEngine: <span class="string">'ws'</span>,</span><br><span class="line">        pingTimeout: <span class="number">5000</span>,</span><br><span class="line">        pingInterval: <span class="number">25000</span>,</span><br><span class="line">        upgradeTimeout: <span class="number">10000</span>,</span><br><span class="line">        maxHttpBufferSize: <span class="number">100000000</span>,</span><br><span class="line">        transports: [<span class="built_in">Array</span>],</span><br><span class="line">        allowUpgrades: <span class="literal">true</span>,</span><br><span class="line">        allowRequest: [<span class="built_in">Function</span>: bound ],</span><br><span class="line">        cookie: <span class="string">'io'</span>,</span><br><span class="line">        cookiePath: <span class="string">'/'</span>,</span><br><span class="line">        cookieHttpOnly: <span class="literal">true</span>,</span><br><span class="line">        perMessageDeflate: [<span class="built_in">Object</span>],</span><br><span class="line">        httpCompression: [<span class="built_in">Object</span>],</span><br><span class="line">        initialPacket: [<span class="built_in">Array</span>],</span><br><span class="line">        ws: [<span class="built_in">Object</span>],</span><br><span class="line">        _events: [<span class="built_in">Object</span>],</span><br><span class="line">        _eventsCount: <span class="number">1</span> &#125; &#125;,</span><br><span class="line">  sockets: &#123;&#125;,</span><br><span class="line">  connected: &#123;&#125;,</span><br><span class="line">  fns: [],</span><br><span class="line">  ids: <span class="number">0</span>,</span><br><span class="line">  rooms: [],</span><br><span class="line">  flags: &#123;&#125;,</span><br><span class="line">  adapter: Adapter &#123; <span class="attr">nsp</span>: [Circular], <span class="attr">rooms</span>: &#123;&#125;, <span class="attr">sids</span>: &#123;&#125;, <span class="attr">encoder</span>: Encoder &#123;&#125; &#125; &#125;</span><br></pre></td></tr></table></figure><h1 id="命名空间与socket"><a href="#命名空间与socket" class="headerlink" title="命名空间与socket"></a>命名空间与socket</h1><h2 id="当前命名空间总线IO的总结"><a href="#当前命名空间总线IO的总结" class="headerlink" title="当前命名空间总线IO的总结"></a>当前命名空间总线IO的总结</h2><p>通过上面的命名空间的定义的代码，我们可以知道，在总线IO上，拥有所有连接的socket的信息，拥有所有的rooms信息，</p><p>故：</p><ol><li>可以向指定房间里发送消息</li><li>可以向连接到当前命名空间里的所有socket发送消息</li><li>等…</li></ol><p>官网api截图：</p><p><fancybox><img src="https://s2.ax1x.com/2020/01/31/13JkOH.png" alt=""></fancybox></p><p>可知，总的是对room和连接的sockets进行操作。</p><h2 id="当前连接socket总结："><a href="#当前连接socket总结：" class="headerlink" title="当前连接socket总结："></a>当前连接socket总结：</h2><p><fancybox><img src="https://s2.ax1x.com/2020/01/31/13nSvq.png" alt=""></fancybox></p><h1 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h1><p>当理解了总线IO与当前连接的socket的关系后，就能思路清晰的写出优秀的的代码了。</p><h2 id="写下这篇文章，希望对你有帮助，与君共勉！"><a href="#写下这篇文章，希望对你有帮助，与君共勉！" class="headerlink" title="写下这篇文章，希望对你有帮助，与君共勉！"></a>写下这篇文章，希望对你有帮助，与君共勉！</h2><h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><p><strong><a href="https://socket.io/docs/server-api/#Server" target="_blank" rel="noopener">socket.io官网</a></strong></p><p><strong><a href="https://blog.csdn.net/sunq1982/article/details/78043330" target="_blank" rel="noopener">socket.io命名空间的详细解析</a></strong></p><p><strong><a href="https://www.jianshu.com/p/8d28d3e0b43e" target="_blank" rel="noopener">WebSocket协议-Socket.io 服务端API</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> socket.io </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 入门 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>curtain 的 vscode</title>
      <link href="/2020/01/06/%E6%88%91%E7%9A%84vscode/"/>
      <url>/2020/01/06/%E6%88%91%E7%9A%84vscode/</url>
      
        <content type="html"><![CDATA[<p>记录自己常用的一些配置…</p><a id="more"></a><h1 id="1-打开setting-json配置文件"><a href="#1-打开setting-json配置文件" class="headerlink" title="1. 打开setting.json配置文件"></a>1. 打开setting.json配置文件</h1><p><img src="https://image.gslb.dawnlab.me/c219e2ba7704d878cc8270f905269137.png" alt=""></p><h1 id="2-VSCode实现用Ctrl-滚轮实现代码的缩放"><a href="#2-VSCode实现用Ctrl-滚轮实现代码的缩放" class="headerlink" title="2. VSCode实现用Ctrl+滚轮实现代码的缩放"></a>2. VSCode实现用Ctrl+滚轮实现代码的缩放</h1><p>配置文件如下：</p><p>在文件–&gt;首选项–&gt;设置–&gt;用户设置中添加如下代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"editor.mouseWheelZoom": true</span><br></pre></td></tr></table></figure><h1 id="3-关闭-vscode-空包折叠"><a href="#3-关闭-vscode-空包折叠" class="headerlink" title="3. 关闭 vscode 空包折叠"></a>3. 关闭 vscode 空包折叠</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"explorer.compactFolders": false</span><br></pre></td></tr></table></figure><h1 id="4-vscode-常用快捷键"><a href="#4-vscode-常用快捷键" class="headerlink" title="4. vscode 常用快捷键"></a>4. vscode 常用快捷键</h1><p>更多请参考：<a href="https://www.html.cn/top/15974.html" target="_blank" rel="noopener">23个鲜为人知的VSCode快捷键（动图演示）</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vsCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个小demo弄懂vue的$nextTick</title>
      <link href="/2020/01/06/%E4%B8%80%E4%B8%AA%E5%B0%8Fdemo%E5%BC%84%E6%87%82vue%E7%9A%84$nextTick/"/>
      <url>/2020/01/06/%E4%B8%80%E4%B8%AA%E5%B0%8Fdemo%E5%BC%84%E6%87%82vue%E7%9A%84$nextTick/</url>
      
        <content type="html"><![CDATA[<p><fancybox><img src="https://image.gslb.dawnlab.me/62c937472655f71064368ea87d641cb1.jpg" alt=""></fancybox></p><p>一个小demo弄懂vue的$nextTick的作用</p><a id="more"></a><p>有这样一段代码：</p><p>代码截图：<br><fancybox><img src="https://image.gslb.dawnlab.me/10875e2f276bac164ab38fbc55dd6d12.png" alt=""></fancybox></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/vue/2.6.10/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"span"</span> <span class="attr">v-if</span>=<span class="string">"showSpan"</span> &gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btn"</span> &gt;</span>显示<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            showSpan: <span class="literal">false</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            btn()&#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.showSpan = <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log( <span class="built_in">document</span>.querySelector(<span class="string">"span"</span>) )</span></span><br><span class="line"><span class="javascript">                setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log( <span class="string">"200毫秒后"</span> )</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log( <span class="built_in">document</span>.querySelector(<span class="string">"span"</span>) )</span></span><br><span class="line">                &#125;, 200 )</span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.$nextTick( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log( <span class="string">"$nextTick执行的结果"</span> )</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log( <span class="built_in">document</span>.querySelector(<span class="string">"span"</span>) )</span></span><br><span class="line">                &#125; )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行结果：</p><p><fancybox><img src="https://image.gslb.dawnlab.me/a497ffd403e6b77e63c3b9ec527675bc.png" alt=""></fancybox></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>第一个结果为null，因为没有找到dom元素，<br>第二个出现的是$nextTick执行的结果，是确定dom重新渲染挂载完毕执行的回调函数<br>第三个才是定时器的结果，是在最后执行的函数。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>可知，vue中数据更新引起的dom更新是异步执行的。</p><h2 id="小拓展"><a href="#小拓展" class="headerlink" title="小拓展"></a>小拓展</h2><h3 id="v-if和v-show的区别"><a href="#v-if和v-show的区别" class="headerlink" title="v-if和v-show的区别"></a>v-if和v-show的区别</h3><p>当我们把上文的 <code>v-if</code> 改成 <code>v-show</code> 后，我们可以看到：</p><p><fancybox><img src="https://image.gslb.dawnlab.me/3a87602c6d51db2eaaec1aa8a5629c74.png" alt=""></fancybox></p><p>可以看出，<code>v-if=false</code> 时，元素不会渲染到页面，使用 <code>v-show</code> 元素一直在页面中，只是设置样式 <code>display: none;</code> 没有显示而已，</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则之给字符串来一套增删改查服务</title>
      <link href="/2020/01/03/%E6%AD%A3%E5%88%99%E4%B9%8B%E7%BB%99%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9D%A5%E4%B8%80%E5%A5%97%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E6%9C%8D%E5%8A%A1/"/>
      <url>/2020/01/03/%E6%AD%A3%E5%88%99%E4%B9%8B%E7%BB%99%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9D%A5%E4%B8%80%E5%A5%97%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://image.gslb.dawnlab.me/2fb5e7025b9b0664bf98f9007c370b19.jpg" alt=""></p><p>想学习正则的操作吗？？那就进来吧…</p><a id="more"></a><h1 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h1><p>嗨咯，亲爱的读者你好！既然你点进来了，那么想必你一定对正则感兴趣吧。</p><p>如果你对正则充满畏惧心理，不懂也不理解正则，没关系，往下看，</p><p>看完这篇文章，相信你一定会对正则充满兴趣，并且不再畏惧，消灭恐惧的最好办法，就是面对恐惧！！</p><p>加油！！读完它，理解正则操作，然后爱上正则！</p><blockquote><p>正则表达式是匹配模式，要么匹配字符，要么匹配位置。请记住这句话。</p><footer><strong>@老姚</strong><cite><a href="https://juejin.im/post/5965943ff265da6c30653879" target="_blank" rel="noopener">JS正则表达式完整教程（略长）</a></cite></footer></blockquote><p>老姚对正则的评价非常到位，我很赞同，希望你能记住，这篇文章就是在匹配的基础上做的相关的操作。</p><p>如果你没有正则的基础，请不要害怕，这篇文章会一步一步的带你了解正则相关的操作，每个操作的案例相对简单易理解，但是展示出了每个操作的作用。在阅读文章前，请仔细的阅读前置知识，了解相关api的作用。</p><p>如果你学习过正则，对正则有一定了解，那么这篇文章非常适合你，这篇文章可以加深你对正则用法的理解。</p><p>如果你是正则高手，文中有写的不对的和写得不妥当的，也请指出错误。</p><p>本文不涉及正则表达式的书写教学，但是并影响你对每个增删查改操作的理解。如果你想学习正则表达式的书写，在文章后面我有推荐学习正则的优秀文章。</p><p>相信你看过这篇文章后，会提高你对正则的理解与学习正则的兴趣。加油！</p><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><p>既然是用正则对字符串的操作，那么，我们得需要了解相关的方法，对吧？？与正则相关的方法就6个（真的很少很容易理解！！）：如果你对下面六个方法非常熟悉了，你可以直接从前置知识的总结处开始看（￣︶￣）↗</p><figure class="highlight"><figcaption><span>与正则相关的6个方法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串四个</span></span><br><span class="line">String#search    // 查找匹配到字符串的位置，返回位置index</span><br><span class="line">String#split     // 以正则匹配到的字符串截断原字符串，返回数组</span><br><span class="line">String#match     // 匹配字符串并返回一些信息</span><br><span class="line">String#replace   // 对匹配到的字符串进行替换，返回修改后的字符串</span><br><span class="line"><span class="comment">// 正则两个</span></span><br><span class="line">RegExp#test      // 匹配字符串是否有符合正则的部分</span><br><span class="line">RegExp#exec      // 匹配字符串，并返回相关信息</span><br></pre></td></tr></table></figure><h2 id="1-String-search"><a href="#1-String-search" class="headerlink" title="1.String#search"></a>1.String#search</h2><p>语法：str.search(regexp)</p><p>定义：正则去匹配字符串，如果匹配成功，就返回匹配成功的位置，匹配失败就返回-1.</p><figure class="highlight js"><figcaption><span>search</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/\d/</span></span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"abc123"</span></span><br><span class="line"><span class="built_in">console</span>.log( string.search(regex) )</span><br><span class="line"><span class="comment">// =&gt; 3</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 当传入的参数是字符串时，会把字符串转成正则表达式。</p><h2 id="2-String-split"><a href="#2-String-split" class="headerlink" title="2.String#split"></a>2.String#split</h2><p>语法：str.split(separator, limit)</p><p>定义：split()方法把原字符串分割成子字符串组成数组，并返回该数组。</p><p>两个参数均是可选的，其中 separator 表示分隔符，它可以是字符串也可以是正则表达式。如果忽略 separator，则返回的数组包含一个由原字符串组成的元素。如果 separator 是一个空串，则 str 将会被分割成一个由原字符串中字符组成的数组。limit 表示从返回的数组中截取前 limit 个元素，从而限定返回的数组长度。</p><figure class="highlight js"><figcaption><span>split</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/\D/</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"2017/06/26"</span>.split(regex) )</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"2017.06.26"</span>.split(regex, <span class="number">2</span>) )</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"2017-06-26"</span>.split(regex) )</span><br><span class="line"><span class="comment">// =&gt; ["2017", "06", "26"]</span></span><br><span class="line"><span class="comment">// =&gt; ["2017", "06"]</span></span><br><span class="line"><span class="comment">// =&gt; ["2017", "06", "26"]</span></span><br></pre></td></tr></table></figure><h2 id="3-String-match"><a href="#3-String-match" class="headerlink" title="3.String#match"></a>3.String#match</h2><p>语法：str.match(regexp)</p><p>定义：查找出与正则相匹配的项。</p><p>返回值：</p><ol><li>正则的匹配模式为全局匹配：返回匹配的数组或则null</li><li>正则的匹配模式不是为全局匹配：返回匹配到的项，groups：分组，index:找到结果的索引,input:原字符串</li></ol><figure class="highlight js"><figcaption><span>match</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"aa22bb313cc444ff"</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d+/g</span></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/(\d+)([a-z]+)(\d+)/</span></span><br><span class="line"><span class="built_in">console</span>.log( str.match( reg ) )</span><br><span class="line"><span class="built_in">console</span>.log( str.match( reg1 ) )</span><br><span class="line"><span class="comment">// =&gt; ["22", "313", "444"]</span></span><br><span class="line"><span class="comment">// =&gt; ["22bb313", "22", "bb", "313", index: 2, input: "aa22bb313cc444", groups: undefined]</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 当传入的参数是字符串时，会把字符串转成正则表达式。</p><h2 id="4-String-replace"><a href="#4-String-replace" class="headerlink" title="4.String#replace"></a>4.String#replace</h2><p>语法：str.replace( regexp | substr, newSubStr | function )</p><p>参数说明：</p><ol><li>regexp: 一个 RegExp 对象. 该正则所匹配的内容会被第二个参数的返回值替换掉。</li><li>substr: 一个要被 newSubStr 替换的字符串.</li><li>newSubStr: 替换掉第一个参数在原字符串中的匹配部分. 该字符串中可以内插一些特殊的变量名.</li><li>function: 用来创建新子字符串的函数，该子字符串用于替换与给定regexp或的匹配项substr。</li></ol><p>参数function的参数说明：</p><ul><li>第一个参数：整个正则或者字符串匹配到的字符串，</li><li>中间的参数：依次为正则中分组匹配到的字符串，</li><li>倒数第二个参数：找到结果的索引</li><li>倒数第一个参数：原字符串</li></ul><figure class="highlight js"><figcaption><span>str.replace( regexp, function )</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"aa22bb313cc444ff"</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\d+)(\w&#123;1&#125;)/g</span></span><br><span class="line">str = str.replace( reg, <span class="function"><span class="keyword">function</span>(<span class="params"> str, s1, s2, index, sour </span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"参数列表："</span>, str, s1, s2, index, sour )</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="built_in">arguments</span> )</span><br><span class="line">    <span class="keyword">return</span> s1 + <span class="string">"---"</span> + s2</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log( str )</span><br></pre></td></tr></table></figure><p><img src="https://image.gslb.dawnlab.me/1ece30eabe0919fd6e5b157856349d48.png" alt=""></p><h2 id="5-RegExp-test"><a href="#5-RegExp-test" class="headerlink" title="5.RegExp#test"></a>5.RegExp#test</h2><p>语法：reg.test( str )</p><p>说明：正则去匹配字符串，匹配成功，返回true，匹配失败，返回false</p><figure class="highlight js"><figcaption><span>reg.test()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/\d/</span></span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"abc123"</span></span><br><span class="line"><span class="built_in">console</span>.log( regex.test(string) )</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="6-RegExp-exec"><a href="#6-RegExp-exec" class="headerlink" title="6.RegExp#exec"></a>6.RegExp#exec</h2><p>语法：reg.exec( str )</p><p>说明：exec() 方法在一个指定字符串中执行一个搜索匹配。返回一个结果数组或 null。</p><figure class="highlight js"><figcaption><span>reg.exec( str )</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"aa22bb313cc444ff"</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\d+)(\w&#123;1&#125;)/g</span></span><br><span class="line"><span class="built_in">console</span>.log( reg.exec( str ))</span><br><span class="line"><span class="built_in">console</span>.log( reg.exec( str ))</span><br><span class="line"><span class="built_in">console</span>.log( reg.exec( str ))</span><br></pre></td></tr></table></figure><p><img src="https://image.gslb.dawnlab.me/50cc8a9a0d72e4a3c988a16f9cfd5b9b.png" alt=""></p><p><strong>注意</strong><br>当使用全局模式时，exec函数会把这次匹配到的位置存放在当前正则reg的lastIndex里面，下次调用时，会从这次的最后位置开始查找。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过上面简单的案例与说明，相信你已经可以看出我们要进行的增删改查操作应该用哪个方法了吧？我们来总结一下：</p><ul><li><p>增：6个方法中，只有replace可以对匹配到的字符串进行操作，所以当我们需要在字符串中增加内容时，我们就可以使用replace方法。</p></li><li><p>删：6个方法中，split方法以匹配到的字符串为断点截断字符串返回数组，replace也可以对匹配到的字符串进行操作，所以删除可以使用split和replace方法。</p></li><li><p>查：6个方法中，除了split方法，都或多或少可以得到一些匹配到字符串的信息。</p></li><li><p>改：6个方法中，只有replace方法可以操作匹配到的字符串，所以修改只有用replace方法。</p></li></ul><p>好了，下面详细的介绍下各种操作的详细情况。</p><h1 id="1-增"><a href="#1-增" class="headerlink" title="1.增"></a>1.增</h1><p>相信你一定遇到过往字符串里面加字符串的情况，你一般是怎么操作的呢？我们来分析下：</p><p>当向字符串中添加字符串时，有两种添加情况，一种：添加到匹配的字符串前，另一种是：添加到匹配的字符串后面。</p><p>是吧？？好，开始操作吧！</p><h2 id="添加到匹配字符串前："><a href="#添加到匹配字符串前：" class="headerlink" title="添加到匹配字符串前："></a>添加到匹配字符串前：</h2><p>我们可以使用正则位置匹配表达式：(?=p)，正向肯定预查，其中p是一个子模式，即p前面的位置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">"hello"</span>.replace(<span class="regexp">/(?=ll)/g</span>, <span class="string">'#'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"><span class="comment">// =&gt; "he#llo"</span></span><br></pre></td></tr></table></figure><p>也可以直接使用函数操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">"hello"</span>.replace(<span class="regexp">/(?=ll)/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> str </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"#"</span> + str</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"><span class="comment">// =&gt; "he#llo"</span></span><br></pre></td></tr></table></figure><h2 id="添加到匹配字符串后："><a href="#添加到匹配字符串后：" class="headerlink" title="添加到匹配字符串后："></a>添加到匹配字符串后：</h2><p>我们可以使用正则位置匹配表达式：(?&lt;=p)，反向肯定预查，就是p后面的位置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">"hello"</span>.replace(<span class="regexp">/(?&lt;=ll)/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> str </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"#"</span> + str</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"><span class="comment">// =&gt; "hell#o"</span></span><br></pre></td></tr></table></figure><p>当然，你也可以直接使用replace的函数操作完成。</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ul><li><p>在整个字符串前和后面添加，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">"hello"</span>.replace(<span class="regexp">/^|$/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> str </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"#"</span> + str</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"><span class="comment">// =&gt; "#hello#"</span></span><br></pre></td></tr></table></figure></li><li><p>在每个单词的前后面添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">"hello world"</span>.replace(<span class="regexp">/^|$/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> str </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"#"</span> + str</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"><span class="comment">// =&gt; "#hello# #world#"</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="2-删："><a href="#2-删：" class="headerlink" title="2.删："></a>2.删：</h1><p>经过我们前面的总结，删除可以使用String.split和String.replace完成。</p><h2 id="String-splite"><a href="#String-splite" class="headerlink" title="String.splite"></a>String.splite</h2><p>可以知道，使用splite方法返回的是一个数组，操作后，我们可以使用join()函数，返回字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"aa22bb313cc444ff"</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d+/</span></span><br><span class="line"><span class="built_in">console</span>.log( str.split( reg ).join(<span class="string">""</span>) )</span><br><span class="line"><span class="comment">// =&gt; "aabbccff"</span></span><br></pre></td></tr></table></figure><h2 id="String-replace"><a href="#String-replace" class="headerlink" title="String.replace"></a>String.replace</h2><p>使用replace就非常简单了，我们可以把第二个参数传 <code>&quot;&quot;</code> ,也可以用函数操作，返回 <code>&quot;&quot;</code>即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"aa22bb313cc444ff"</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d+/g</span>       <span class="comment">// 全局模式，不加全局模式，只会替换一次</span></span><br><span class="line">str = str.replace( reg, <span class="string">""</span> )</span><br><span class="line"><span class="built_in">console</span>.log( str )</span><br><span class="line"><span class="comment">// =&gt; "aabbccff"</span></span><br></pre></td></tr></table></figure><h1 id="3-查"><a href="#3-查" class="headerlink" title="3.查"></a>3.查</h1><p>查找可以分为两类：一种是需要详细结果的，一种是不需要详细结果的。</p><h2 id="不需要详细结果"><a href="#不需要详细结果" class="headerlink" title="不需要详细结果"></a>不需要详细结果</h2><p>不需要详细结果就是返回 <code>true</code> 和 <code>false</code> 就可以了。这里可以使用test</p><figure class="highlight js"><figcaption><span>验证电话号码</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^1[345789]\d&#123;9&#125;$/</span></span><br><span class="line"><span class="keyword">var</span> res = reg.test( <span class="string">"13882628333"</span> )</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="需要详细结果"><a href="#需要详细结果" class="headerlink" title="需要详细结果"></a>需要详细结果</h2><h3 id="使用String-match"><a href="#使用String-match" class="headerlink" title="使用String.match()"></a>使用String.match()</h3><figure class="highlight js"><figcaption><span>获取时间</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^([0-9]&#123;4&#125;)-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"2017-06-10"</span>.match( reg ) )</span><br><span class="line"><span class="comment">// =&gt; ["2017-06-10", "2017", "06", "10", index: 0, input: "2017-06-10", groups: undefined]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>获取类名</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/class=\"(.*)?"/</span></span><br><span class="line"><span class="keyword">var</span> string = <span class="string">'&lt;div id="container" class="main box"&gt;&lt;/div&gt;'</span></span><br><span class="line"><span class="built_in">console</span>.log( string.match( reg ))</span><br><span class="line"><span class="comment">// =&gt; ["class="main box"", "main box", index: 20, input: "&lt;div id="container" class="main box"&gt;&lt;/div&gt;", groups: undefined]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>match获取全部的颜色代码（正则使用g全局匹配模式）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/#([0-9a-fA-F]&#123;6&#125;|[0-9a-fA-F]&#123;3&#125;)/g</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"#ffbbad #Fc01DF #FFF #ffE"</span></span><br><span class="line"><span class="built_in">console</span>.log( str.match( reg ) )</span><br><span class="line"><span class="comment">// =&gt; ["#ffbbad", "#Fc01DF", "#FFF", "#ffE"]</span></span><br></pre></td></tr></table></figure><h3 id="使用reg-exec"><a href="#使用reg-exec" class="headerlink" title="使用reg.exec()"></a>使用reg.exec()</h3><figure class="highlight js"><figcaption><span>获取时间</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/^([0-9]&#123;4&#125;)-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/</span></span><br><span class="line"><span class="built_in">console</span>.log( reg.exec( <span class="string">"2017-06-10"</span> ) )</span><br><span class="line"><span class="comment">// =&gt; ["2017-06-10", "2017", "06", "10", index: 0, input: "2017-06-10", groups: undefined]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>获取类名</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/class=\"(.*)?"/</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'&lt;div id="container" class="main box"&gt;&lt;/div&gt;'</span></span><br><span class="line"><span class="built_in">console</span>.log( reg.exec( str ) )</span><br><span class="line"><span class="comment">// =&gt; ["class="main box"", "main box", index: 20, input: "&lt;div id="container" class="main box"&gt;&lt;/div&gt;", groups: undefined]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>exec获取全部的颜色代码（正则使用g全局匹配模式）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/#([0-9a-fA-F]&#123;6&#125;|[0-9a-fA-F]&#123;3&#125;)/g</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"#ffbbad #Fc01DF #FFF #ffE"</span></span><br><span class="line"><span class="keyword">var</span> arr = []</span><br><span class="line"><span class="keyword">var</span> temp</span><br><span class="line"><span class="keyword">while</span>( temp = reg.exec( str ) )&#123;</span><br><span class="line">    arr.push( temp[<span class="number">0</span>] )</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( arr )</span><br></pre></td></tr></table></figure><h1 id="4-改"><a href="#4-改" class="headerlink" title="4.改"></a>4.改</h1><p>经过前面的终结，我们知道只有replace可以进行修改操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"aa22bb313cc444ff"</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\d+)(\w&#123;1&#125;)/g</span></span><br><span class="line">str = str.replace( reg, <span class="function"><span class="keyword">function</span>(<span class="params"> str, s1, s2, index, sour </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s1 + <span class="string">"---"</span> + s2</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log( str )</span><br><span class="line"><span class="comment">// =&gt; "aa22---bb313---cc444---ff"</span></span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>写下这篇文章，就是想让自己梳理下正则相关的api与用法，加强一下自己写正则的信心。</p><p>看了这篇文章，你是否对正则又有了新的理解呢？对自己写正则是否又增加了几分信心呢？</p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>本文主要讲述了正则的相关用法，考虑到正则新手，所以每个操作都只是做的很简单的案例，正则表达式大都很简单，但是，我相信，看了本文，你会更有信心去学习正则。</p><h2 id="学习正则："><a href="#学习正则：" class="headerlink" title="学习正则："></a>学习正则：</h2><p>如果你想学习正则表达式的书写，我这里将推荐一些好的文章给你：</p><p><a href="https://juejin.im/post/5965943ff265da6c30653879#heading-0" target="_blank" rel="noopener">老姚-JS正则表达式完整教程（略长）</a>     非常推荐的一篇文章，我就是看这篇文章学习的正则，适合有一点正则基础的同学</p><p><a href="https://juejin.im/post/59b5e50f51882519777c4815" target="_blank" rel="noopener">考拉海前端团队—JS 的正则表达式</a>    条理清晰–适合初学者学习正则的书写</p><p>文章在精不在多，这两篇文章对初学正则的同学非常友好，能引导你写出优秀的正则表达式，再结合这篇文章对正则表达式的运用，相信你会对正则的运用游刃有余。</p><h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><p><a href="https://juejin.im/post/5965943ff265da6c30653879#heading-0" target="_blank" rel="noopener">老姚-JS正则表达式完整教程（略长）</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match" target="_blank" rel="noopener">MDN-String.prototype.match()</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace" target="_blank" rel="noopener">MDN-String.prototype.replace()</a></p><h2 id="共勉"><a href="#共勉" class="headerlink" title="共勉"></a>共勉</h2><p>写下这篇文章，希望对你有帮助，与君共勉！</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客再次启程</title>
      <link href="/2019/12/02/%E5%8D%9A%E5%AE%A2%E5%86%8D%E6%AC%A1%E5%90%AF%E7%A8%8B/"/>
      <url>/2019/12/02/%E5%8D%9A%E5%AE%A2%E5%86%8D%E6%AC%A1%E5%90%AF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="https://speed.moe/images/11283769e2d6035f894edb659848d4e1.jpg" alt=""></p><p>换了博客的主题，页面美观多了，心情也舒畅多了。更加有动力写博客了，整理好心情，重新出发！！</p><a id="more"></a><h1 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h1><p>经过一天的配置，博客搭建的差不多了，</p><p>整理好心情！！！</p><h1 id="重新出发！"><a href="#重新出发！" class="headerlink" title="重新出发！"></a>重新出发！</h1>]]></content>
      
      
      <categories>
          
          <category> 我的随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>drawing-board画板</title>
      <link href="/2019/08/14/drawing-board%E7%94%BB%E6%9D%BF/"/>
      <url>/2019/08/14/drawing-board%E7%94%BB%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p><img src="https://speed.moe/images/10b7a48eb201a8d8b55b879f1346bc08.png" alt=""><br>canvas写的画板</p><a id="more"></a><h1 id="快到碗里来-画板"><a href="#快到碗里来-画板" class="headerlink" title="快到碗里来-画板"></a>快到碗里来-画板</h1><hr><p>预览：<a href="https://curtaintan.github.io/drawing-board/" target="_blank" rel="noopener">点击</a></p><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><hr><p>之前学完canvas，一直想自己写一点东西，这两天终于完成了，开心！！</p><h2 id="完成功能："><a href="#完成功能：" class="headerlink" title="完成功能："></a>完成功能：</h2><hr><ol><li>绘画</li><li>画直线</li><li>截图</li><li>旋转</li><li>弹幕</li><li>鼠标触碰弹幕，弹幕悬停</li><li>撤销/前进</li><li>设置画笔信息</li><li>兼容移动端</li></ol><h3 id="功能截图："><a href="#功能截图：" class="headerlink" title="功能截图："></a>功能截图：</h3><p><fancybox><img src="https://speed.moe/images/049770423ee86256db618185a2e988f1.png" height="400px"  /></fancybox><br><fancybox><br>    <img src="https://speed.moe/image/byX3" height="300px" /><br>    <img src="https://speed.moe/images/be83f5d60c5876a922fdcc4f2f7a67e8.png" height="300px" /><br>    <img src="https://speed.moe/images/785defcb66b13d6054be52db20590def.png" height="300px" /><br></fancybox><br><fancybox><img src="https://speed.moe/images/5471de87336ed89bc3484110078ee2f8.png" height="400px" /></fancybox><br><fancybox><img src="https://speed.moe/images/3aba481fb121bc400470f7b39f946fc7.png" /></fancybox></p><h2 id="前置说明"><a href="#前置说明" class="headerlink" title="前置说明"></a>前置说明</h2><p>如果你需要参考代码，你需要看下这里。<br>因为功能复杂，标志的变量有接近10个之多，一下子可能很难看懂，所以我这里说明下我的开发流程，以及定义变量的顺序。</p><ol><li><strong>功能顺序：</strong></li></ol><p>画笔 → 定义画笔信息 → 橡皮檫 → 删除 → 撤销/前进 → 直线 → 截图 → 弹幕</p><ol start="2"><li><strong>定义变量的顺序，以及作用：</strong></li></ol><p>所有功能变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isDown = <span class="literal">false</span>                  <span class="comment">// 标志鼠标是否按下      绘图三步和剪切三步走时，后面两个事件触发的标志</span></span><br><span class="line"><span class="keyword">var</span> points = []                     <span class="comment">// 滑动时收集的点       绘画三步走时，为了时画的线光滑，记录点，减短画线的距离</span></span><br><span class="line"><span class="keyword">var</span> beginPoint = <span class="literal">null</span>               <span class="comment">// 开始的点            绘画三步走时使用</span></span><br><span class="line"></span><br><span class="line">----这三个为一组，画线三人组，为了让画的线更为光滑</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> currentMenu = <span class="string">"icon-pen"</span>        <span class="comment">// 初始按钮            底部按钮选中的按钮</span></span><br><span class="line"><span class="keyword">var</span> currentColor = <span class="number">0</span>                <span class="comment">// 初始颜色的index     颜色选择，默认第一个</span></span><br><span class="line"><span class="keyword">var</span> paintingModal = <span class="string">"pen"</span>           <span class="comment">// 画笔模式   line||pen||cut</span></span><br><span class="line"></span><br><span class="line">----按钮功能三人组，按钮选中标记，颜色选中，画画的模式，切换前面画笔和画直线的模式</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lookModal = <span class="literal">false</span>               <span class="comment">// 鼠标模式             按钮第一个功能，此模式不能绘画，只能看</span></span><br><span class="line"><span class="keyword">var</span> cuted = <span class="literal">false</span>                   <span class="comment">// 标记裁剪时，是否已经裁剪       裁剪后，防止后续的操作再次触发裁剪操作 </span></span><br><span class="line"></span><br><span class="line">----鼠标模式和剪切模式的定义</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> animationTimer = <span class="literal">null</span>           <span class="comment">// 弹幕动画的timer               动画的timer</span></span><br><span class="line"><span class="keyword">var</span> barrageArray = []               <span class="comment">// 保存弹幕的数组</span></span><br><span class="line"><span class="keyword">var</span> globalPoint = &#123; <span class="attr">x</span> : <span class="number">0</span>, <span class="attr">y</span> : <span class="number">0</span> &#125;  <span class="comment">// canvas上鼠标的点        ---弹幕时使用</span></span><br><span class="line"></span><br><span class="line">----弹幕三人组  globalPoint用来标记鼠标在canvas中的坐标，用于判断鼠标是否触碰到弹幕上</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现撤销和重做的功能</span></span><br><span class="line"><span class="keyword">let</span> canvasHistory = []                    <span class="comment">// canvas数据，在每次画线和橡皮檫使用后保存数据</span></span><br><span class="line"><span class="keyword">let</span> step = <span class="number">0</span>                              <span class="comment">// 画笔抬起的步数，清空时，步数也清空</span></span><br><span class="line"></span><br><span class="line">----撤销/前进二人组，画笔抬起时，把画布信息用getImageData存入canvasHistory，用step完成前进和撤销的功能</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> penAttibutes = &#123;                       <span class="comment">// 画笔数据，</span></span><br><span class="line">    width : <span class="number">2</span>,</span><br><span class="line">    lineCap : <span class="string">"round"</span>,</span><br><span class="line">    lineJoin : <span class="string">"round"</span>,</span><br><span class="line">    strokeStyle: <span class="string">"#000"</span>,</span><br><span class="line">    fillStyle: <span class="string">"#000"</span>,</span><br><span class="line">    globalCompositeOperation: <span class="string">"source-over"</span>,</span><br><span class="line">    globalAlpha : <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="开发中遇到的难点与重点与解决方案："><a href="#开发中遇到的难点与重点与解决方案：" class="headerlink" title="开发中遇到的难点与重点与解决方案："></a>开发中遇到的难点与重点与解决方案：</h2><ol><li>保存历史记录使用api对比</li></ol><p>我在写代码的时候有做过参考 <strong><a href="https://juejin.im/post/5c7bf106e51d454b47558882" target="_blank" rel="noopener">这篇文章</a></strong>，<br>文章里用是canvas.toDataUrl的方式做的数据保存，评论里说这个数据保存不理想，<br>其实我一开始的时候想的就是用ctx.getImageDaata的方式来做的，我也用这个两个api做了一个对比：</p><p>代码：</p><img src="./image/savecode.png" /><p>结果：</p><img src="./image/getImg.png" /><img src="./image/dataurl.png" /><p>可见，使用getImageData获取数据是时间是非常短的，并且获取到是画布像素数据，<br>后续可以直接进行像素操作，从而不用再花时间再去获取画布信息，<br>其次，getImageData获取到是数据是有数据结构的，这样在内存里面保存下来对内存更加友好，<br>而使用toDataUrl方式保存下来的数据有21万行那么长的字符串，对内存并不友好。</p><p>后面我还做了他们绘制到画布上的时间对比，他们的时间都在1ms内，到时每次putImageData都要快一点点，但是快这一点时间的意义并不大。</p><p>toDataUrl也是有好处的，因为转置出来的是base64的字符串，所以他能够直接作为图片的src属性，让图片显示到页面。</p><ol start="2"><li>画直线</li></ol><p>如何画出一条直线？？当我做了撤销和前进的时候，我就把画板数据给存到canvasHistory里面了，<br>这里刚好用到，鼠标移动是时候，先清空画布，再绘制保存到canvasHistory里最后那个数据，然后就是绘图三步走，就完成了。</p><p><strong>注意：</strong>这里一定要绘图三步走，或者在绘制前一定要用beginPath()重开一条路径，如果不重开路径，<br>绘制时，会把前面的直线一同绘制出来，因为你一直是一条路径，所以下次绘制时，上次的点也要绘制一遍。</p><ol start="3"><li><p>图片旋转</p><p> 旋转很类似css3，但是，canvas的基点固定在左上角处，所以在旋转的时候，需要先用translate移动画板，可以画一下图，</p></li></ol><p>下面是我画的图：</p><img src="./image/shiyitu.jpg" width="280px" /><pre><code>问题： 当我画笔有rotate属性的时候，当前操作的putImageData不会成功，不知道为什么-----</code></pre><ol start="4"><li><p>如何画出一条光滑的曲线</p><p> 用正常的画法画曲线是时候，画出的曲线不够光滑，<br> 所以我就参考了这篇文章 <strong><a href="https://segmentfault.com/a/1190000016672567" target="_blank" rel="noopener">canvas进阶——如何画出平滑的曲线?</a></strong><br> （其实我也想到了用二次贝塞尔曲线，在寻找更好的解决方案时，就找到这个方法了，这个方案更优），原理可以看原文。</p></li><li><p>鼠标触摸弹幕</p><p> 因为canvas是无记忆性的，所以，你用isPointPath和isPointStroke时，是在当前绘画下才能检测。<br> 在使用isPointPath时，他只与path路径有关，意思就是，你用fillRect直接绘制一个矩形图形是不能检测的，<br> 只能检测rect()和pathTo等围起来的路径内。</p><p> 所以，这里我做了一个外挂路径-用rect()把每个弹幕框起来——哈哈–</p></li><li><p>使用drawImage须知：</p><p> drawImage有三种传参方式，三种方式出来的效果，在书写前可以先参考效果。</p></li></ol><p>参考地址：<a href="https://www.canvasapi.cn/CanvasRenderingContext2D/drawImage" target="_blank" rel="noopener">CanvasRenderingContext2D.drawImage</a></p><ol start="7"><li><p>兼容移动端</p><p> 当在移动端时，会存在移动端延时300ms的问题，因为移动端有双击放大功能，故存在300ms时间。</p><p> 我解决的方法是设置meta信息，禁止缩放，就可以防止300ms问题</p> <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no, target-densitydpi=device-dpi" /></li></ol><h2 id="结语："><a href="#结语：" class="headerlink" title="结语："></a>结语：</h2><p>这个项目大概用了canvas的75%的api，还有像素操作和渐变等api还没用到。</p><p>不知道有没有人看呢，</p><p>如果你看到了这篇文章，希望对你有帮助。</p><p>慢慢来，好好学习，要加油哦！</p><p>与君共勉！！</p><h3 id="参考材料："><a href="#参考材料：" class="headerlink" title="参考材料："></a>参考材料：</h3><ul><li><a href="https://juejin.im/post/5c7bf106e51d454b47558882" target="_blank" rel="noopener">手把手教你实现一个canvas智绘画板</a></li></ul><p>参考了楼主项目的样式，但是所有样式都是我自己写的，嘻嘻，实现方式不一样哦。。</p><ul><li><a href="https://segmentfault.com/a/1190000016672567" target="_blank" rel="noopener">canvas进阶——如何画出平滑的曲线?</a></li></ul><p>画一条光滑的曲线，不错哦。</p><ul><li><a href="http://ghmagical.com/article/page/id/rf5VpT3YQPpN" target="_blank" rel="noopener">canvas动画包教不包会</a></li></ul><p>可以在这里把所有api的意义和作用和参数等都记下来—–</p><ul><li><a href="https://www.canvasapi.cn/" target="_blank" rel="noopener">Canvas API中文文档首页地图</a></li></ul><p>canvas所有的api，当然你也可以去mdn看，其实都一样啦—</p>]]></content>
      
      
      <categories>
          
          <category> 我的作品 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则小记（一）之api速学</title>
      <link href="/2019/08/14/%E6%AD%A3%E5%88%99%E5%B0%8F%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8Bapi%E9%80%9F%E5%AD%A6/"/>
      <url>/2019/08/14/%E6%AD%A3%E5%88%99%E5%B0%8F%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8Bapi%E9%80%9F%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3529936001,627965941&fm=26&gp=0.jpg" alt=""></p><p>作为一个前端，正则是必须要会的技能之一，所以，让我们开始学习正则吧。</p><p>这是正则学习的第一篇文章…</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>正则，用简短的一句话概括，正则表达式是匹配模式，要么匹配字符，要么匹配位置。</p><h2 id="正则的方法和与正则有关的方法"><a href="#正则的方法和与正则有关的方法" class="headerlink" title="正则的方法和与正则有关的方法"></a>正则的方法和与正则有关的方法</h2><p>共有6个，字符串实例4个，正则实例2个：</p><p>String#search</p><p>String#split</p><p>String#match</p><p>String#replace</p><p>RegExp#test</p><p>RegExp#exec</p><h3 id="1-search"><a href="#1-search" class="headerlink" title="1.search()"></a>1.search()</h3><p>定义：正则去匹配字符串，如果匹配成功，就返回匹配成功的位置，匹配失败就返回-1.</p><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/\d/</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"abc123"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( string.search(regex) );</span><br><span class="line"><span class="comment">// =&gt; 3</span></span><br></pre></td></tr></table></figure><h3 id="2-split"><a href="#2-split" class="headerlink" title="2.split"></a>2.split</h3><p>定义：split()方法把原字符串分割成子字符串组成数组，并返回该数组。</p><p>语法：str.split(separator, limit)</p><p>两个参数均是可选的，其中 separator 表示分隔符，它可以是字符串也可以是正则表达式。如果忽略 separator，则返回的数组包含一个由原字符串组成的元素。如果 separator 是一个空串，则 str 将会被分割成一个由原字符串中字符组成的数组。limit 表示从返回的数组中截取前 limit 个元素，从而限定返回的数组长度。</p><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/\D/</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"2017/06/26"</span>.split(regex) )</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"2017.06.26"</span>.split(regex) )</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"2017-06-26"</span>.split(regex) )</span><br><span class="line"><span class="comment">// =&gt; ["2017", "06", "26"]</span></span><br><span class="line"><span class="comment">// =&gt; ["2017", "06", "26"]</span></span><br><span class="line"><span class="comment">// =&gt; ["2017", "06", "26"]</span></span><br></pre></td></tr></table></figure><h3 id="3-match"><a href="#3-match" class="headerlink" title="3.match"></a>3.match</h3><p>定义：match() 方法用于测试字符串是否支持指定正则表达式的规则，即使传入的是非正则表达式对象，它也会隐式地使用new RegExp(obj)将其转换为正则表达式对象。</p><p>语法：str.match(regexp)</p><p>该方法返回包含匹配结果的数组，如果没有匹配项，则返回 null</p><p>匹配原则：<br>    匹配成功就会结束，如果想继续全部匹配，加标识g</p><p><strong>描述</strong></p><ul><li><p>若正则表达式没有 g 标志，则返回同 RegExp.exec(str) 相同的结果。而且返回的数组拥有一个额外的 input 属性，该属性包含原始字符串，另外该数组还拥有一个 index 属性，该属性表示匹配字符串在原字符串中索引（从0开始）。</p></li><li><p>若正则表达式包含 g 标志，则该方法返回一个包含所有匹配结果的数组，没有匹配到则返回 null。</p></li></ul><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/^(\d&#123;4&#125;)\D(\d&#123;2&#125;)\D(\d&#123;2&#125;)$/</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"2017-06-26"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( string.match(regex) );</span><br><span class="line"><span class="comment">// =&gt;["2017-06-26", "2017", "06", "26", index: 0, input: "2017-06-26"]</span></span><br></pre></td></tr></table></figure><h3 id="4-replace"><a href="#4-replace" class="headerlink" title="4.replace"></a>4.replace</h3><p>语法：str.replace( regexp | substr, newSubStr | function[, flags] )</p><p>参数：</p><ul><li>regexp: 一个 RegExp 对象. 该正则所匹配的内容会被第二个参数的返回值替换掉。</li><li>substr: 一个要被 newSubStr 替换的字符串.</li><li>newSubStr: 替换掉第一个参数在原字符串中的匹配部分. 该字符串中可以内插一些特殊的变量名.</li><li>function: 一个用来创建新子字符串的函数, 该函数的返回值将替换掉第一个参数匹配到的结果. 该函数的参数描-述请参考 指定一个函数作为参数 小节.</li><li>flags: 注意：flags 参数在 v8 内核（Chrome and NodeJs）中不起作用. 方法中使用 flags 参数不是符合标准的并且不赞成这样做.</li></ul><p><strong>replace后面单独写一篇文章总结</strong></p><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/^(\d&#123;4&#125;)\D(\d&#123;2&#125;)\D(\d&#123;2&#125;)$/</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"2017-06-26"</span>;</span><br><span class="line"><span class="keyword">var</span> date = [];</span><br><span class="line">string.replace(regex, <span class="function"><span class="keyword">function</span>(<span class="params">match, year, month, day</span>) </span>&#123;</span><br><span class="line">date.push(year, month, day);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(date);</span><br><span class="line"><span class="comment">// =&gt; ["2017", "06", "26"]</span></span><br></pre></td></tr></table></figure><h3 id="5-test"><a href="#5-test" class="headerlink" title="5.test"></a>5.test</h3><p>说明：正则去匹配字符串，匹配成功，返回true，匹配失败，返回false</p><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/\d/</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"abc123"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( regex.test(string) );</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><h3 id="6-exec"><a href="#6-exec" class="headerlink" title="6.exec"></a>6.exec</h3><p>说明：exec() 方法在一个指定字符串中执行一个搜索匹配。返回一个结果数组或 null。</p><p>这个方法很类似match方法。</p><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/^(\d&#123;4&#125;)\D(\d&#123;2&#125;)\D(\d&#123;2&#125;)$/</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"2017-06-26"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( regex.exec(string) );</span><br><span class="line"><span class="comment">// =&gt;["2017-06-26", "2017", "06", "26", index: 0, input: "2017-06-26"]</span></span><br></pre></td></tr></table></figure><h2 id="相关API注意要点"><a href="#相关API注意要点" class="headerlink" title="相关API注意要点-"></a>相关API注意要点-</h2><h3 id="1-search和match的参数问题"><a href="#1-search和match的参数问题" class="headerlink" title="1 search和match的参数问题"></a>1 search和match的参数问题</h3><p>我们知道字符串实例的那4个方法参数都支持正则和字符串。</p><p>但search和match，会把字符串转换为正则的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">"2017.06.27"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( string.search(<span class="string">"."</span>) );</span><br><span class="line"><span class="comment">// =&gt; 0</span></span><br><span class="line"><span class="comment">//需要修改成下列形式之一</span></span><br><span class="line"><span class="built_in">console</span>.log( string.search(<span class="string">"\\."</span>) );</span><br><span class="line"><span class="built_in">console</span>.log( string.search(<span class="regexp">/\./</span>) );</span><br><span class="line"><span class="comment">// =&gt; 4</span></span><br><span class="line"><span class="comment">// =&gt; 4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( string.match(<span class="string">"."</span>) );</span><br><span class="line"><span class="comment">// =&gt; ["2", index: 0, input: "2017.06.27"]</span></span><br><span class="line"><span class="comment">//需要修改成下列形式之一</span></span><br><span class="line"><span class="built_in">console</span>.log( string.match(<span class="string">"\\."</span>) );</span><br><span class="line"><span class="built_in">console</span>.log( string.match(<span class="regexp">/\./</span>) );</span><br><span class="line"><span class="comment">// =&gt; [".", index: 4, input: "2017.06.27"]</span></span><br><span class="line"><span class="comment">// =&gt; [".", index: 4, input: "2017.06.27"]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( string.split(<span class="string">"."</span>) );</span><br><span class="line"><span class="comment">// =&gt; ["2017", "06", "27"]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( string.replace(<span class="string">"."</span>, <span class="string">"/"</span>) );</span><br><span class="line"><span class="comment">// =&gt; "2017/06.27"</span></span><br></pre></td></tr></table></figure><h3 id="2-match返回结果的格式问题"><a href="#2-match返回结果的格式问题" class="headerlink" title="2 match返回结果的格式问题"></a>2 match返回结果的格式问题</h3><p>match返回结果的格式，与正则对象是否有修饰符g有关。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">"2017.06.27"</span>;</span><br><span class="line"><span class="keyword">var</span> regex1 = <span class="regexp">/\b(\d+)\b/</span>;</span><br><span class="line"><span class="keyword">var</span> regex2 = <span class="regexp">/\b(\d+)\b/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log( string.match(regex1) );</span><br><span class="line"><span class="built_in">console</span>.log( string.match(regex2) );</span><br><span class="line"><span class="comment">// =&gt; ["2017", "2017", index: 0, input: "2017.06.27"]</span></span><br><span class="line"><span class="comment">// =&gt; ["2017", "06", "27"]</span></span><br></pre></td></tr></table></figure><p>没有g，返回的是标准匹配格式，即，数组的第一个元素是整体匹配的内容，接下来是分组捕获的内容，然后是整体匹配的第一个下标，最后是输入的目标字符串。</p><p>有g，返回的是所有匹配的内容。</p><h3 id="3-exec比match更强大"><a href="#3-exec比match更强大" class="headerlink" title="3 exec比match更强大"></a>3 exec比match更强大</h3><p>当正则没有g时，使用match返回的信息比较多。但是有g后，就没有关键的信息index了。</p><p>而exec方法就能解决这个问题，它能接着上一次匹配后继续匹配：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">"2017.06.27"</span>;</span><br><span class="line"><span class="keyword">var</span> regex2 = <span class="regexp">/\b(\d+)\b/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log( regex2.exec(string) );</span><br><span class="line"><span class="built_in">console</span>.log( regex2.lastIndex);</span><br><span class="line"><span class="built_in">console</span>.log( regex2.exec(string) );</span><br><span class="line"><span class="built_in">console</span>.log( regex2.lastIndex);</span><br><span class="line"><span class="built_in">console</span>.log( regex2.exec(string) );</span><br><span class="line"><span class="built_in">console</span>.log( regex2.lastIndex);</span><br><span class="line"><span class="built_in">console</span>.log( regex2.exec(string) );</span><br><span class="line"><span class="built_in">console</span>.log( regex2.lastIndex);</span><br><span class="line"><span class="comment">// =&gt; ["2017", "2017", index: 0, input: "2017.06.27"]</span></span><br><span class="line"><span class="comment">// =&gt; 4</span></span><br><span class="line"><span class="comment">// =&gt; ["06", "06", index: 5, input: "2017.06.27"]</span></span><br><span class="line"><span class="comment">// =&gt; 7</span></span><br><span class="line"><span class="comment">// =&gt; ["27", "27", index: 8, input: "2017.06.27"]</span></span><br><span class="line"><span class="comment">// =&gt; 10</span></span><br><span class="line"><span class="comment">// =&gt; null</span></span><br><span class="line"><span class="comment">// =&gt; 0</span></span><br></pre></td></tr></table></figure><p>其中正则实例lastIndex属性，表示下一次匹配开始的位置。</p><p>比如第一次匹配了“2017”，开始下标是0，共4个字符，因此这次匹配结束的位置是3，下一次开始匹配的位置是4。</p><p>从上述代码看出，在使用exec时，经常需要配合使用while循环：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">"2017.06.27"</span>;</span><br><span class="line"><span class="keyword">var</span> regex2 = <span class="regexp">/\b(\d+)\b/g</span>;</span><br><span class="line"><span class="keyword">var</span> result;</span><br><span class="line"><span class="keyword">while</span> ( result = regex2.exec(string) ) &#123;</span><br><span class="line"><span class="built_in">console</span>.log( result, regex2.lastIndex );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// =&gt; ["2017", "2017", index: 0, input: "2017.06.27"] 4</span></span><br><span class="line"><span class="comment">// =&gt; ["06", "06", index: 5, input: "2017.06.27"] 7</span></span><br><span class="line"><span class="comment">// =&gt; ["27", "27", index: 8, input: "2017.06.27"] 10</span></span><br></pre></td></tr></table></figure><h3 id="4-修饰符g，对exex和test的影响"><a href="#4-修饰符g，对exex和test的影响" class="headerlink" title="4 修饰符g，对exex和test的影响"></a>4 修饰符g，对exex和test的影响</h3><p>上面提到了正则实例的lastIndex属性，表示尝试匹配时，从字符串的lastIndex位开始去匹配。</p><p>字符串的四个方法，每次匹配时，都是从0开始的，即lastIndex属性始终不变。</p><p>而正则实例的两个方法exec、test，当正则是全局匹配时，每一次匹配完成后，都会修改lastIndex。下面让我们以test为例，看看你是否会迷糊：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/a/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"a"</span>), regex.lastIndex );</span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"aba"</span>), regex.lastIndex );</span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"ababc"</span>), regex.lastIndex );</span><br><span class="line"><span class="comment">// =&gt; true 1</span></span><br><span class="line"><span class="comment">// =&gt; true 3</span></span><br><span class="line"><span class="comment">// =&gt; false 0</span></span><br></pre></td></tr></table></figure><p>注意上面代码中的第三次调用test，因为这一次尝试匹配，开始从下标lastIndex即3位置处开始查找，自然就找不到了。</p><p>如果没有g，自然都是从字符串第0个字符处开始尝试匹配：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/a/</span>;</span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"a"</span>), regex.lastIndex );</span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"aba"</span>), regex.lastIndex );</span><br><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"ababc"</span>), regex.lastIndex );</span><br><span class="line"><span class="comment">// =&gt; true 0</span></span><br><span class="line"><span class="comment">// =&gt; true 0</span></span><br><span class="line"><span class="comment">// =&gt; true 0</span></span><br></pre></td></tr></table></figure><h3 id="5-test整体匹配时需要使用-和"><a href="#5-test整体匹配时需要使用-和" class="headerlink" title="5 test整体匹配时需要使用^和$"></a>5 test整体匹配时需要使用^和$</h3><p>这个相对容易理解，因为test是看目标字符串中是否有子串匹配正则，即有部分匹配即可。</p><p>如果，要整体匹配，正则前后需要添加开头和结尾：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="regexp">/123/</span>.test(<span class="string">"a123b"</span>) );</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="regexp">/^123$/</span>.test(<span class="string">"a123b"</span>) );</span><br><span class="line"><span class="comment">// =&gt; false</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="regexp">/^123$/</span>.test(<span class="string">"123"</span>) );</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><h3 id="6-split相关注意事项"><a href="#6-split相关注意事项" class="headerlink" title="6 split相关注意事项"></a>6 split相关注意事项</h3><p>split方法看起来不起眼，但要注意的地方有两个的。</p><p>第一，它可以有第二个参数，表示结果数组的最大长度：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">"html,css,javascript"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( string.split(<span class="regexp">/,/</span>, <span class="number">2</span>) );</span><br><span class="line"><span class="comment">// =&gt;["html", "css"]</span></span><br></pre></td></tr></table></figure><h3 id="7-replace是很强大的"><a href="#7-replace是很强大的" class="headerlink" title="7 replace是很强大的"></a>7 replace是很强大的</h3><hr><p>《JavaScript权威指南》认为exec是这6个API中最强大的，而我始终认为replace才是最强大的。</p><p>因为它也能拿到该拿到的信息，然后可以假借替换之名，做些其他事情。</p><p>总体来说replace有两种使用形式，这是因为它的第二个参数，可以是字符串，也可以是函数。当第二个参数是字符串时，如下的字符有特殊的含义：</p><pre><code>$1,$2,...,$99 匹配第1~99个分组里捕获的文本$&amp; 匹配到的子串文本$` 匹配到的子串的左边文本 $&apos; 匹配到的子串的右边文本$$ 美元符号</code></pre><p>例如，把”2,3,5”，变成”5=2+3”：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">"2,3,5"</span>.replace(<span class="regexp">/(\d+),(\d+),(\d+)/</span>, <span class="string">"$3=$1+$2"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">// =&gt; "5=2+3"</span></span><br></pre></td></tr></table></figure><p>又例如，把”2,3,5”，变成”222,333,555”:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">"2,3,5"</span>.replace(<span class="regexp">/(\d+)/g</span>, <span class="string">"$&amp;$&amp;$&amp;"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">// =&gt; "222,333,555"</span></span><br></pre></td></tr></table></figure><p>再例如，把”2+3=5”，变成”2+3=2+3=5=5”:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">"2+3=5"</span>.replace(<span class="regexp">/=/</span>, <span class="string">"$&amp;$`$&amp;$'$&amp;"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">// =&gt; "2+3=2+3=5=5"</span></span><br></pre></td></tr></table></figure><p>当第二个参数是函数时，我们需要注意该回调函数的参数具体是什么：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"1234 2345 3456"</span>.replace(<span class="regexp">/(\d)\d&#123;2&#125;(\d)/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">match, $<span class="number">1</span>, $<span class="number">2</span>, index, input</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log([match, $<span class="number">1</span>, $<span class="number">2</span>, index, input]);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// =&gt; ["1234", "1", "4", 0, "1234 2345 3456"]</span></span><br><span class="line"><span class="comment">// =&gt; ["2345", "2", "5", 5, "1234 2345 3456"]</span></span><br><span class="line"><span class="comment">// =&gt; ["3456", "3", "6", 10, "1234 2345 3456"]</span></span><br></pre></td></tr></table></figure><p>此时我们可以看到replace拿到的信息，并不比exec少。</p><h3 id="8-使用构造函数需要注意的问题"><a href="#8-使用构造函数需要注意的问题" class="headerlink" title="8 使用构造函数需要注意的问题"></a>8 使用构造函数需要注意的问题</h3><hr><p>一般不推荐使用构造函数生成正则，而应该优先使用字面量。因为用构造函数会多写很多\。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">"2017-06-27 2017.06.27 2017/06/27"</span>;</span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/\d&#123;4&#125;(-|\.|\/)\d&#123;2&#125;\1\d&#123;2&#125;/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log( string.match(regex) );</span><br><span class="line"><span class="comment">// =&gt; ["2017-06-27", "2017.06.27", "2017/06/27"]</span></span><br><span class="line"></span><br><span class="line">regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\d&#123;4&#125;(-|\\.|\\/)\\d&#123;2&#125;\\1\\d&#123;2&#125;"</span>, <span class="string">"g"</span>);</span><br><span class="line"><span class="built_in">console</span>.log( string.match(regex) );</span><br><span class="line"><span class="comment">// =&gt; ["2017-06-27", "2017.06.27", "2017/06/27"]</span></span><br></pre></td></tr></table></figure><h3 id="9-修饰符"><a href="#9-修饰符" class="headerlink" title="9 修饰符"></a>9 修饰符</h3><hr><p>ES5中修饰符，共3个：</p><pre><code>g 全局匹配，即找到所有匹配的，单词是globali 忽略字母大小写，单词ingoreCasem 多行匹配，只影响^和$，二者变成行的概念，即行开头和行结尾。单词是multiline</code></pre><h3 id="10-source属性"><a href="#10-source属性" class="headerlink" title="10 source属性"></a>10 source属性</h3><p>正则实例对象属性，除了global、ingnoreCase、multiline、lastIndex属性之外，还有一个source属性。</p><p>它什么时候有用呢？</p><p>比如，在构建动态的正则表达式时，可以通过查看该属性，来确认构建出的正则到底是什么：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> className = <span class="string">"high"</span>;</span><br><span class="line"><span class="keyword">var</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|\\s)"</span> + className + <span class="string">"(\\s|$)"</span>);</span><br><span class="line"><span class="built_in">console</span>.log( regex.source )</span><br><span class="line"><span class="comment">// =&gt; (^|\s)high(\s|$) 即字符串"(^|\\s)high(\\s|$)"</span></span><br></pre></td></tr></table></figure><h3 id="11-构造函数属性"><a href="#11-构造函数属性" class="headerlink" title="11 构造函数属性"></a>11 构造函数属性</h3><hr><p>构造函数的静态属性基于所执行的最近一次正则操作而变化。除了是$1,…,$9之外，还有几个不太常用的属性（有兼容性问题）：</p><pre><code>RegExp.input 最近一次目标字符串，简写成RegExp[&quot;$_&quot;]RegExp.lastMatch 最近一次匹配的文本，简写成RegExp[&quot;$&amp;&quot;]RegExp.lastParen 最近一次捕获的文本，简写成RegExp[&quot;$+&quot;]RegExp.leftContext 目标字符串中lastMatch之前的文本，简写成RegExp[&quot;$`&quot;]RegExp.rightContext 目标字符串中lastMatch之后的文本，简写成RegExp[&quot;$&apos;&quot;]</code></pre><p>测试代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/([abc])(\d)/g</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"a1b2c3d4e5"</span>;</span><br><span class="line">string.match(regex);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">RegExp</span>.input );</span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">RegExp</span>[<span class="string">"$_"</span>]);</span><br><span class="line"><span class="comment">// =&gt; "a1b2c3d4e5"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">RegExp</span>.lastMatch );</span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">RegExp</span>[<span class="string">"$&amp;"</span>] );</span><br><span class="line"><span class="comment">// =&gt; "c3"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">RegExp</span>.lastParen );</span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">RegExp</span>[<span class="string">"$+"</span>] );</span><br><span class="line"><span class="comment">// =&gt; "3"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">RegExp</span>.leftContext );</span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">RegExp</span>[<span class="string">"$`"</span>] );</span><br><span class="line"><span class="comment">// =&gt; "a1b2"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">RegExp</span>.rightContext );</span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">RegExp</span>[<span class="string">"$'"</span>] );</span><br><span class="line"><span class="comment">// =&gt; "d4e5"</span></span><br></pre></td></tr></table></figure><h2 id="结语："><a href="#结语：" class="headerlink" title="结语："></a>结语：</h2><hr><pre><code>我搜查列出了相关的6个方法，并对6个方法进行了说明。后面我会对replace再单独出一篇文章。参考资料里的第一篇文章真的非常好，值得仔细研读。如果你想粗略了解正则的方法，看我这篇文章是没错了，后面列出的相应方法的坑点和注意点。后面，我会再慢慢补充匹配规则，我会单独列出一篇文章，因为匹配规则也有很多注意点呢。哈哈哈，其实也是在下面的文章里面看的啦，文章真的写得好---嘻嘻其实正则也没有那么难的啦-----希望这篇文章对你有帮助，每天都要加油哦。加油，与君共勉！！！</code></pre><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><ul><li><a href="https://juejin.im/post/5965943ff265da6c30653879#heading-0" target="_blank" rel="noopener">JS正则表达式完整教程（略长）</a></li></ul><p>文章真的写的不错，认认真真，细嚼慢咽的看完这篇文章，保证你学会正则。</p><p>这篇文章对正则的细枝末节都有详细的介绍，我摘抄了部分重要的代码，和总结了6个方法。</p><p>剩下的匹配规则、关键字等，以后会一一补充。</p><ul><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp" target="_blank" rel="noopener">MDN-RegExp</a></p></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String" target="_blank" rel="noopener">MDN-String</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
