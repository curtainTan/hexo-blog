<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>博客再次启程</title>
      <link href="/2019/12/02/%E5%8D%9A%E5%AE%A2%E5%86%8D%E6%AC%A1%E5%90%AF%E7%A8%8B/"/>
      <url>/2019/12/02/%E5%8D%9A%E5%AE%A2%E5%86%8D%E6%AC%A1%E5%90%AF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.speed.moe/images/11283769e2d6035f894edb659848d4e1.jpg" alt=""></p><p>换了博客的主题，页面美观多了，心情也舒畅多了。更加有动力写博客了，整理好心情，重新出发！！</p><a id="more"></a><h1 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h1><p>经过一天的配置，博客搭建的差不多了，</p><p>整理好心情！！！</p><h1 id="致自己："><a href="#致自己：" class="headerlink" title="致自己："></a>致自己：</h1><p><strong>你要加油啊！活出自己的样子！！</strong></p><h1 id="重新出发！"><a href="#重新出发！" class="headerlink" title="重新出发！"></a>重新出发！</h1>]]></content>
      
      
      <categories>
          
          <category> 我的随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>drawing-board画板</title>
      <link href="/2019/08/14/drawing-board%E7%94%BB%E6%9D%BF/"/>
      <url>/2019/08/14/drawing-board%E7%94%BB%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.speed.moe/images/10b7a48eb201a8d8b55b879f1346bc08.png" alt=""><br>canvas写的画板</p><a id="more"></a><h1 id="快到碗里来-画板"><a href="#快到碗里来-画板" class="headerlink" title="快到碗里来-画板"></a>快到碗里来-画板</h1><hr><p>预览：<a href="https://curtaintan.github.io/drawing-board/" target="_blank" rel="noopener">点击</a></p><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><hr><p>之前学完canvas，一直想自己写一点东西，这两天终于完成了，开心！！</p><h2 id="完成功能："><a href="#完成功能：" class="headerlink" title="完成功能："></a>完成功能：</h2><hr><ol><li>绘画</li><li>画直线</li><li>截图</li><li>旋转</li><li>弹幕</li><li>鼠标触碰弹幕，弹幕悬停</li><li>撤销/前进</li><li>设置画笔信息</li><li>兼容移动端</li></ol><h3 id="功能截图："><a href="#功能截图：" class="headerlink" title="功能截图："></a>功能截图：</h3><p><fancybox><img src="https://i.speed.moe/images/049770423ee86256db618185a2e988f1.png" height="400px"  /></fancybox><br><fancybox><br>    <img src="https://i.speed.moe/image/byX3" height="300px" /><br>    <img src="https://i.speed.moe/images/be83f5d60c5876a922fdcc4f2f7a67e8.png" height="300px" /><br>    <img src="https://i.speed.moe/images/785defcb66b13d6054be52db20590def.png" height="300px" /><br></fancybox><br><fancybox><img src="https://i.speed.moe/images/5471de87336ed89bc3484110078ee2f8.png" height="400px" /></fancybox><br><fancybox><img src="https://i.speed.moe/images/3aba481fb121bc400470f7b39f946fc7.png" /></fancybox></p><h2 id="前置说明"><a href="#前置说明" class="headerlink" title="前置说明"></a>前置说明</h2><p>如果你需要参考代码，你需要看下这里。<br>因为功能复杂，标志的变量有接近10个之多，一下子可能很难看懂，所以我这里说明下我的开发流程，以及定义变量的顺序。</p><ol><li><strong>功能顺序：</strong></li></ol><p>画笔 → 定义画笔信息 → 橡皮檫 → 删除 → 撤销/前进 → 直线 → 截图 → 弹幕</p><ol start="2"><li><strong>定义变量的顺序，以及作用：</strong></li></ol><p>所有功能变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isDown = <span class="literal">false</span>                  <span class="comment">// 标志鼠标是否按下      绘图三步和剪切三步走时，后面两个事件触发的标志</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> points = []                     <span class="comment">// 滑动时收集的点       绘画三步走时，为了时画的线光滑，记录点，减短画线的距离</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> beginPoint = <span class="literal">null</span>               <span class="comment">// 开始的点            绘画三步走时使用</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">----这三个为一组，画线三人组，为了让画的线更为光滑</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> currentMenu = <span class="string">"icon-pen"</span>        <span class="comment">// 初始按钮            底部按钮选中的按钮</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> currentColor = <span class="number">0</span>                <span class="comment">// 初始颜色的index     颜色选择，默认第一个</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> paintingModal = <span class="string">"pen"</span>           <span class="comment">// 画笔模式   line||pen||cut</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">----按钮功能三人组，按钮选中标记，颜色选中，画画的模式，切换前面画笔和画直线的模式</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lookModal = <span class="literal">false</span>               <span class="comment">// 鼠标模式             按钮第一个功能，此模式不能绘画，只能看</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cuted = <span class="literal">false</span>                   <span class="comment">// 标记裁剪时，是否已经裁剪       裁剪后，防止后续的操作再次触发裁剪操作 </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">----鼠标模式和剪切模式的定义</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> animationTimer = <span class="literal">null</span>           <span class="comment">// 弹幕动画的timer               动画的timer</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> barrageArray = []               <span class="comment">// 保存弹幕的数组</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> globalPoint = &#123; <span class="attr">x</span> : <span class="number">0</span>, <span class="attr">y</span> : <span class="number">0</span> &#125;  <span class="comment">// canvas上鼠标的点        ---弹幕时使用</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">----弹幕三人组  globalPoint用来标记鼠标在canvas中的坐标，用于判断鼠标是否触碰到弹幕上</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现撤销和重做的功能</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> canvasHistory = []                    <span class="comment">// canvas数据，在每次画线和橡皮檫使用后保存数据</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> step = <span class="number">0</span>                              <span class="comment">// 画笔抬起的步数，清空时，步数也清空</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">----撤销/前进二人组，画笔抬起时，把画布信息用getImageData存入canvasHistory，用step完成前进和撤销的功能</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> penAttibutes = &#123;                       <span class="comment">// 画笔数据，</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">    width : <span class="number">2</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">    lineCap : <span class="string">"round"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">    lineJoin : <span class="string">"round"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">    strokeStyle: <span class="string">"#000"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">    fillStyle: <span class="string">"#000"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">    globalCompositeOperation: <span class="string">"source-over"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">    globalAlpha : <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h2 id="开发中遇到的难点与重点与解决方案："><a href="#开发中遇到的难点与重点与解决方案：" class="headerlink" title="开发中遇到的难点与重点与解决方案："></a>开发中遇到的难点与重点与解决方案：</h2><ol><li>保存历史记录使用api对比</li></ol><p>我在写代码的时候有做过参考 <strong><a href="https://juejin.im/post/5c7bf106e51d454b47558882" target="_blank" rel="noopener">这篇文章</a></strong>，<br>文章里用是canvas.toDataUrl的方式做的数据保存，评论里说这个数据保存不理想，<br>其实我一开始的时候想的就是用ctx.getImageDaata的方式来做的，我也用这个两个api做了一个对比：</p><p>代码：</p><img src="./image/savecode.png" /><p>结果：</p><img src="./image/getImg.png" /><img src="./image/dataurl.png" /><p>可见，使用getImageData获取数据是时间是非常短的，并且获取到是画布像素数据，<br>后续可以直接进行像素操作，从而不用再花时间再去获取画布信息，<br>其次，getImageData获取到是数据是有数据结构的，这样在内存里面保存下来对内存更加友好，<br>而使用toDataUrl方式保存下来的数据有21万行那么长的字符串，对内存并不友好。</p><p>后面我还做了他们绘制到画布上的时间对比，他们的时间都在1ms内，到时每次putImageData都要快一点点，但是快这一点时间的意义并不大。</p><p>toDataUrl也是有好处的，因为转置出来的是base64的字符串，所以他能够直接作为图片的src属性，让图片显示到页面。</p><ol start="2"><li>画直线</li></ol><p>如何画出一条直线？？当我做了撤销和前进的时候，我就把画板数据给存到canvasHistory里面了，<br>这里刚好用到，鼠标移动是时候，先清空画布，再绘制保存到canvasHistory里最后那个数据，然后就是绘图三步走，就完成了。</p><p><strong>注意：</strong>这里一定要绘图三步走，或者在绘制前一定要用beginPath()重开一条路径，如果不重开路径，<br>绘制时，会把前面的直线一同绘制出来，因为你一直是一条路径，所以下次绘制时，上次的点也要绘制一遍。</p><ol start="3"><li><p>图片旋转</p><p> 旋转很类似css3，但是，canvas的基点固定在左上角处，所以在旋转的时候，需要先用translate移动画板，可以画一下图，</p></li></ol><p>下面是我画的图：</p><img src="./image/shiyitu.jpg" width="280px" /><pre><code>问题： 当我画笔有rotate属性的时候，当前操作的putImageData不会成功，不知道为什么-----</code></pre><ol start="4"><li><p>如何画出一条光滑的曲线</p><p> 用正常的画法画曲线是时候，画出的曲线不够光滑，<br> 所以我就参考了这篇文章 <strong><a href="https://segmentfault.com/a/1190000016672567" target="_blank" rel="noopener">canvas进阶——如何画出平滑的曲线?</a></strong><br> （其实我也想到了用二次贝塞尔曲线，在寻找更好的解决方案时，就找到这个方法了，这个方案更优），原理可以看原文。</p></li><li><p>鼠标触摸弹幕</p><p> 因为canvas是无记忆性的，所以，你用isPointPath和isPointStroke时，是在当前绘画下才能检测。<br> 在使用isPointPath时，他只与path路径有关，意思就是，你用fillRect直接绘制一个矩形图形是不能检测的，<br> 只能检测rect()和pathTo等围起来的路径内。</p><p> 所以，这里我做了一个外挂路径-用rect()把每个弹幕框起来——哈哈–</p></li><li><p>使用drawImage须知：</p><p> drawImage有三种传参方式，三种方式出来的效果，在书写前可以先参考效果。</p></li></ol><p>参考地址：<a href="https://www.canvasapi.cn/CanvasRenderingContext2D/drawImage" target="_blank" rel="noopener">CanvasRenderingContext2D.drawImage</a></p><ol start="7"><li><p>兼容移动端</p><p> 当在移动端时，会存在移动端延时300ms的问题，因为移动端有双击放大功能，故存在300ms时间。</p><p> 我解决的方法是设置meta信息，禁止缩放，就可以防止300ms问题</p> <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no, target-densitydpi=device-dpi" /></li></ol><h2 id="结语："><a href="#结语：" class="headerlink" title="结语："></a>结语：</h2><p>这个项目大概用了canvas的75%的api，还有像素操作和渐变等api还没用到。</p><p>不知道有没有人看呢，</p><p>如果你看到了这篇文章，希望对你有帮助。</p><p>慢慢来，好好学习，要加油哦！</p><p>与君共勉！！</p><h3 id="参考材料："><a href="#参考材料：" class="headerlink" title="参考材料："></a>参考材料：</h3><ul><li><a href="https://juejin.im/post/5c7bf106e51d454b47558882" target="_blank" rel="noopener">手把手教你实现一个canvas智绘画板</a></li></ul><p>参考了楼主项目的样式，但是所有样式都是我自己写的，嘻嘻，实现方式不一样哦。。</p><ul><li><a href="https://segmentfault.com/a/1190000016672567" target="_blank" rel="noopener">canvas进阶——如何画出平滑的曲线?</a></li></ul><p>画一条光滑的曲线，不错哦。</p><ul><li><a href="http://ghmagical.com/article/page/id/rf5VpT3YQPpN" target="_blank" rel="noopener">canvas动画包教不包会</a></li></ul><p>可以在这里把所有api的意义和作用和参数等都记下来—–</p><ul><li><a href="https://www.canvasapi.cn/" target="_blank" rel="noopener">Canvas API中文文档首页地图</a></li></ul><p>canvas所有的api，当然你也可以去mdn看，其实都一样啦—</p>]]></content>
      
      
      <categories>
          
          <category> 我的作品 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> canvas </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则小记之api速学</title>
      <link href="/2019/08/14/%E6%AD%A3%E5%88%99%E5%B0%8F%E8%AE%B0%E4%B9%8Bapi%E9%80%9F%E5%AD%A6/"/>
      <url>/2019/08/14/%E6%AD%A3%E5%88%99%E5%B0%8F%E8%AE%B0%E4%B9%8Bapi%E9%80%9F%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3529936001,627965941&fm=26&gp=0.jpg" alt=""></p><p>作为一个前端，正则是必须要会的技能之一，所以，让我们开始学习正则吧。</p><p>这是正则学习的第一篇文章…</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>正则，用简短的一句话概括，正则表达式是匹配模式，要么匹配字符，要么匹配位置。</p><h2 id="正则的方法和与正则有关的方法"><a href="#正则的方法和与正则有关的方法" class="headerlink" title="正则的方法和与正则有关的方法"></a>正则的方法和与正则有关的方法</h2><p>共有6个，字符串实例4个，正则实例2个：</p><pre><code>String#searchString#splitString#matchString#replaceRegExp#testRegExp#exec</code></pre><h3 id="1-search"><a href="#1-search" class="headerlink" title="1.search()"></a>1.search()</h3><p>定义：正则去匹配字符串，如果匹配成功，就返回匹配成功的位置，匹配失败就返回-1.</p><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/\d/</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">"abc123"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( string.search(regex) );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; 3</span></span></pre></td></tr></table></figure><h3 id="2-split"><a href="#2-split" class="headerlink" title="2.split"></a>2.split</h3><p>定义：split()方法把原字符串分割成子字符串组成数组，并返回该数组。</p><p>语法：str.split(separator, limit)</p><p>两个参数均是可选的，其中 separator 表示分隔符，它可以是字符串也可以是正则表达式。如果忽略 separator，则返回的数组包含一个由原字符串组成的元素。如果 separator 是一个空串，则 str 将会被分割成一个由原字符串中字符组成的数组。limit 表示从返回的数组中截取前 limit 个元素，从而限定返回的数组长度。</p><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/\D/</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="string">"2017/06/26"</span>.split(regex) )</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="string">"2017.06.26"</span>.split(regex) )</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="string">"2017-06-26"</span>.split(regex) )</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; ["2017", "06", "26"]</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; ["2017", "06", "26"]</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; ["2017", "06", "26"]</span></span></pre></td></tr></table></figure><h3 id="3-match"><a href="#3-match" class="headerlink" title="3.match"></a>3.match</h3><p>定义：match() 方法用于测试字符串是否支持指定正则表达式的规则，即使传入的是非正则表达式对象，它也会隐式地使用new RegExp(obj)将其转换为正则表达式对象。</p><p>语法：str.match(regexp)</p><p>该方法返回包含匹配结果的数组，如果没有匹配项，则返回 null</p><p>匹配原则：<br>    匹配成功就会结束，如果想继续全部匹配，加标识g</p><p><strong>描述</strong></p><ul><li><p>若正则表达式没有 g 标志，则返回同 RegExp.exec(str) 相同的结果。而且返回的数组拥有一个额外的 input 属性，该属性包含原始字符串，另外该数组还拥有一个 index 属性，该属性表示匹配字符串在原字符串中索引（从0开始）。</p></li><li><p>若正则表达式包含 g 标志，则该方法返回一个包含所有匹配结果的数组，没有匹配到则返回 null。</p></li></ul><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/^(\d&#123;4&#125;)\D(\d&#123;2&#125;)\D(\d&#123;2&#125;)$/</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">"2017-06-26"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( string.match(regex) );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt;["2017-06-26", "2017", "06", "26", index: 0, input: "2017-06-26"]</span></span></pre></td></tr></table></figure><h3 id="4-replace"><a href="#4-replace" class="headerlink" title="4.replace"></a>4.replace</h3><p>语法：str.replace( regexp | substr, newSubStr | function[, flags] )</p><p>参数：</p><ul><li>regexp: 一个 RegExp 对象. 该正则所匹配的内容会被第二个参数的返回值替换掉。</li><li>substr: 一个要被 newSubStr 替换的字符串.</li><li>newSubStr: 替换掉第一个参数在原字符串中的匹配部分. 该字符串中可以内插一些特殊的变量名.</li><li>function: 一个用来创建新子字符串的函数, 该函数的返回值将替换掉第一个参数匹配到的结果. 该函数的参数描-述请参考 指定一个函数作为参数 小节.</li><li>flags: 注意：flags 参数在 v8 内核（Chrome and NodeJs）中不起作用. 方法中使用 flags 参数不是符合标准的并且不赞成这样做.</li></ul><p><strong>replace后面单独写一篇文章总结</strong></p><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/^(\d&#123;4&#125;)\D(\d&#123;2&#125;)\D(\d&#123;2&#125;)$/</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">"2017-06-26"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = [];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">string.replace(regex, <span class="function"><span class="keyword">function</span>(<span class="params">match, year, month, day</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">date.push(year, month, day);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(date);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; ["2017", "06", "26"]</span></span></pre></td></tr></table></figure><h3 id="5-test"><a href="#5-test" class="headerlink" title="5.test"></a>5.test</h3><p>说明：正则去匹配字符串，匹配成功，返回true，匹配失败，返回false</p><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/\d/</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">"abc123"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( regex.test(string) );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; true</span></span></pre></td></tr></table></figure><h3 id="6-exec"><a href="#6-exec" class="headerlink" title="6.exec"></a>6.exec</h3><p>说明：exec() 方法在一个指定字符串中执行一个搜索匹配。返回一个结果数组或 null。</p><p>这个方法很类似match方法。</p><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/^(\d&#123;4&#125;)\D(\d&#123;2&#125;)\D(\d&#123;2&#125;)$/</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">"2017-06-26"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( regex.exec(string) );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt;["2017-06-26", "2017", "06", "26", index: 0, input: "2017-06-26"]</span></span></pre></td></tr></table></figure><h2 id="相关API注意要点"><a href="#相关API注意要点" class="headerlink" title="相关API注意要点-"></a>相关API注意要点-</h2><h3 id="1-search和match的参数问题"><a href="#1-search和match的参数问题" class="headerlink" title="1 search和match的参数问题"></a>1 search和match的参数问题</h3><p>我们知道字符串实例的那4个方法参数都支持正则和字符串。</p><p>但search和match，会把字符串转换为正则的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">"2017.06.27"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( string.search(<span class="string">"."</span>) );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; 0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要修改成下列形式之一</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( string.search(<span class="string">"\\."</span>) );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( string.search(<span class="regexp">/\./</span>) );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; 4</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; 4</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( string.match(<span class="string">"."</span>) );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; ["2", index: 0, input: "2017.06.27"]</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要修改成下列形式之一</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( string.match(<span class="string">"\\."</span>) );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( string.match(<span class="regexp">/\./</span>) );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; [".", index: 4, input: "2017.06.27"]</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; [".", index: 4, input: "2017.06.27"]</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( string.split(<span class="string">"."</span>) );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; ["2017", "06", "27"]</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( string.replace(<span class="string">"."</span>, <span class="string">"/"</span>) );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; "2017/06.27"</span></span></pre></td></tr></table></figure><h3 id="2-match返回结果的格式问题"><a href="#2-match返回结果的格式问题" class="headerlink" title="2 match返回结果的格式问题"></a>2 match返回结果的格式问题</h3><p>match返回结果的格式，与正则对象是否有修饰符g有关。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">"2017.06.27"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex1 = <span class="regexp">/\b(\d+)\b/</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex2 = <span class="regexp">/\b(\d+)\b/g</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( string.match(regex1) );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( string.match(regex2) );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; ["2017", "2017", index: 0, input: "2017.06.27"]</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; ["2017", "06", "27"]</span></span></pre></td></tr></table></figure><p>没有g，返回的是标准匹配格式，即，数组的第一个元素是整体匹配的内容，接下来是分组捕获的内容，然后是整体匹配的第一个下标，最后是输入的目标字符串。</p><p>有g，返回的是所有匹配的内容。</p><h3 id="3-exec比match更强大"><a href="#3-exec比match更强大" class="headerlink" title="3 exec比match更强大"></a>3 exec比match更强大</h3><p>当正则没有g时，使用match返回的信息比较多。但是有g后，就没有关键的信息index了。</p><p>而exec方法就能解决这个问题，它能接着上一次匹配后继续匹配：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">"2017.06.27"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex2 = <span class="regexp">/\b(\d+)\b/g</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( regex2.exec(string) );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( regex2.lastIndex);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( regex2.exec(string) );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( regex2.lastIndex);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( regex2.exec(string) );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( regex2.lastIndex);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( regex2.exec(string) );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( regex2.lastIndex);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; ["2017", "2017", index: 0, input: "2017.06.27"]</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; 4</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; ["06", "06", index: 5, input: "2017.06.27"]</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; 7</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; ["27", "27", index: 8, input: "2017.06.27"]</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; 10</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; null</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; 0</span></span></pre></td></tr></table></figure><p>其中正则实例lastIndex属性，表示下一次匹配开始的位置。</p><p>比如第一次匹配了“2017”，开始下标是0，共4个字符，因此这次匹配结束的位置是3，下一次开始匹配的位置是4。</p><p>从上述代码看出，在使用exec时，经常需要配合使用while循环：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">"2017.06.27"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex2 = <span class="regexp">/\b(\d+)\b/g</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( result = regex2.exec(string) ) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( result, regex2.lastIndex );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; ["2017", "2017", index: 0, input: "2017.06.27"] 4</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; ["06", "06", index: 5, input: "2017.06.27"] 7</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; ["27", "27", index: 8, input: "2017.06.27"] 10</span></span></pre></td></tr></table></figure><h3 id="4-修饰符g，对exex和test的影响"><a href="#4-修饰符g，对exex和test的影响" class="headerlink" title="4 修饰符g，对exex和test的影响"></a>4 修饰符g，对exex和test的影响</h3><p>上面提到了正则实例的lastIndex属性，表示尝试匹配时，从字符串的lastIndex位开始去匹配。</p><p>字符串的四个方法，每次匹配时，都是从0开始的，即lastIndex属性始终不变。</p><p>而正则实例的两个方法exec、test，当正则是全局匹配时，每一次匹配完成后，都会修改lastIndex。下面让我们以test为例，看看你是否会迷糊：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/a/g</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"a"</span>), regex.lastIndex );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"aba"</span>), regex.lastIndex );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"ababc"</span>), regex.lastIndex );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; true 1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; true 3</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; false 0</span></span></pre></td></tr></table></figure><p>注意上面代码中的第三次调用test，因为这一次尝试匹配，开始从下标lastIndex即3位置处开始查找，自然就找不到了。</p><p>如果没有g，自然都是从字符串第0个字符处开始尝试匹配：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/a/</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"a"</span>), regex.lastIndex );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"aba"</span>), regex.lastIndex );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"ababc"</span>), regex.lastIndex );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; true 0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; true 0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; true 0</span></span></pre></td></tr></table></figure><h3 id="5-test整体匹配时需要使用-和"><a href="#5-test整体匹配时需要使用-和" class="headerlink" title="5 test整体匹配时需要使用^和$"></a>5 test整体匹配时需要使用^和$</h3><p>这个相对容易理解，因为test是看目标字符串中是否有子串匹配正则，即有部分匹配即可。</p><p>如果，要整体匹配，正则前后需要添加开头和结尾：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="regexp">/123/</span>.test(<span class="string">"a123b"</span>) );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="regexp">/^123$/</span>.test(<span class="string">"a123b"</span>) );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="regexp">/^123$/</span>.test(<span class="string">"123"</span>) );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; true</span></span></pre></td></tr></table></figure><h3 id="6-split相关注意事项"><a href="#6-split相关注意事项" class="headerlink" title="6 split相关注意事项"></a>6 split相关注意事项</h3><p>split方法看起来不起眼，但要注意的地方有两个的。</p><p>第一，它可以有第二个参数，表示结果数组的最大长度：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">"html,css,javascript"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( string.split(<span class="regexp">/,/</span>, <span class="number">2</span>) );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt;["html", "css"]</span></span></pre></td></tr></table></figure><h3 id="7-replace是很强大的"><a href="#7-replace是很强大的" class="headerlink" title="7 replace是很强大的"></a>7 replace是很强大的</h3><hr><p>《JavaScript权威指南》认为exec是这6个API中最强大的，而我始终认为replace才是最强大的。</p><p>因为它也能拿到该拿到的信息，然后可以假借替换之名，做些其他事情。</p><p>总体来说replace有两种使用形式，这是因为它的第二个参数，可以是字符串，也可以是函数。当第二个参数是字符串时，如下的字符有特殊的含义：</p><pre><code>$1,$2,...,$99 匹配第1~99个分组里捕获的文本$&amp; 匹配到的子串文本$` 匹配到的子串的左边文本 $&apos; 匹配到的子串的右边文本$$ 美元符号</code></pre><p>例如，把”2,3,5”，变成”5=2+3”：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">"2,3,5"</span>.replace(<span class="regexp">/(\d+),(\d+),(\d+)/</span>, <span class="string">"$3=$1+$2"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(result);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; "5=2+3"</span></span></pre></td></tr></table></figure><p>又例如，把”2,3,5”，变成”222,333,555”:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">"2,3,5"</span>.replace(<span class="regexp">/(\d+)/g</span>, <span class="string">"$&amp;$&amp;$&amp;"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(result);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; "222,333,555"</span></span></pre></td></tr></table></figure><p>再例如，把”2+3=5”，变成”2+3=2+3=5=5”:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">"2+3=5"</span>.replace(<span class="regexp">/=/</span>, <span class="string">"$&amp;$`$&amp;$'$&amp;"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(result);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; "2+3=2+3=5=5"</span></span></pre></td></tr></table></figure><p>当第二个参数是函数时，我们需要注意该回调函数的参数具体是什么：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="string">"1234 2345 3456"</span>.replace(<span class="regexp">/(\d)\d&#123;2&#125;(\d)/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">match, $<span class="number">1</span>, $<span class="number">2</span>, index, input</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log([match, $<span class="number">1</span>, $<span class="number">2</span>, index, input]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; ["1234", "1", "4", 0, "1234 2345 3456"]</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; ["2345", "2", "5", 5, "1234 2345 3456"]</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; ["3456", "3", "6", 10, "1234 2345 3456"]</span></span></pre></td></tr></table></figure><p>此时我们可以看到replace拿到的信息，并不比exec少。</p><h3 id="8-使用构造函数需要注意的问题"><a href="#8-使用构造函数需要注意的问题" class="headerlink" title="8 使用构造函数需要注意的问题"></a>8 使用构造函数需要注意的问题</h3><hr><p>一般不推荐使用构造函数生成正则，而应该优先使用字面量。因为用构造函数会多写很多\。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">"2017-06-27 2017.06.27 2017/06/27"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/\d&#123;4&#125;(-|\.|\/)\d&#123;2&#125;\1\d&#123;2&#125;/g</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( string.match(regex) );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; ["2017-06-27", "2017.06.27", "2017/06/27"]</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\d&#123;4&#125;(-|\\.|\\/)\\d&#123;2&#125;\\1\\d&#123;2&#125;"</span>, <span class="string">"g"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( string.match(regex) );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; ["2017-06-27", "2017.06.27", "2017/06/27"]</span></span></pre></td></tr></table></figure><h3 id="9-修饰符"><a href="#9-修饰符" class="headerlink" title="9 修饰符"></a>9 修饰符</h3><hr><p>ES5中修饰符，共3个：</p><pre><code>g 全局匹配，即找到所有匹配的，单词是globali 忽略字母大小写，单词ingoreCasem 多行匹配，只影响^和$，二者变成行的概念，即行开头和行结尾。单词是multiline</code></pre><h3 id="10-source属性"><a href="#10-source属性" class="headerlink" title="10 source属性"></a>10 source属性</h3><p>正则实例对象属性，除了global、ingnoreCase、multiline、lastIndex属性之外，还有一个source属性。</p><p>它什么时候有用呢？</p><p>比如，在构建动态的正则表达式时，可以通过查看该属性，来确认构建出的正则到底是什么：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> className = <span class="string">"high"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|\\s)"</span> + className + <span class="string">"(\\s|$)"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( regex.source )</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; (^|\s)high(\s|$) 即字符串"(^|\\s)high(\\s|$)"</span></span></pre></td></tr></table></figure><h3 id="11-构造函数属性"><a href="#11-构造函数属性" class="headerlink" title="11 构造函数属性"></a>11 构造函数属性</h3><hr><p>构造函数的静态属性基于所执行的最近一次正则操作而变化。除了是$1,…,$9之外，还有几个不太常用的属性（有兼容性问题）：</p><pre><code>RegExp.input 最近一次目标字符串，简写成RegExp[&quot;$_&quot;]RegExp.lastMatch 最近一次匹配的文本，简写成RegExp[&quot;$&amp;&quot;]RegExp.lastParen 最近一次捕获的文本，简写成RegExp[&quot;$+&quot;]RegExp.leftContext 目标字符串中lastMatch之前的文本，简写成RegExp[&quot;$`&quot;]RegExp.rightContext 目标字符串中lastMatch之后的文本，简写成RegExp[&quot;$&apos;&quot;]</code></pre><p>测试代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/([abc])(\d)/g</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">"a1b2c3d4e5"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">string.match(regex);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="built_in">RegExp</span>.input );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="built_in">RegExp</span>[<span class="string">"$_"</span>]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; "a1b2c3d4e5"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="built_in">RegExp</span>.lastMatch );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="built_in">RegExp</span>[<span class="string">"$&amp;"</span>] );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; "c3"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="built_in">RegExp</span>.lastParen );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="built_in">RegExp</span>[<span class="string">"$+"</span>] );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; "3"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="built_in">RegExp</span>.leftContext );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="built_in">RegExp</span>[<span class="string">"$`"</span>] );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; "a1b2"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="built_in">RegExp</span>.rightContext );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="built_in">RegExp</span>[<span class="string">"$'"</span>] );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; "d4e5"</span></span></pre></td></tr></table></figure><h2 id="结语："><a href="#结语：" class="headerlink" title="结语："></a>结语：</h2><hr><pre><code>我搜查列出了相关的6个方法，并对6个方法进行了说明。后面我会对replace再单独出一篇文章。参考资料里的第一篇文章真的非常好，值得仔细研读。如果你想粗略了解正则的方法，看我这篇文章是没错了，后面列出的相应方法的坑点和注意点。后面，我会再慢慢补充匹配规则，我会单独列出一篇文章，因为匹配规则也有很多注意点呢。哈哈哈，其实也是在下面的文章里面看的啦，文章真的写得好---嘻嘻其实正则也没有那么难的啦-----希望这篇文章对你有帮助，每天都要加油哦。加油，与君共勉！！！</code></pre><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><ul><li><a href="https://juejin.im/post/5965943ff265da6c30653879#heading-0" target="_blank" rel="noopener">JS正则表达式完整教程（略长）</a></li></ul><p>文章真的写的不错，认认真真，细嚼慢咽的看完这篇文章，保证你学会正则。</p><p>这篇文章对正则的细枝末节都有详细的介绍，我摘抄了部分重要的代码，和总结了6个方法。</p><p>剩下的匹配规则、关键字等，以后会一一补充。</p><ul><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp" target="_blank" rel="noopener">MDN-RegExp</a></p></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String" target="_blank" rel="noopener">MDN-String</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
